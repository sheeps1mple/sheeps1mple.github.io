<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2.26周赛wp</title>
    <url>/2023/02/27/2-26%E5%91%A8%E8%B5%9Bwp/</url>
    <content><![CDATA[<h1 id="周赛（02-x2F-26）WP"><a href="#周赛（02-x2F-26）WP" class="headerlink" title="周赛（02&#x2F;26）WP"></a>周赛（02&#x2F;26）WP</h1><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="1-Keyed-Caesar"><a href="#1-Keyed-Caesar" class="headerlink" title="1.Keyed Caesar"></a>1.Keyed Caesar</h3><p>key里字母在字母表中的数字就是偏移量</p>
<p>注意凯撒通常只针对二十六个字母</p>
<h3 id="2-找找看"><a href="#2-找找看" class="headerlink" title="2.找找看"></a>2.找找看</h3><p>这道题是原题</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/14c0f5c3b41d2973085306c546ae83f2.png" alt="image-20230226184700958"></p>
<h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="1-re1"><a href="#1-re1" class="headerlink" title="1.re1"></a>1.re1</h3><p>再简单不过的一道re，考虑到你们寒假有点懈怠（我也是）出的及其入门的题目找点自信</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/7e45dc88c1445c8fd8fd26a73ed9623a.png" alt="image-20230225115535710"></p>
<p>没什么可说的 3替换成e 4替换成a结束</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">&quot;&#123;34sy_r3v3rs3&#125;&quot;</span></span><br><span class="line">flag=flag.replace(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;e&quot;</span>).replace(<span class="string">&quot;4&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SLsec&quot;</span> + flag)</span><br></pre></td></tr></table></figure>

<h3 id="2-re2"><a href="#2-re2" class="headerlink" title="2.re2"></a>2.re2</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/e64c2ac95e77c3fd6f1d11b0f90d28cf.png" alt="image-20230225134651061"></p>
<p>只挑选了 97 98 65 66 这几个数字加24 其他都是减2(比赛的发现判断范围有问题，但是不影响做题)</p>
<p>第一种方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str1[<span class="number">64</span>] = <span class="string">&quot;QJqcaypc]fcjjm&#123;&quot;</span>;</span><br><span class="line">    <span class="comment">//char flag[64] = &quot;SLsec&#123;re_hello&#125;&quot;;</span></span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(str1);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( str1[i] &gt; <span class="number">94</span> &amp;&amp; str1[i] &lt;= <span class="number">96</span> || str1[i] &gt; <span class="number">62</span> &amp;&amp; str1[i] &lt;= <span class="number">64</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            str1[i] -= <span class="number">24</span>;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            str1[i] += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,str1[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种方法是爆破</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> Str1[<span class="number">16</span>] = <span class="string">&quot;QJqcaypc]fcjjm&#123;&quot;</span>;</span><br><span class="line">    <span class="type">char</span> flag[<span class="number">16</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> i,j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">65</span>;j&lt;<span class="number">126</span>;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			flag[i] = j;</span><br><span class="line">			<span class="keyword">if</span> ( flag[i] &gt; <span class="number">96</span> &amp;&amp; flag[i] &lt;= <span class="number">98</span> || flag[i] &gt; <span class="number">64</span> &amp;&amp; flag[i] &lt;= <span class="number">66</span> )</span><br><span class="line">			&#123;</span><br><span class="line">      			flag[i] += <span class="number">24</span>;</span><br><span class="line">			&#125;</span><br><span class="line">    		<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">     			flag[i] -= <span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(flag[i] == Str1[i])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,j);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-re3"><a href="#3-re3" class="headerlink" title="3.re3"></a>3.re3</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/88fbf1bbcc60a47e40d12082cc87aee8.png" alt="image-20230226013043966"></p>
<p>主函数啥都没有，在函数列表发现了名为ques的可疑函数，经过调试程序并没有执行这个函数，思路是修改EIP即可</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/3fd2c04e586fc72ce9df9ac09d6c5d2b.png" alt="image-20230226013109781"></p>
<p>ques函数地址00401520</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/53fcc3b508e43f3b8df9b18b48f099be.png" alt="image-20230226013328290"></p>
<p>修改之后按F9执行就可</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/22986ba5bcf25ac3d16219d9c2bd6a30.png" alt="image-20230226013418305"></p>
<p>HACKIT4FUN</p>
<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="1-神奇的二维码"><a href="#1-神奇的二维码" class="headerlink" title="1.神奇的二维码"></a>1.神奇的二维码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;hex.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> h:</span><br><span class="line">    h = h.read()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./ascii.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> a:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(h), <span class="number">2</span>):</span><br><span class="line">        tmp = <span class="string">&#x27;0x&#x27;</span>+h[i]+h[i+<span class="number">1</span>]</span><br><span class="line">        tmp = <span class="built_in">int</span>(tmp, base=<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">chr</span>(tmp) != <span class="string">&#x27;(&#x27;</span> <span class="keyword">and</span> <span class="built_in">chr</span>(tmp) != <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            a.write(<span class="built_in">chr</span>(tmp))</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x, y = np.loadtxt(<span class="string">&#x27;./ascii.txt&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>, unpack=<span class="literal">True</span>)</span><br><span class="line">plt.plot(x, y,  <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>010打开图片发现很多16进制数据，提取出来转化为字符串就是坐标，再利用坐标画个二维码就可</p>
<p>第二种方法更简单，在linux利用gnuplot插件就能画图</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/cf1eda22ffe32576e96cff640fbb4830.png" alt="image-20230226184450729"></p>
<h3 id="2-re4"><a href="#2-re4" class="headerlink" title="2.re4"></a>2.re4</h3><p>明文爆破压缩包</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/5db0201d0b9c9971100d64f69c9e958a.png" alt="image-20230226191238175"></p>
<p>随后用IDA打开看主函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE *stream; <span class="comment">// ST08_8</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-2Ch]</span></span><br><span class="line">  <span class="type">char</span> ptr[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">40u</span>);</span><br><span class="line">  stream = <span class="built_in">fopen</span>(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="built_in">fread</span>(ptr, <span class="number">1uLL</span>, <span class="number">20uLL</span>, stream);</span><br><span class="line">  <span class="built_in">fclose</span>(stream);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">19</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &amp; <span class="number">1</span> )</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)(ptr[i] &lt;&lt; i));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)(i * ptr[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>没什么加密，顺着逆一下就出了</p>
<p>脚本</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	 <span class="type">int</span> arr[<span class="number">20</span>] = &#123; <span class="number">0</span>, <span class="number">198</span>,<span class="number">232</span>,<span class="number">816</span>,<span class="number">200</span>,<span class="number">1536</span>,<span class="number">300</span>,<span class="number">6144</span>,<span class="number">984</span>,<span class="number">51200</span>,<span class="number">570</span>,<span class="number">92160</span>,<span class="number">1200</span>,<span class="number">565248</span>,<span class="number">756</span>,<span class="number">1474560</span>,<span class="number">800</span>,<span class="number">6291456</span>,<span class="number">1782</span>,<span class="number">65536000</span>&#125;;</span><br><span class="line">	<span class="comment">//a[0]补0保证正常循环</span></span><br><span class="line">	<span class="type">char</span> c;</span><br><span class="line">	<span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">19</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((i &amp; <span class="number">1</span>))</span><br><span class="line">			c = (arr[i] &gt;&gt; i);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			c = (arr[i] / i);</span><br><span class="line">		<span class="built_in">putchar</span>(c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-小狗玩偶"><a href="#3-小狗玩偶" class="headerlink" title="3.小狗玩偶"></a>3.小狗玩偶</h3><p>flag总共两部分，16进制文本里能看到一部分，另一部分在LSB隐写</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/26b95f751f19647737bc484e131a07fd.png" alt="image-20230226185133964"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/95a59a35de4a3338aa59b2d0d15c25db.png" alt="image-20230226185302457"></p>
<h4 id="4-zip"><a href="#4-zip" class="headerlink" title="4.zip"></a>4.zip</h4><p>有密码尝试一下确定不是伪加密，爆破4到7为纯数字成功，打开压缩包是一串编码，16进制解一下就是flag</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/8982f5d79059cc2b18637d5e250508cb.png" alt="image-20230226185650652"></p>
<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="1-web1"><a href="#1-web1" class="headerlink" title="1.web1"></a>1.web1</h3><?PHP 

  show_source(__FILE__);

  ini_set("allow_url_include","on");

  error_reporting(0);

  $file=$_GET['file'];

  $q=$_GET['q'];

  $a = $GET['a'];

  $b = $_GET['b'];

  $c = $_POST['c'];

  $v = $_POST['v'];

  if($q==1 && $q+1 !== 2){ #q==弱比较，不同格式会先转换成同类型再比较，q!+1!==2是强比较必须类型数值完全相同科学计数法绕过即可

​    if($a != $b && md5($a) == md5($b))]]></content>
      <categories>
        <category>周赛</category>
      </categories>
      <tags>
        <tag>周赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>3.26周赛</title>
    <url>/2023/03/28/3-26%E5%91%A8%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="鲜衣怒马少年郎，谁人不识理塘王！"><a href="#鲜衣怒马少年郎，谁人不识理塘王！" class="headerlink" title="鲜衣怒马少年郎，谁人不识理塘王！"></a>鲜衣怒马少年郎，谁人不识理塘王！</h2><p>顶真</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SLsec</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;鍒€涓嶉攱鍒╅┈澶槮&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pass</span>=<span class="string">&#x27;浣犳嬁浠€涔堝拰鍥涚偣鏂�&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$jk</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">a4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;jk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">a6</span>(<span class="params"><span class="variable">$ding</span>,<span class="variable">$zhen</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt; name==<span class="variable">$ding</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;pass==<span class="variable">$zhen</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">a8</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;jk)&#123;<span class="comment">#$jk为真</span></span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;椴滆。鎬掗┈灏戝勾閮庯紝璋佷汉涓嶈瘑鐞嗗鐜嬶紒&quot;</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$name</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$pass</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">a6</span>(<span class="variable">$name</span>,<span class="variable">$pass</span>))&#123;<span class="comment">#赋值判断pass传参与两个GET是否相同</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">a4</span>())&#123;<span class="comment">#赋值</span></span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">a8</span>();&#125;<span class="comment">#调用flag</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Snow leopards are really hard to ride, so it&#x27;s better to exchange money for an Audi&quot;</span>;</span><br><span class="line">    &#125;&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SLsec</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pass</span>=<span class="string">&#x27;aa&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$jk</span>=<span class="literal">true</span>;&#125;</span><br><span class="line">  <span class="variable">$f</span>=<span class="keyword">new</span> <span class="title class_">SLsec</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$f</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://k5hai-1311151548.cos.ap-shanghai.myqcloud.com/https://k5hai-1311151548.cos.ap-shanghai.myqcloud.comimage-20230326200954241.png">https://k5hai-1311151548.cos.ap-shanghai.myqcloud.com/https://k5hai-1311151548.cos.ap-shanghai.myqcloud.comimage-20230326200954241.png</a></p>
<p>play：GET： name&#x3D;a&amp;pass&#x3D;aa</p>
<p>​	     POST:   user&#x3D;O:5:”SLsec”:3:{s:4:”name”;s:1:”a”;s:4:”pass”;s:2:”aa”;s:2:”jk”;b:1;}</p>
<h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="babyrsa"><a href="#babyrsa" class="headerlink" title="babyrsa"></a>babyrsa</h2><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">import gmpy2</span><br><span class="line">p= 174900179045398405758362887050510099953351230680589941223587187096927676318250039003867347118828470850766614025136710989402078055968449696991925901611318398319579226096026113980420314613233522410263933804832601250567540744629955554545762144406833636478599885984277733223077146277644459138695484730091497123653</span><br><span class="line">q= 138394168894464614599095635109542670799766048108401527799025178725205133812543876982783399176166727189388896418668604671443249386259427967695540806910521362186865886429031334061503953791903407614931162328753160467494420213786798800975785789856116685244900988587164035039772328579334638131513694977152566697693</span><br><span class="line">dq= 91144988599155922537286812069488697332186431610461674212452885608698963724568088535192289473758461311143377744214326484716015838529829408451331802003020019755397796512654690339237890864185649014688783869167705450325681146031490758620578699998011937814370759561761662578187180465099739857369029748140120600665</span><br><span class="line">dp= 77086099023854203737282939293131883320148165131282183381041486477787447250448637817213304263658092078129814396693072568608252203284383928126276449456687549559196269981593821846047893367155199274005122723844388469454558713530315183683329104798684553606121087426276184813900290984173218215988206302221537366933</span><br><span class="line">c= 15801371432169186780418480692589791195238785876344412995045613608181370212202255665942402417893437199493695445538341476746293760869621577715385796212569911097161252465453342990879413408685475673255790355354475333896669490479548332300912398201417641777563849663680004298227798906936140992367106039486966585574927214313333872682519241375796031187317957899045859494277570277966275262219924901316942847426675912933662265462110997773928571167535352177539455991039999517915239795197245498033201847388365903662518433723721091041449528248327695253818581438003566115867963542838871840099584964228370817957241460684463142116638</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">I = gmpy2.invert(q,p)</span><br><span class="line">mp = pow(c,dp,p)</span><br><span class="line">mq = pow(c,dq,q)               <span class="comment">#求幂取模运算</span></span><br><span class="line"></span><br><span class="line">m = (((mp-mq)*I)%p)*q+mq       <span class="comment">#求明文公式</span></span><br><span class="line"></span><br><span class="line">print( long_to_bytes(m))         <span class="comment">#转为十六进制</span></span><br></pre></td></tr></table></figure>

<h2 id="base？"><a href="#base？" class="headerlink" title="base？"></a>base？</h2><p>很简单的base64换表解码。<br>首先写个python脚本提取编码表</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">这是提取的编码表：</span><br><span class="line">JKLxNOMyUzVABCDEFGH798PQIacbdefghijklmWXYZ0123456SRTnopqrstuvw+<span class="string">/=</span></span><br></pre></td></tr></table></figure>

<p>然后编写脚本解码：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">import <span class="built_in">base64</span></span><br><span class="line">import <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;9nSTaPCu8MimQoamdXmg9qGRIPsXa8wjIQCmQTIngF==&quot;</span></span><br><span class="line"></span><br><span class="line">string1 = <span class="string">&quot;JKLxNOMyUzVABCDEFGH798PQIacbdefghijklmWXYZ0123456SRTnopqrstuvw+/=&quot;</span></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">base64</span>.b64decode(str1.<span class="built_in">translate</span>(str.maketrans(string1,string2))))</span><br></pre></td></tr></table></figure>

<p>也可以网站解密：<br><img src="https://xmzbk-1310919595.cos.ap-nanjing.myqcloud.com/image-20230326113727063.png" alt="image-20230326113727063"></p>
<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="看不懂的文件"><a href="#看不懂的文件" class="headerlink" title="看不懂的文件"></a>看不懂的文件</h2><p>把文件复制到虚拟机，打开终端执行 cat flag就出flag了</p>
<p>flag:SLsec{!2023_Will_Be_Special,2022_Was_Not!}</p>
<h2 id="里在干什莫？"><a href="#里在干什莫？" class="headerlink" title="里在干什莫？"></a>里在干什莫？</h2><p>16进制文件是反的很容易看出来</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">with <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) as file: <span class="selector-id">#flag</span>.txt里保存的是反着的<span class="number">16</span>进制文本</span><br><span class="line">    re_str = file<span class="selector-class">.read</span>()</span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> re_str:</span><br><span class="line">   tmp += <span class="selector-tag">i</span><span class="selector-class">.strip</span>()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(tmp[::-<span class="number">1</span>])</span></span></span><br><span class="line">#<span class="number">504</span>B0304140000000800F8BE7956F4507576100000000E00000008000000666C61672E747874AB4D2D2E4A2D4B2DAA4E4E2DF6090600504B01021400140000000800F8BE7956F4507576100000000E000000080024000000000000002000000000000000666C61672E7478740A00200000000000010018001F7EE443325FD901FF777E4A325FD901C6D233C4245FD901504B050600000000010001005A000000360000000000</span><br></pre></td></tr></table></figure>

<p>将输出的16进制010重新读取一下就是flag</p>
<h2 id="你知道什么是xor吗？"><a href="#你知道什么是xor吗？" class="headerlink" title="你知道什么是xor吗？"></a>你知道什么是xor吗？</h2><p>这道题是shangu👴赞助的</p>
<p>附件很简单，一个key，一个flag,还有题目的关键描述 ‘xor’</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">key</span> = <span class="string">&#x27;jaks&#123;qwertyui-opas-dfgh-jklz-xcvbnmqwertu&#125;&#x27;</span></span><br><span class="line"><span class="attr">flag</span> = <span class="string">&#x27;óòõëÿ¾»®¿íâë÷ÿñë­îÿ¨ û ÿ¤­¥±ÿ¿ú½®÷öïº®º²¼ÿ&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这道题脑洞很大，所以我就按我的分析来了</p>
<p>首先看key，标准的flag格式，但是前四位被替换成了’jaks’，里面是按照键盘的qwer顺序，最开始分析的是字母在表中的顺序之类的，但是死活凑不出flag就放弃了。</p>
<p>换一条思路，异或具有可逆性，或许’jask‘与’flag‘异或的结果就是我们要找的关键</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312153303362.png" alt="image-20230312153303362"></p>
<p>再看flag这串乱码，先取前四位找一下规律,由于乱码的ascii码值通常是很大的，超出了标准ascii码的范围，我们可以先看一下他的ascii值是多少</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312153728805.png" alt="image-20230312153728805"></p>
<p>还是找不到什么规律，由于xor本质上是二进制比特位之间的操作，我们进一步观察他们的二进制形式</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312154001470.png" alt="image-20230312154001470"></p>
<p>再看’jask‘与’flag‘异或结果的二进制</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312154148276.png" alt="image-20230312154148276"></p>
<p>其实到这里就已经很明显了，</p>
<p>将flag的各位取反再与key异或</p>
<p>脚本</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line"><span class="keyword">key</span> = <span class="string">&#x27;jaks&#123;qwertyui-opas-dfgh-jklz-xcvbnmqwertu&#125;&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;óòõëÿ¾»®¿íâë÷ÿñë­îÿ¨ û ÿ¤­¥±ÿ¿ú½®÷öïº®º²¼ÿ&#x27;</span></span><br><span class="line"><span class="keyword">data </span>= [0xff ^ ord(i) for i <span class="keyword">in</span> flag]</span><br><span class="line">for i <span class="keyword">in</span> <span class="meta">range</span>(le<span class="meta">n</span>(data)):</span><br><span class="line">    pr<span class="meta">int</span>(chr(ord(<span class="keyword">key</span>[i])^data[i]),<span class="keyword">end</span>=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>最后看一下出题人视角</p>
<p>拿到flag &gt; 与随便打出来的key异或 &gt; 将异或结果按位取反 &gt; 给出附件</p>
<h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="re2"><a href="#re2" class="headerlink" title="re2"></a>re2</h2><p>程序是有一个upx壳，壳没有魔改可以直接脱</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230326203037222.png" alt="image-20230326203037222"></p>
<p>首先是通过循环可以看出来12个总共12位，<strong>v4</strong>含有转义字符需要去一下，所以这里为了方便直接用ascii码，加密就是找到v4中字符在__data_strart__ 表中的位置，然后将他的ascii减1（其实可以看出来表中的字符就是倒着的ascii码表）</p>
<p>脚本</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">v4 = <span class="selector-attr">[42,70,39,34,78,44,34,40,73,63,43,64]</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">__data_strart__ = <span class="string">&#x27;~&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(\&#x27;&amp;%$# !&quot;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> v4:</span><br><span class="line">    flag += <span class="built_in">chr</span>(__data_strart__<span class="selector-class">.find</span>(<span class="built_in">chr</span>(i))+<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="贪吃蛇"><a href="#贪吃蛇" class="headerlink" title="贪吃蛇"></a>贪吃蛇</h2><p>贪吃蛇小游戏来自SWPUCTF 2022 新生赛</p>
<p>反编译可以看到一个v18</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230326205454666.png" alt="image-20230326205454666"></p>
<p>这个代码写这里八九不离十可以猜到v18就是分数</p>
<p>ce直接改数值</p>
<p>因为刚开始v18&#x3D;4，就从4开始扫，分数加一慢慢筛选</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230326211220393.png" alt="image-20230326211220393"></p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230326211243449.png" alt="image-20230326211243449"></p>
<p>改下数值直接就能出flag</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230326211341663.png" alt="image-20230326211341663"></p>
]]></content>
      <categories>
        <category>周赛</category>
      </categories>
      <tags>
        <tag>周赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>3.12周赛wp</title>
    <url>/2023/03/12/3-12%E5%91%A8%E8%B5%9Bwp/</url>
    <content><![CDATA[<h1 id="WP-0312"><a href="#WP-0312" class="headerlink" title="WP(0312)"></a>WP(0312)</h1><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="MISC1"><a href="#MISC1" class="headerlink" title="MISC1"></a>MISC1</h3><p>明文攻击+修改图片高度</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312144855304.png" alt="image-20230312144855304"></p>
<p>CRC32相同拖进工具里明文爆破3分钟左右</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312145649291.png" alt="image-20230312145649291"></p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312145804420.png" alt="image-20230312145804420"></p>
<h3 id="MISC2"><a href="#MISC2" class="headerlink" title="MISC2"></a>MISC2</h3><p>题目来自[HGAME 2022 week1]好康的流量</p>
<p>pcapng就用Wireshark打开看一看</p>
<p>搜索字符串png发现可疑流量</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312150642091.png" alt="image-20230312150642091"></p>
<p>继续追踪TCP流</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312150703138.png" alt="image-20230312150703138"></p>
<p>很明显是base64转图片，找个在线网志转一下就OK</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312150738688.png" alt="image-20230312150738688"></p>
<p>转换后的图片没有藏文件，在stegslove里的Green plane2通道发现了条形码</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312151152092.png" alt="image-20230312151152092"></p>
<p>条形码识别拿到第一串flag</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312151342616.png" alt="image-20230312151342616"></p>
<p>第二串flag在LSB中也可以看到，或者用zsteg -a 无脑输出</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312151556915.png" alt="image-20230312151556915"><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312151824219.png" alt="image-20230312151824219"></p>
<h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="CRYPTO1"><a href="#CRYPTO1" class="headerlink" title="CRYPTO1"></a>CRYPTO1</h3><p>签到题，大家都写出来就不写wp了</p>
<h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p><a href="https://zhuanlan.zhihu.com/p/450180396">RSA —— 经典的非对称加密算法 - 知乎 (zhihu.com)</a></p>
<p>解题脚本</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import libnum</span><br><span class="line">p = 141493587653297411370439677105095474506267822697001438051041895587903396514427461466979497141218213971690310610514467813146676842622743398790253412530819749118406134020947115559682593610342763888104969622973887741207742252760222498680896216682602158136788796526168985621624735704961525874105354623989072264981</span><br><span class="line">q = 111441439477838955803597483896717666754532380278114130983843648670032762436607561052410587524915150904926002034830888185361650817789453762849839552420521067076892846499981550153493686351516888441312325540874518004148842425315229417788597821758537506532889890486063082554704330240793974476699063453282978886249</span><br><span class="line">c = 5079028827869590362000738880301174705093432869418229030159524009544135123601838083162186012939657219639413807233474698696910473121742000239640600292625130736396432402798048160699294611561735918851833555240411603368351677461523270039409765030657943566974099009072220652270860050596240753142886589936267208762755667491046856428335946408740914977272214355515294978180415824639164370758420558281118779203031611474436168706576433173184518313609380881414206683447702818891792028867192446462828374301387165986209056247548070890174500701700183255023679504718963526079877860379115328770781897622621806437172112937589750896340</span><br><span class="line">e = 65537</span><br><span class="line">n = p * q</span><br><span class="line">phi = (p - 1) * (q - 1)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = pow(c, d, n)</span><br><span class="line">print(libnum.n2s(int(m)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><p>IDA查看字符串</p>
<h3 id="PYreverse"><a href="#PYreverse" class="headerlink" title="PYreverse"></a>PYreverse</h3><p>python打包的exe，直接ida反汇编不太行</p>
<p><a href="https://zhuanlan.zhihu.com/p/394049570">Pyhon解包及反编译: PyInstaller Extractor+uncompyle6 - 知乎 (zhihu.com)</a></p>
<p>需要的工具文章里写的很详细</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312161228590.png" alt="image-20230312161228590"></p>
<p>我这里是需要补全这个magic head </p>
<p>第一步找到struct和程序同名文件 用010打开</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312161337505.png" alt="image-20230312161337505"></p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312161347466.png" alt="image-20230312161347466"></p>
<p>struct里的这部分原文件里是没有的，将它插入进去改文件后缀位pyc就可</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312161446383.png" alt="image-20230312161446383"></p>
<p>反编译之后异或就是flag</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312162612270.png" alt="image-20230312162612270"></p>
<h3 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h3><p><a href="https://blog.csdn.net/m0_52164435/article/details/124871122?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-124871122-blog-112414254.pc_relevant_3mothn_strategy_and_data_recovery&spm=1001.2101.3001.4242.1&utm_relevant_index=3">ida使用技巧之动态调试_ida动态调试_parafish_0的博客-CSDN博客</a></p>
<p>主函数很简单，看的也很清楚</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/29032258/1678112464671-9b0820c7-07f9-47c2-b12c-0c3ebe0a0c8b.png" alt="image.png"></p>
<p>题目并没有给你现成的地图，需要自己简单的调试一下，在check函数里面定义了迷宫的规则，wsad控制上下左右</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/29032258/1678112500130-4fbf76f3-4dc8-4ef0-98d9-c7049eecd792.png" alt="image.png"></p>
<p>提取地图</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312162215066.png" alt="image-20230312162215066"></p>
<p>CreatMap函数里写的也很清楚是16x16规格的迷宫</p>
<p>提取出来画个图走一遍就好</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">maze = [<span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,</span><br><span class="line"><span class="built_in">    0,</span>   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    0,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    0,</span>   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    0,</span>   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    0,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,</span><br><span class="line"><span class="built_in">    0,</span>   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    0,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    0,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,</span><br><span class="line"><span class="built_in">    0,</span>   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    0,</span>   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>]</span><br><span class="line"><span class="title">for i in range(len(maze)):</span></span><br><span class="line"><span class="title">    if i % 16 == 0:</span></span><br><span class="line">        print()</span><br><span class="line"><span class="title">    else:</span></span><br><span class="line">        print(maze[i],end=&#x27; &#x27;)</span><br><span class="line">import hashlib</span><br><span class="line">m = &#x27;wwdddwwwaaawwwwwwwwwddddssssdddssdsssssssdddwwwwddsssd&#x27;</span><br><span class="line">print()</span><br><span class="line">print(&#x27;SLsec&#123;&#x27;+hashlib.md5(m.encode(encoding=&#x27;UTF-<span class="number">8</span>&#x27;)).hexdigest()+&#x27;&#125;&#x27;)</span><br><span class="line"><span class="meta">#flag = SLsec&#123;a8622109e2fb1296e06d5eed6f78f954&#125;</span></span><br><span class="line"><span class="meta">#maze = wwdddwwwaaawwwwwwwwwddddssssdddssdsssssssdddwwwwddsssd</span></span><br></pre></td></tr></table></figure>

<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$$$$_</span>) &amp;&amp; <span class="variable">$$$$_ </span>== <span class="number">5614</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num </span>= <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>前半部分$$$$_ 就是一个字符传递例如：_&#x3D;a1&amp;a1&#x3D;a2那么a2就是$$_</p>
<p>Playload:_&#x3D;a1&amp;a1&#x3D;a2&amp;a2&#x3D;a3&amp;a3&#x3D;5614</p>
<p>下面一部分 num !&#x3D; 5614 可以使用十六进制绕过但</p>
<p>preg_match(“&#x2F;[a-z]|.&#x2F;i”, $num)又禁用了十六进制前缀中的x所以只能使用八进制来绕过但if(!strpos($num, “0”)){检测头是否为0接着改010574</p>
<p>(intval($num,0)&#x3D;&#x3D;&#x3D;4476)这个就是没别的办法只能寻找特殊字符绕过了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);	</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">256</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="number">1</span>; <span class="variable">$j</span>++) &#123; </span><br><span class="line">		<span class="variable">$a</span>=<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>);</span><br><span class="line">		<span class="variable">$num</span> =<span class="variable">$a</span>.<span class="string">&#x27;010574&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="variable">$num</span>.<span class="string">&#x27;&lt;/br&gt;&#x27;</span>;&#125;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>跑出来就是 字符+可以用  playload:</p>
<p>GET  ?num&#x3D;+010574</p>
<p>POST:  _&#x3D;a1&amp;a1&#x3D;a2&amp;a2&#x3D;a3&amp;a3&#x3D;5614</p>
]]></content>
      <categories>
        <category>周赛</category>
      </categories>
      <tags>
        <tag>周赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>4.22周赛</title>
    <url>/2023/04/22/4-22%E5%91%A8%E8%B5%9B%E3%80%90%E4%B8%8A%E5%8D%88%E5%9C%BA%E3%80%91/</url>
    <content><![CDATA[<h1 id="好玩的时间戳"><a href="#好玩的时间戳" class="headerlink" title="好玩的时间戳"></a>好玩的时间戳</h1><p>时间戳转换网站<a href="https://tool.lu/timestamp/">时间戳(Unix timestamp)转换工具 - 在线工具 (tool.lu)</a></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304221021008.png" alt="image-20230422102059943"></p>
<p><a href="https://blog.csdn.net/u010418732/article/details/125178250?ops_request_misc=%7B%22request_id%22:%22168212901116800213015712%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168212901116800213015712&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-125178250-null-null.142%5Ev86%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=%E5%8C%BF%E4%BA%8E%E6%97%B6%E4%B9%8B%E4%B8%8B&spm=1018.2226.3001.4187">(30条消息) 【CTF-MISC出题思路分享】匿于时之下_ctf misc怎么出题_Tokeii的博客-CSDN博客</a></p>
<p>看了上述文章，大概知道了出题人的思路。</p>
<p>在CSDN搜了一下，对应<a href="https://so.csdn.net/so/search?q=%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CMISC&spm=1001.2101.3001.7020">攻防世界MISC</a>题Time_losing</p>
<p>已知源时间戳为2000000000</p>
<p>定义一下 并且定义一个a来存储最终的flag</p>
<p><strong>oldtime&#x3D;2000000000</strong><br><strong>a&#x3D;””</strong></p>
<p>总共有9个文件 (0~9) 需要每个文件都和源时间戳进行相减</p>
<p>那么就要用到循环</p>
<p>先获取文件的路径</p>
<p>C:\Users\86198\Desktop\flag{0}.txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os,time  <span class="comment">#查找处理文件要调用os库 先用import 导入</span></span><br><span class="line"></span><br><span class="line">oldtime=<span class="number">2000000000</span></span><br><span class="line">a=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">9</span>): <span class="comment">#有0~8个txt文件 就是循环9次</span></span><br><span class="line">   file = <span class="string">r&quot;C:\Users\86198\Desktop\flag\&#123;0&#125;.txt&quot;</span>.<span class="built_in">format</span>(i)<span class="comment">#文件路径</span></span><br><span class="line">   newtime = <span class="built_in">int</span>(os.path.getmtime(file))  <span class="comment">#获取最近修改的时间</span></span><br><span class="line">   s = newtime - oldtime</span><br><span class="line">   a = a+<span class="built_in">chr</span>(s)   <span class="comment">#将差值转为ASCII码</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://blog.csdn.net/qq_39291229/article/details/127803795?spm=1001.2014.3001.5502">(30条消息) python小记–攻防世界Time_losing解题脚本编写_tzyyyyyy的博客-CSDN博客</a></p>
<h1 id="easyCrypto"><a href="#easyCrypto" class="headerlink" title="easyCrypto"></a>easyCrypto</h1><p>base16,32,64挨个解码直接出flag</p>
<p>4B555948513653324B3548444F5653484E425947474D4A5A4F425254434F4C494C415A56553344444E5A57474D595A534E523247475233594E524D444751545A4D495A4749364B5A4B345954533D3D3D</p>
<h1 id="WALN"><a href="#WALN" class="headerlink" title="WALN"></a>WALN</h1><p>文本搜素SLsec</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304221046608.png" alt="image-20230422104649572"></p>
<h1 id="我很快的"><a href="#我很快的" class="headerlink" title="我很快的"></a>我很快的</h1><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304221151404.png" alt="image-20230422115102375"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304221151914.png" alt="image-20230422115121889"></p>
<p>SLsec{w3lcom_t0_Slc7f}</p>
<h1 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h1><p>第一步例行查壳发现无壳且为32bit，直接用ida打开</p>
<p>查找字符串在最下面发现可疑字符串疑似flag</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304221155203.png" alt="image-20230422115542165"></p>
<p>很好我以为得出flag开开心心去输入，结果输入错误，那就看看这个函数的反编译吧</p>
<p>大概就是这个程序要点19999次然后就出flag然后呢我们看那里呢，当然是看sprintf函数咯，看见前面的%d%d，大胆猜测后面跟的19999与0就是%d所代表的，毕竟逆向这玩意三分经验七分蒙，大胆尝试，结果很好正确地</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304221156796.png" alt="91873894178eb97aca09abe164209e6"></p>
<p>BJD{1999902069a45792d233ac}</p>
<p>记得把BJD改成SLsec</p>
]]></content>
      <categories>
        <category>周赛</category>
      </categories>
      <tags>
        <tag>周赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>4.22周赛【下午场】</title>
    <url>/2023/04/22/4-22%E5%91%A8%E8%B5%9B%E3%80%90%E4%B8%8B%E5%8D%88%E5%9C%BA%E3%80%91/</url>
    <content><![CDATA[<h1 id="BabyRE"><a href="#BabyRE" class="headerlink" title="BabyRE"></a>BabyRE</h1><p>见2023西湖论剑——BabyRE</p>
<p>[(30条消息) 2023西湖论剑RE–BabyRE_XiaozaYa的博客-CSDN博客](<a href="https://blog.csdn.net/qq_61670993/article/details/129345972?ops_request_misc=%7B%22request_id%22:%22168214434416800215028269%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=168214434416800215028269&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-129345972-null-null.142%5Ev86%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=DASCTF">https://blog.csdn.net/qq_61670993/article/details/129345972?ops_request_misc=%7B%22request%5Fid%22%3A%22168214434416800215028269%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=168214434416800215028269&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-129345972-null-null.142^v86^control_2,239^v2^insert_chatgpt&amp;utm_term=DASCTF</a> babyre&amp;spm&#x3D;1018.2226.3001.4187)</p>
<h1 id="一根香烟"><a href="#一根香烟" class="headerlink" title="一根香烟"></a>一根香烟</h1><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304221444942.png" alt="73ebc735f0eb5cbedf9220bc3e3fa4d"></p>
<p>通过向该页面POST请求一个名为”heizi”，值为”ding\nzhen”，得到</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304221444829.png" alt="a2476b27c91d9e6bfac6514b0169d4e"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304221445944.png" alt="a1b98671e2520b187a7ea4613ea4184"></p>
<p>再将fffflaaa09g.php输入网址后，解出</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304221445012.png" alt="c4f9080e521723bb4cd864e92966e86"></p>
]]></content>
      <categories>
        <category>周赛</category>
      </categories>
      <tags>
        <tag>周赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>【深入理解计算机系统】CSAPP-实验一：DataLab思路以及代码</title>
    <url>/2023/04/09/%E3%80%90%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E3%80%91CSAPP-%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9ADataLab%E6%80%9D%E8%B7%AF%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="实验说明"><a href="#实验说明" class="headerlink" title="实验说明"></a>实验说明</h2><p>datalab主要是对整型以及<a href="https://so.csdn.net/so/search?q=%E6%B5%AE%E7%82%B9%E5%9E%8B&spm=1001.2101.3001.7020">浮点型</a>的实验，其中对条件语句、算数运算以及逻辑运算限定了不同的规则。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/qq_42234461/article/details/108531976?ops_request_misc=%7B%22request_id%22:%22168101666516800192280526%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=168101666516800192280526&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-108531976-null-null.142">https://blog.csdn.net/qq_42234461/article/details/108531976?ops_request_misc=%7B%22request%5Fid%22%3A%22168101666516800192280526%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=168101666516800192280526&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-108531976-null-null.142</a></p>
<p><a href="https://blog.csdn.net/qq_43855740/article/details/106843924">https://blog.csdn.net/qq_43855740/article/details/106843924</a></p>
<h1 id="itXor"><a href="#itXor" class="headerlink" title="itXor"></a>itXor</h1><p>*bitXor - x^y using only ~ and &amp; </p>
<p>*Example: bitXor(4, 5) &#x3D; 1</p>
<p>*Legal ops: ~ &amp;</p>
<p>*Max ops: 14</p>
<p>*Rating: 1</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>逐渐展开。</p>
<p>x^y &#x3D; ( <del>x&amp;y | x&amp;</del>y )</p>
<p>然后根据 (a|b) &#x3D; (a&amp;~b)把上面的或写成与</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>int bitXor(int x, int y) {</p>
<p>  int lhs &#x3D; ~x &amp; y;<br>  int rhs &#x3D; x &amp; ~y;</p>
<p>  return ~( ~lhs &amp; ~rhs );<br>}</p>
<h1 id="tmin"><a href="#tmin" class="headerlink" title="tmin"></a>tmin</h1><p>*tmin - return minimum two’s complement integer </p>
<p>*Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>
<p>*Max ops: 4</p>
<p>*Rating: 1</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p>int tmin(void) {<br>  return 1&lt;&lt;31;<br>}</p>
<h1 id="isTmax"><a href="#isTmax" class="headerlink" title="isTmax"></a>isTmax</h1><p>*isTmax - returns 1 if x is the maximum, two’s complement number,</p>
<p>*and 0 otherwise </p>
<p>*Legal ops: ! ~ &amp; ^ | +</p>
<p>*Max ops: 10</p>
<p>*Rating: 1</p>
<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>一开始我想通过 异或的方法直接判断输入值是否是目标值。即</p>
<p>int isTmax(int x) {</p>
<p>  int Tmax &#x3D; ~(1&lt;&lt;31);</p>
<p>  return !(x^Tmax);<br>}</p>
<p>然后题目不允许。只能通过别的方式。</p>
<p>可以知道: Tmax + 1 &#x3D; 0x8fffffff，而 2 * 0x8fffffff &#x3D; 0.<br>根据这个性质可以判断。是否有反例？有一个：2 * 0 &#x3D; 0，因此要排除掉这个。</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><p>int isTmax(int x) {</p>
<p>  int x_plus1 &#x3D; x+1; &#x2F;&#x2F;x_plus1得排除是0的情况（即x&#x3D;0xffffffff)<br>  int x_plus1_double &#x3D;x_plus1+x_plus1;</p>
<p>  return !x_plus1_double &amp; ( !!x_plus1 );<br>}</p>
<h1 id="allOddBits"><a href="#allOddBits" class="headerlink" title="allOddBits"></a>allOddBits</h1><p>*allOddBits - return 1 if all odd-numbered bits in word set to 1</p>
<p>*where bits are numbered from 0 (least significant) to 31 (most significant)</p>
<p>*Examples allOddBits(0xFFFFFFFD) &#x3D; 0, allOddBits(0xAAAAAAAA) &#x3D; 1</p>
<p>*Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>
<p>*Max ops: 12</p>
<p>*Rating: 2</p>
<h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>生成一个mask，把输入x的所有奇数位置的值取下来（与）。</p>
<p>然后再比对两个mask与该值是否一致。</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><p>int allOddBits(int x) {<br>  int i &#x3D; 1&lt;&lt;1;<br>  i &#x3D; (i&lt;&lt;2) | i;<br>  i &#x3D; (i&lt;&lt;4) | i;<br>  i &#x3D; (i&lt;&lt;8) | i;<br>  i &#x3D; (i&lt;&lt;16) | i; &#x2F;&#x2F;mask</p>
<p>  return !((x&amp;i)^i);<br>}</p>
<h1 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h1><p>*negate - return -x </p>
<p>*Example: negate(1) &#x3D; -1.</p>
<p>*Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>
<p>*Max ops: 5</p>
<p>*Rating: 2</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><p>int negate(int x) {</p>
<p>  return ~x + 1;<br>}</p>
<h1 id="isAsciiDigit"><a href="#isAsciiDigit" class="headerlink" title="isAsciiDigit"></a>isAsciiDigit</h1><p>*isAsciiDigit - return 1 if 0x30 &lt;&#x3D; x &lt;&#x3D; 0x39 (ASCII codes for characters ‘0’ to ‘9’)</p>
<p>*Example: isAsciiDigit(0x35) &#x3D; 1.</p>
<p>*isAsciiDigit(0x3a) &#x3D; 0.</p>
<p>*isAsciiDigit(0x05) &#x3D; 0.</p>
<p>*Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>
<p>*Max ops: 15</p>
<p>*Rating: 3</p>
<h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>用于Bit的范围判断。只能不断列举。</p>
<p>0x30是0011,0000. 而0x39是0011,1001.</p>
<p>找出这个范围内的Bit规律</p>
<ul>
<li>首先第五第六位Bit必须都是1</li>
<li>如果第四位bit是1,则第一位是0或1都可以，但2和3位要是0</li>
<li>如果第四位bit是0,第一第二第三怎样都可以。</li>
</ul>
<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><p>int isAsciiDigit(int x) {</p>
<pre><code>int mask = ~(0xf);
int bit5_6 = x &amp; mask;
int bit4 = (x&gt;&gt;3) &amp; 1;
int bit3 = (x&gt;&gt;2) &amp; 1;
int bit2 = (x&gt;&gt;1) &amp; 1;
return !(bit5_6^(3&lt;&lt;4)) &amp; ( !bit4|bit4&amp;( !bit2 &amp; !bit3 ) );
</code></pre>
<p>}</p>
<h1 id="conditional"><a href="#conditional" class="headerlink" title="conditional"></a>conditional</h1><p>*conditional - same as x ? y : z </p>
<p>*Example: conditional(2,4,5) &#x3D; 4</p>
<p>*Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>
<p>*Max ops: 16</p>
<p>*Rating: 3</p>
<h2 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h2><p>如何找一个合适的mask作为控制是最难的地方。</p>
<p>从0xffffffff入手是不错的思路</p>
<p>mask &#x3D; 0xffffffff+!x。</p>
<h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><p>int conditional(int x, int y, int z) {</p>
<p>  int mask &#x3D; <del>0 + !x;<br>  return (mask&amp;y ) | (</del>mask &amp; z);<br>}</p>
<h1 id="isLessOrEqual"><a href="#isLessOrEqual" class="headerlink" title="isLessOrEqual"></a>isLessOrEqual</h1><ul>
<li>isLessOrEqual - if x &lt;&#x3D; y then return 1, else return 0</li>
<li>Example: isLessOrEqual(4,5) &#x3D; 1.</li>
<li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li>
<li>Max ops: 24</li>
<li>Rating: 3</li>
</ul>
<h2 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h2><ul>
<li>LESS：相减，判断符号</li>
<li>Equal：异或判断是否相等</li>
</ul>
<p>以为这就结束了吗？</p>
<p>还得判断是否会溢出。</p>
<p>考虑溢出情况：</p>
<ul>
<li>正数 - 负数</li>
<li>负数 - 正数</li>
</ul>
<p>因此，如果是前者，就直接返回true，如果是后者，就直接返回false。</p>
<p>但是bit的写法会比较特殊。看看代码</p>
<h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><p>int isLessOrEqual(int x, int y) {<br>  int sum &#x3D; x + ~y +1;<br>  return<br>  (!(x^y) &#x2F;&#x2F; xy相等<br>  |( sum&gt;&gt;31)&amp;1 &#x2F;&#x2F;x+y为负数<br>  | ((x&gt;&gt;31)&amp;1) &amp; !((y&gt;&gt;31)&amp;1)) &#x2F;&#x2F;x为负数、y为正数<br>  &amp; ! (!((x&gt;&gt;31)&amp;1) &amp; ((y&gt;&gt;31)&amp;1)) ; &#x2F;&#x2F;这里必须是and<br>}</p>
<h1 id="logicalNeg"><a href="#logicalNeg" class="headerlink" title="logicalNeg"></a>logicalNeg</h1><p>*ogicalNeg - implement the ! operator, using all of</p>
<p>*the legal operators except !</p>
<p>*Examples: logicalNeg(3) &#x3D; 0, logicalNeg(0) &#x3D; 1</p>
<p>*Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>
<p>*Max ops: 12</p>
<p>*Rating: 4</p>
<h2 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h2><p>也是一种转化。投影到0和1.</p>
<p>映射关系为：</p>
<ul>
<li>如果x&#x3D;0，则输出1</li>
<li>如果x&#x3D;其他，则输出0</li>
</ul>
<p>因此我们要找出0以及其他的最大不同点，以完成投影。<br>那便是 +0 &#x3D; -0 &#x3D; 0。即 ~x +1 的符号位 &#x3D; x的符号位。</p>
<p>int logicalNeg(int x) {<br>  return   ((<del>(</del>x + 1) &amp; ~x )&gt;&gt;31 &amp; 1); &#x2F;&#x2F;这里之所以要给0和+0都取反，再与，是为了返回需要的1。如果不取反，就会返回成0<br>}</p>
<h1 id="howManyBits"><a href="#howManyBits" class="headerlink" title="howManyBits"></a>howManyBits</h1><p>howManyBits - return the minimum number of bits required to represent x in</p>
<p>*two’s complement</p>
<p>*Examples: howManyBits(12) &#x3D; 5</p>
<p>*howManyBits(298) &#x3D; 10</p>
<p>*howManyBits(-5) &#x3D; 4</p>
<p>*howManyBits(0) &#x3D; 1</p>
<p>*howManyBits(-1) &#x3D; 1</p>
<p>*howManyBits(0x80000000) &#x3D; 32</p>
<p>*Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>
<p>*Max ops: 90</p>
<p>*Rating: 4</p>
<h2 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h2><p>我们把例子都写一下，就知道这个结果是怎么来的。</p>
<ul>
<li>12: 0.1100</li>
<li>298: 01,0010,1010</li>
<li>-5: 1101</li>
<li>0: 0</li>
<li>-1: 1</li>
</ul>
<p>所以：正数的res &#x3D; 1的最高位位置m +1</p>
<p>负数的res &#x3D; 取反后：1的最高位位置m +1</p>
<p>现在问题变成，如何找出最高位</p>
<p>可以人工分治。</p>
<h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><p>int howManyBits(int x) {<br> int b16,b8,b4,b2,b1,b0;<br>    int sign&#x3D;x&gt;&gt;31;<br>    x&#x3D;sign&amp;(<del>x) | (</del>sign)&amp;x;&#x2F;&#x2F;如果x为正则不变，否则按位取反（统一找最高位为1）<br>    b16&#x3D;!!(x&gt;&gt;16)&lt;&lt;4;&#x2F;&#x2F;判断前16位是否有1，并且同时计算了需要移位的位数<br>    x&#x3D;x&gt;&gt;b16;&#x2F;&#x2F;有1就移动16位，否则b16&#x3D;0,不移动<br>    b8&#x3D;!!(x&gt;&gt;8)&lt;&lt;3;<br>    x&#x3D;x&gt;&gt;b8;<br>    b4&#x3D;!!(x&gt;&gt;4)&lt;&lt;2;<br>    x&#x3D;x&gt;&gt;b4;<br>    b2&#x3D;!!(x&gt;&gt;2)&lt;&lt;1;<br>    x&#x3D;x&gt;&gt;b2;<br>    b1&#x3D;!!(x&gt;&gt;1);<br>    x&#x3D;x&gt;&gt;b1;<br>    b0&#x3D;x;<br>  return b16+b8+b4+b2+b1+b0+1;<br>}</p>
<h1 id="floatScale2"><a href="#floatScale2" class="headerlink" title="floatScale2"></a>floatScale2</h1><p>*howManyBits - return the minimum number of bits required to represent x in</p>
<p>*two’s complement</p>
<p>*Examples: howManyBits(12) &#x3D; 5</p>
<p>*howManyBits(298) &#x3D; 10</p>
<p>*howManyBits(-5) &#x3D; 4</p>
<p>*howManyBits(0) &#x3D; 1</p>
<p>*howManyBits(-1) &#x3D; 1</p>
<p>*howManyBits(0x80000000) &#x3D; 32</p>
<p>*Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>
<p>*Max ops: 90</p>
<p>*Rating: 4</p>
<h2 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h2><p>这题很好地考察了规格化数与非规格化数。</p>
<p>以及自己琢磨一下这个例子，这题就会了</p>
<h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><p>unsigned floatScale2(unsigned uf) {<br>  unsigned s &#x3D; uf &amp; 0x80000000;<br>  unsigned exp &#x3D; uf &amp; 0x7f800000;<br>  unsigned frac &#x3D; uf &amp; 0x007fffff;</p>
<p>  if(!exp){ &#x2F;&#x2F; 非规格化数<br>    frac&lt;&lt;&#x3D;1;<br>  }<br>  else if(exp^ 0x7f800000){ &#x2F;&#x2F;规格化数（非规格化数除去NAN)<br>      exp+&#x3D;0x00800000;<br>      &#x2F;&#x2F;相加之后可能变成无穷大，此时要将尾数置0<br>      if(!(exp^0x7f800000)){<br>        frac &#x3D; 0;<br>      }<br>  }</p>
<p>  return s|exp|frac;<br>}</p>
<h1 id="floatFloat2Int"><a href="#floatFloat2Int" class="headerlink" title="floatFloat2Int"></a>floatFloat2Int</h1><p>*for floating point argument f.</p>
<p>*Argument is passed as unsigned int, but</p>
<p>*it is to be interpreted as the bit-level representation of a</p>
<p>*single-precision floating point value.</p>
<p>*Anything out of range (including NaN and infinity) should return</p>
<p>*0x80000000u.</p>
<p>*Legal ops: Any integer&#x2F;unsigned operations incl. ||, &amp;&amp;. also if, while</p>
<p>*Max ops: 30</p>
<p>*Rating: 4</p>
<h2 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h2><p>这里关键是理解unsigned表示的flaot以及转成int的过程的移位区别。</p>
<p>如果uf什么都不动，变成int的时候就已经是默认小数点右移动（变大）23了。</p>
<h2 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h2><p>int floatFloat2Int(unsigned uf) { &#x2F;&#x2F;吊</p>
<p>  int tmin&#x3D;0x1&lt;&lt;31;&#x2F;&#x2F;溢出需返回的值<br>    int sign&#x3D;uf&gt;&gt;31;&#x2F;&#x2F;取符号<br>    int frac&#x3D;uf&amp;0x007fffff;&#x2F;&#x2F;取尾数<br>    int E&#x3D;((uf&gt;&gt;23)&amp;0xff)-127;&#x2F;&#x2F;取指数  Exp-偏置（ 2^7 -1）&#x3D;127<br>    if(E&lt;0) return 0; &#x2F;&#x2F;如果指数小于0，相当于尾数小数点左移，必定为小数，舍入为0<br>  int M;<br>     M &#x3D; frac|(0x1&lt;&lt;23);&#x2F;&#x2F;能到这里的都是规格化数，补充隐藏位1.</p>
<pre><code>if(E&gt;31) return tmin;//如果指数大于31,相当于尾数小数点右移31，溢出
if(E&gt;23) M=M&lt;&lt;(E-23);//如果指数&gt;23,小数点左移E-23
else M=M&gt;&gt;(23-E);	//否则右移23-e

if(!( (M&gt;&gt;31) ^sign)) return M;//如果移动完成的尾数M符号位与sign相同，无需转换，直接返回M
else if(M&gt;&gt;31) return tmin;//如果不同，且M为负数，则无法表示(需更多位)，返回溢出
else return ~M+1;	//如果不同，且M为正数，返回其相反数
</code></pre>
<p>}</p>
<h1 id="floatPower2"><a href="#floatPower2" class="headerlink" title="floatPower2"></a>floatPower2</h1><p>*floatPower2 - Return bit-level equivalent of the expression 2.0^x</p>
<p>*(2.0 raised to the power x) for any 32-bit integer x.</p>
<p>*The unsigned value that is returned should have the identical bit</p>
<p>*representation as the single-precision floating-point number 2.0^x.</p>
<p>*If the result is too small to be represented as a denorm非规格化数, return</p>
<p>*0.If too large, return +INF无穷大.</p>
<ul>
<li></li>
</ul>
<p>*Legal ops: Any integer&#x2F;unsigned operations incl. ||, &amp;&amp;. Also if, while</p>
<p>*Max ops: 30</p>
<p>*Rating: 4</p>
<h2 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h2><p>这题很简单。</p>
<p>只需要根据 E &#x3D; e - bias反推e就好了。</p>
<h2 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h2><p>unsigned floatPower2(int x) {</p>
<pre><code>int inf=0x7f800000;
if(x&lt;-126) return 0;
if(x&gt;127) return inf;
</code></pre>
<p>  int e &#x3D; x+127;<br>    return e&lt;&lt;23;<br>}</p>
]]></content>
      <categories>
        <category>实验</category>
      </categories>
      <tags>
        <tag>实验</tag>
      </tags>
  </entry>
  <entry>
    <title>4.22周赛总wp</title>
    <url>/2023/04/23/4-22%E5%91%A8%E8%B5%9B%E6%80%BBwp/</url>
    <content><![CDATA[<h1 id="一根香烟"><a href="#一根香烟" class="headerlink" title="一根香烟"></a>一根香烟</h1><p><a href="http://211.69.16.145:7901/">http://211.69.16.145:7901/</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;heizi&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$a</span>,<span class="number">0</span>,<span class="number">4</span>) == <span class="string">&quot;ding&quot;</span> <span class="keyword">and</span> <span class="title function_ invoke__">substr</span>(<span class="variable">$a</span>,-<span class="number">4</span>,<span class="number">4</span>) == <span class="string">&quot;zhen&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$a</span> == <span class="string">&quot;dingzhen&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>( <span class="string">&quot;Hack!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ding.+?zhen/is&#x27;</span>,<span class="variable">$a</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Hack!!!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;????&quot;</span>);</span><br><span class="line">    &#125;&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>考点：preg_match绕过</p>
<p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">PHP利用PCRE回溯次数限制绕过某些安全限制 | 离别歌 (leavesongs.com)</a></p>
<p>play： POST heizi&#x3D;ding(a*1000000)zhen</p>
<p>SLsec{coossssadagaLLLLLLLL!}</p>
<h2 id="学姐的凝视"><a href="#学姐的凝视" class="headerlink" title="学姐的凝视"></a>学姐的凝视</h2><h2 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h2><p>这道题是西湖论剑2022的原题，网上有大把的wp</p>
<h2 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h2><p>这道题本意是想出难一点的，但由于自身实力不够，不知道写了个什么鸟东西</p>
<p>直接看伪代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input your flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) == <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">      v4[i] = Str[i];</span><br><span class="line">    v4[<span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fun1</span>(v4, <span class="number">8</span>i64, Str1);</span><br><span class="line">    Str2 = <span class="string">&quot;f7fae20f2f0b7facff1281fdd1e8fdf6d14cd4c1&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(Str1, <span class="string">&quot;f7fae20f2f0b7facff1281fdd1e8fdf6d14cd4c1&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">8</span>; ++j )</span><br><span class="line">        v8[j] = Str[j + <span class="number">8</span>];</span><br><span class="line">      v8[<span class="number">9</span>] = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">fun2</span>(v8, v7);</span><br><span class="line">      v13 = <span class="string">&quot;JBUWED&#123;WK&quot;</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v7, <span class="string">&quot;JBUWED&#123;WK&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">15</span>; ++k )</span><br><span class="line">          v5[k] = Str[k + <span class="number">17</span>];</span><br><span class="line">        v12 = (<span class="type">char</span> *)<span class="built_in">fun3</span>(v5, <span class="number">15</span>);</span><br><span class="line">        v11 = <span class="string">&quot;WPrYVgNoQx6vTPNuU8e!&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v12, <span class="string">&quot;WPrYVgNoQx6vTPNuU8e!&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;you are so good!&quot;</span>);</span><br><span class="line">          <span class="built_in">free</span>(v12);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;wrong3!&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;wrong2!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;wrong1!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先就看到flag总共是32位，其中前八位进行了如下加密在fun1里加密</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">  <span class="attribute">v4</span>[i] = Str[i];</span><br><span class="line"><span class="attribute">v4</span>[<span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="attribute">fun1</span>(v4, <span class="number">8</span>i64, Str1);</span><br></pre></td></tr></table></figure>

<p>fun1点进去根据特征值可以判断打出来是sha1加密</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230422141131051.png" alt="image-20230422141131051"></p>
<p>我们知道flag的格式是SLsec{xxxxx}，总共八位，已知6位，所以可以爆破出来前八位</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">known_prefix = <span class="string">&quot;SLsec&#123;&quot;</span></span><br><span class="line">known_hash = <span class="string">&quot;f7fae20f2f0b7facff1281fdd1e8fdf6d14cd4c1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 枚举后两位字符</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        candidate = known_prefix + chr(i) + chr(j)</span><br><span class="line">        candidate_hash = hashlib.sha1(candidate.encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> candidate_hash == known_hash:</span><br><span class="line">            print(<span class="string">&quot;Found the original string: &quot;</span>, candidate)</span><br><span class="line">            <span class="keyword">exit</span>()</span><br></pre></td></tr></table></figure>

<p>接着往下看</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">8</span>; ++j )</span><br><span class="line">        <span class="attribute">v8</span>[j] = Str[j + <span class="number">8</span>];</span><br><span class="line">      <span class="attribute">v8</span>[<span class="number">9</span>] = <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">fun2</span>(v8, v7);</span><br><span class="line">      <span class="attribute">v13</span> = <span class="string">&quot;JBUWED&#123;WK&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>在fun2里加密了flag的第9位到第17位，而且fun2函数也仅仅是一个异或</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">v3 = strlen(<span class="built_in">a1</span>);</span><br><span class="line"> for ( i = <span class="number">0</span>i64<span class="comment">; i &lt; v3; ++i )</span></span><br><span class="line">   <span class="built_in">a2</span>[i] = (<span class="built_in">a1</span>[i] ^ <span class="number">0x66</span>) + <span class="number">66</span>;</span><br></pre></td></tr></table></figure>

<p>解密</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">for</span> <span class="variable">i</span> <span class="variable"><span class="keyword">in</span></span> <span class="variable">str2</span>:</span><br><span class="line">    <span class="variable">flag</span> += <span class="function"><span class="title">chr</span>(<span class="number">0</span><span class="variable">x66</span>^(<span class="title"><span class="built_in">ord</span></span>(<span class="variable">i</span>)-<span class="number">66</span>))</span></span><br></pre></td></tr></table></figure>

<p>接着最后15进行了fun3加密</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">15</span>; ++k )</span><br><span class="line">  v5[k] = Str[k + <span class="number">17</span>];</span><br><span class="line">v12 = (<span class="type">char</span> *)<span class="built_in">fun3</span>(v5, <span class="number">15</span>);</span><br><span class="line">v11 = <span class="string">&quot;WPrYVgNoQx6vTPNuU8e!&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v12, <span class="string">&quot;WPrYVgNoQx6vTPNuU8e!&quot;</span>) )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;you are so good!&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(v12);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>fun3是一个换表的base64，python也就两行代码的事</p>
<p>最后完整exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="comment"># 已知信息</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">known_prefix = <span class="string">&quot;SLsec&#123;&quot;</span></span><br><span class="line">known_hash = <span class="string">&quot;f7fae20f2f0b7facff1281fdd1e8fdf6d14cd4c1&quot;</span></span><br><span class="line"><span class="comment"># 枚举后两位字符</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        candidate = known_prefix + <span class="built_in">chr</span>(i) + <span class="built_in">chr</span>(j)</span><br><span class="line">        candidate_hash = hashlib.sha1(candidate.encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> candidate_hash == known_hash:</span><br><span class="line">            <span class="built_in">print</span>(candidate,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">str2 = <span class="string">&#x27;JBUWED&#123;WK&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str2:</span><br><span class="line">     <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x66</span>^(<span class="built_in">ord</span>(i)-<span class="number">66</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">str1 = <span class="string">&quot;WPrYVgNoQx6vTPNuU8e!&quot;</span></span><br><span class="line">string1 = <span class="string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz+/@!#$&quot;</span></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (base64.b64decode(str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))))</span><br><span class="line"></span><br><span class="line"><span class="comment">#SLsec&#123;confused_soul_run_quietly&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="学姐的凝视-1"><a href="#学姐的凝视-1" class="headerlink" title="学姐的凝视"></a>学姐的凝视</h2><p> <a href="http://211.69.16.145:3333/">http://211.69.16.145:3333/</a></p>
<p>猜测账号为QQ号（也可以采用集束炸弹进行爆破）</p>
<p>弱口令爆破即可</p>
<p>进入下载图片二进制打开最下面有base64解密即可。</p>
<p><img src="https://k5hai-1311151548.cos.ap-shanghai.myqcloud.com/https://k5hai-1311151548.cos.ap-shanghai.myqcloud.comimage-20230421174943823.png#id=lXwW9&originHeight=427&originWidth=648&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p><a href="http://211.69.16.145:3322/">http://211.69.16.145:3322</a><br>在他界面跳转之前抓包，发包即可</p>
<h2 id="easyCrypto"><a href="#easyCrypto" class="headerlink" title="easyCrypto"></a>easyCrypto</h2><p>签到题，看给的python代码，是base加密，分别是16，32，64</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">import base64</span><br><span class="line"></span><br><span class="line">s = &#x27;4B<span class="number">55594851365332</span>4B<span class="number">354844</span>4F<span class="number">565348</span>4E<span class="number">42594747</span>4D4A5A4F<span class="number">42525443</span>4F4C494C415A<span class="number">5655334444</span>4E5A<span class="number">5747</span>4D595A534E<span class="number">52324747523359</span>4E524D<span class="number">44475154</span>5A4D495A<span class="number">474936</span>4B5A4B<span class="number">34595453</span>3D3D3D&#x27;</span><br><span class="line"></span><br><span class="line">print(base64.b64decode(base64.b32decode(base64.b16decode(s))))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="你会解方程组不会？"><a href="#你会解方程组不会？" class="headerlink" title="你会解方程组不会？"></a>你会解方程组不会？</h2><p><img src="https://xmzbk-1310919595.cos.ap-nanjing.myqcloud.com/image-20230422001942638.png" alt="image-20230422001942638"></p>
<p>主函数，for循环是对输入的字符出进行异或加密，然后看v1，是一个if函数，函数里面是一堆方程组，我写代码的时候，可能环境问题，导致这个反编译显示代码格式不是很正常，但是不影响写脚本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">v2 = Int(<span class="string">&#x27;a2&#x27;</span>)</span><br><span class="line">v3 = Int(<span class="string">&#x27;a3&#x27;</span>)</span><br><span class="line">v4 = Int(<span class="string">&#x27;a4&#x27;</span>)</span><br><span class="line">v5 = Int(<span class="string">&#x27;a5&#x27;</span>)</span><br><span class="line">v6 = Int(<span class="string">&#x27;a6&#x27;</span>)</span><br><span class="line">v7 = Int(<span class="string">&#x27;a7&#x27;</span>)</span><br><span class="line">v8 = Int(<span class="string">&#x27;a8&#x27;</span>)</span><br><span class="line">v9 = Int(<span class="string">&#x27;a9&#x27;</span>)</span><br><span class="line">v10 = Int(<span class="string">&#x27;a10&#x27;</span>)</span><br><span class="line">v11 = Int(<span class="string">&#x27;a11&#x27;</span>)</span><br><span class="line">v12 = Int(<span class="string">&#x27;a12&#x27;</span>)</span><br><span class="line">v13 = Int(<span class="string">&#x27;a13&#x27;</span>)</span><br><span class="line">v14 = Int(<span class="string">&#x27;a14&#x27;</span>)</span><br><span class="line">v15 = Int(<span class="string">&#x27;a15&#x27;</span>)</span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(<span class="number">15</span> * v11</span><br><span class="line">     + -<span class="number">36</span> * v10</span><br><span class="line">     + <span class="number">13</span> * v9</span><br><span class="line">     + <span class="number">25</span> * v8</span><br><span class="line">     + <span class="number">43</span> * v6</span><br><span class="line">     + <span class="number">65</span> * v4</span><br><span class="line">     + <span class="number">88</span> * v2</span><br><span class="line">     + <span class="number">67</span> * v3</span><br><span class="line">     - <span class="number">5</span> * v5</span><br><span class="line">     + <span class="number">89</span> * v7</span><br><span class="line">     + <span class="number">11</span> * v12</span><br><span class="line">     + <span class="number">47</span> * v13</span><br><span class="line">     - <span class="number">60</span> * v14</span><br><span class="line">     + <span class="number">29</span> * v15 == <span class="number">22748</span>,</span><br><span class="line">     -<span class="number">41</span> * v13</span><br><span class="line">     + <span class="number">2</span> * v12</span><br><span class="line">     + <span class="number">8</span> * v11</span><br><span class="line">     + <span class="number">7</span> * v3</span><br><span class="line">     + <span class="number">89</span> * v2</span><br><span class="line">     + <span class="number">12</span> * v4</span><br><span class="line">     - <span class="number">25</span> * v5</span><br><span class="line">     + <span class="number">41</span> * v6</span><br><span class="line">     + <span class="number">23</span> * v7</span><br><span class="line">     + <span class="number">20</span> * v8</span><br><span class="line">     - <span class="number">66</span> * v9</span><br><span class="line">     + <span class="number">31</span> * v10</span><br><span class="line">     - <span class="number">39</span> * v14</span><br><span class="line">     + <span class="number">17</span> * v15 == <span class="number">7258</span>,</span><br><span class="line">     -<span class="number">34</span> * v14</span><br><span class="line">     + <span class="number">90</span> * v13</span><br><span class="line">     + <span class="number">101</span> * v12</span><br><span class="line">     + -<span class="number">33</span> * v10</span><br><span class="line">     + <span class="number">15</span> * v9</span><br><span class="line">     + <span class="number">27</span> * v8</span><br><span class="line">     + <span class="number">53</span> * v6</span><br><span class="line">     + <span class="number">35</span> * v3</span><br><span class="line">     + <span class="number">28</span> * v2</span><br><span class="line">     + <span class="number">16</span> * v4</span><br><span class="line">     - <span class="number">65</span> * v5</span><br><span class="line">     + <span class="number">39</span> * v7</span><br><span class="line">     + <span class="number">13</span> * v11</span><br><span class="line">     + <span class="number">23</span> * v15 == <span class="number">26190</span>,</span><br><span class="line">     (v9 * <span class="number">128</span>)</span><br><span class="line">     + <span class="number">81</span> * v7</span><br><span class="line">     + -<span class="number">59</span> * v5</span><br><span class="line">     + <span class="number">35</span> * v4</span><br><span class="line">     + <span class="number">34</span> * v3</span><br><span class="line">     + <span class="number">23</span> * v2</span><br><span class="line">     + <span class="number">49</span> * v6</span><br><span class="line">     + <span class="number">25</span> * v8</span><br><span class="line">     - <span class="number">32</span> * v10</span><br><span class="line">     + <span class="number">75</span> * v11</span><br><span class="line">     + <span class="number">81</span> * v12</span><br><span class="line">     + <span class="number">47</span> * v13</span><br><span class="line">     - <span class="number">60</span> * v14</span><br><span class="line">     + <span class="number">29</span> * v15 == <span class="number">37136</span>,</span><br><span class="line">     <span class="number">90</span> * v8</span><br><span class="line">     + <span class="number">79</span> * v7</span><br><span class="line">     + <span class="number">42</span> * v6</span><br><span class="line">     + -<span class="number">52</span> * v5</span><br><span class="line">     + <span class="number">35</span> * v4</span><br><span class="line">     + <span class="number">97</span> * v3</span><br><span class="line">     + <span class="number">38</span> * v2</span><br><span class="line">     + <span class="number">23</span> * v9</span><br><span class="line">     - <span class="number">36</span> * v10</span><br><span class="line">     + <span class="number">57</span> * v11</span><br><span class="line">     + <span class="number">81</span> * v12</span><br><span class="line">     + <span class="number">42</span> * v13</span><br><span class="line">     - <span class="number">62</span> * v14</span><br><span class="line">     - <span class="number">11</span> * v15 == <span class="number">27915</span>,</span><br><span class="line">     -<span class="number">61</span> * v14</span><br><span class="line">     + <span class="number">41</span> * v12</span><br><span class="line">     + -<span class="number">26</span> * v10</span><br><span class="line">     + <span class="number">49</span> * v7</span><br><span class="line">     + <span class="number">47</span> * v6</span><br><span class="line">     + -<span class="number">45</span> * v5</span><br><span class="line">     + <span class="number">35</span> * v4</span><br><span class="line">     + <span class="number">22</span> * v2</span><br><span class="line">     + <span class="number">27</span> * v3</span><br><span class="line">     + <span class="number">29</span> * v8</span><br><span class="line">     + <span class="number">18</span> * v9</span><br><span class="line">     + <span class="number">35</span> * v11</span><br><span class="line">     + <span class="number">40</span> * v13</span><br><span class="line">     + <span class="number">28</span> * v15 == <span class="number">17298</span>,</span><br><span class="line">     <span class="number">43</span> * v13</span><br><span class="line">     + <span class="number">76</span> * v12</span><br><span class="line">     + <span class="number">34</span> * v11</span><br><span class="line">     + -<span class="number">47</span> * v10</span><br><span class="line">     + <span class="number">85</span> * v9</span><br><span class="line">     + <span class="number">23</span> * v8</span><br><span class="line">     + <span class="number">86</span> * v7</span><br><span class="line">     + -<span class="number">42</span> * v6</span><br><span class="line">     + <span class="number">45</span> * v3</span><br><span class="line">     + <span class="number">12</span> * v2</span><br><span class="line">     + <span class="number">35</span> * v4</span><br><span class="line">     - <span class="number">9</span> * v5</span><br><span class="line">     - <span class="number">44</span> * v14</span><br><span class="line">     + <span class="number">65</span> * v15 == <span class="number">19875</span>,</span><br><span class="line">     <span class="number">57</span> * v13</span><br><span class="line">     + <span class="number">25</span> * v11</span><br><span class="line">     + -<span class="number">30</span> * v10</span><br><span class="line">     + <span class="number">86</span> * v8</span><br><span class="line">     + <span class="number">79</span> * v7</span><br><span class="line">     + <span class="number">35</span> * v4</span><br><span class="line">     + <span class="number">62</span> * v3</span><br><span class="line">     + <span class="number">79</span> * v2</span><br><span class="line">     - <span class="number">85</span> * v5</span><br><span class="line">     + <span class="number">33</span> * v6</span><br><span class="line">     + <span class="number">14</span> * v9</span><br><span class="line">     + <span class="number">11</span> * v12</span><br><span class="line">     - <span class="number">50</span> * v14</span><br><span class="line">     - <span class="number">9</span> * v15 == <span class="number">22784</span>,</span><br><span class="line">     <span class="number">47</span> * v13</span><br><span class="line">     + <span class="number">2</span> * v12</span><br><span class="line">     + -<span class="number">36</span> * v10</span><br><span class="line">     + <span class="number">2</span> * v8</span><br><span class="line">     + <span class="number">29</span> * v7</span><br><span class="line">     + (v4 * <span class="number">64</span>)</span><br><span class="line">     + <span class="number">8</span> * v2</span><br><span class="line">     + <span class="number">6</span> * v3</span><br><span class="line">     - <span class="number">85</span> * v5</span><br><span class="line">     + <span class="number">73</span> * v6</span><br><span class="line">     + <span class="number">23</span> * v9</span><br><span class="line">     + <span class="number">5</span> * v11</span><br><span class="line">     - (v14 * <span class="number">64</span>)</span><br><span class="line">     + <span class="number">27</span> * v15 == <span class="number">9710</span>,</span><br><span class="line">     <span class="number">41</span> * v12</span><br><span class="line">     + -<span class="number">38</span> * v10</span><br><span class="line">     + -<span class="number">51</span> * v5</span><br><span class="line">     + <span class="number">68</span> * v4</span><br><span class="line">     + -<span class="number">68</span> * v3</span><br><span class="line">     + <span class="number">67</span> * v2</span><br><span class="line">     - <span class="number">43</span> * v6</span><br><span class="line">     + <span class="number">81</span> * v7</span><br><span class="line">     + <span class="number">22</span> * v8</span><br><span class="line">     - <span class="number">12</span> * v9</span><br><span class="line">     + <span class="number">75</span> * v11</span><br><span class="line">     + <span class="number">27</span> * v13</span><br><span class="line">     - <span class="number">52</span> * v14</span><br><span class="line">     + <span class="number">31</span> * v15 == <span class="number">13376</span>,</span><br><span class="line">    -<span class="number">67</span> * v14</span><br><span class="line">     + <span class="number">31</span> * v12</span><br><span class="line">     + <span class="number">15</span> * v9</span><br><span class="line">     + -<span class="number">51</span> * v5</span><br><span class="line">     + <span class="number">63</span> * v3</span><br><span class="line">     + <span class="number">85</span> * v2</span><br><span class="line">     + <span class="number">5</span> * v4</span><br><span class="line">     + <span class="number">44</span> * v6</span><br><span class="line">     + <span class="number">36</span> * v7</span><br><span class="line">     + <span class="number">28</span> * v8</span><br><span class="line">     - <span class="number">6</span> * v10</span><br><span class="line">     + <span class="number">45</span> * v11</span><br><span class="line">     + <span class="number">7</span> * v13</span><br><span class="line">     + <span class="number">78</span> * v15 == <span class="number">24065</span>,</span><br><span class="line">     <span class="number">43</span> * v13</span><br><span class="line">     + -<span class="number">35</span> * v10</span><br><span class="line">     + <span class="number">25</span> * v8</span><br><span class="line">     + <span class="number">43</span> * v6</span><br><span class="line">     + <span class="number">47</span> * v2</span><br><span class="line">     + (v3 * <span class="number">64</span>)</span><br><span class="line">     + <span class="number">66</span> * v4</span><br><span class="line">     - <span class="number">5</span> * v5</span><br><span class="line">     + <span class="number">112</span> * v7</span><br><span class="line">     + <span class="number">13</span> * v9</span><br><span class="line">     + <span class="number">95</span> * v11</span><br><span class="line">     + <span class="number">21</span> * v12</span><br><span class="line">     - <span class="number">61</span> * v14</span><br><span class="line">     + <span class="number">20</span> * v15 == <span class="number">27687</span>,</span><br><span class="line">      -<span class="number">61</span> * v14</span><br><span class="line">     + <span class="number">47</span> * v13</span><br><span class="line">     + <span class="number">89</span> * v12</span><br><span class="line">     + <span class="number">14</span> * v11</span><br><span class="line">     + -<span class="number">92</span> * v10</span><br><span class="line">     + <span class="number">56</span> * v9</span><br><span class="line">     + <span class="number">23</span> * v8</span><br><span class="line">     + <span class="number">89</span> * v7</span><br><span class="line">     + <span class="number">49</span> * v6</span><br><span class="line">     + -<span class="number">25</span> * v5</span><br><span class="line">     + <span class="number">85</span> * v4</span><br><span class="line">     + <span class="number">67</span> * v3</span><br><span class="line">     + <span class="number">89</span> * v2</span><br><span class="line">     - <span class="number">29</span> * v15 == <span class="number">29250</span>,</span><br><span class="line">    -<span class="number">60</span> * v14</span><br><span class="line">     + <span class="number">51</span> * v12</span><br><span class="line">     + <span class="number">16</span> * v11</span><br><span class="line">     + <span class="number">12</span> * v9</span><br><span class="line">     + <span class="number">25</span> * v8</span><br><span class="line">     + -<span class="number">43</span> * v6</span><br><span class="line">     + <span class="number">34</span> * v3</span><br><span class="line">     + <span class="number">95</span> * v2</span><br><span class="line">     + <span class="number">62</span> * v4</span><br><span class="line">     - <span class="number">9</span> * v5</span><br><span class="line">     + <span class="number">83</span> * v7</span><br><span class="line">     - <span class="number">36</span> * v10</span><br><span class="line">     + <span class="number">47</span> * v13</span><br><span class="line">     - <span class="number">24</span> * v15 == <span class="number">15317</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;un&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(s.check()):</span><br><span class="line">    <span class="built_in">print</span>(s.model())   <span class="comment">#输出解</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">direct =&#123;       <span class="comment">#这点是方程组解密得到的，顺序已经替换过来了</span></span><br><span class="line">     <span class="number">13</span> : <span class="number">74</span>,</span><br><span class="line">     <span class="number">3</span> : <span class="number">24</span>,</span><br><span class="line">     <span class="number">4</span> : <span class="number">119</span>,</span><br><span class="line">     <span class="number">10</span> : <span class="number">108</span>,</span><br><span class="line">     <span class="number">12</span> : <span class="number">88</span>,</span><br><span class="line">     <span class="number">7</span> : <span class="number">43</span>,</span><br><span class="line">     <span class="number">14</span> : <span class="number">88</span>,</span><br><span class="line">     <span class="number">9</span> : <span class="number">91</span>,</span><br><span class="line">     <span class="number">6</span> : <span class="number">104</span>,</span><br><span class="line">     <span class="number">5</span> : <span class="number">7</span>,</span><br><span class="line">     <span class="number">8</span> : <span class="number">28</span>,</span><br><span class="line">     <span class="number">15</span> : <span class="number">33</span>,</span><br><span class="line">     <span class="number">2</span> : <span class="number">10</span>,</span><br><span class="line">     <span class="number">11</span> : <span class="number">52</span>&#125;</span><br><span class="line">flag = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> direct:</span><br><span class="line">    flag[i-<span class="number">2</span>] = direct[i]  <span class="comment">#顺序调整</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    flag[i] ^= flag[i + <span class="number">1</span>]   <span class="comment">#异或解密</span></span><br><span class="line">flag_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>):</span><br><span class="line">     flag_str += <span class="built_in">chr</span>(flag[i])</span><br><span class="line"><span class="built_in">print</span>(flag_str)</span><br></pre></td></tr></table></figure>

<p>主要思路是用z3模块解方程组，z3怎么搞，网上搜，写脚本需要注意的是有的变量顺序替换了，还有就是伪代码的方程组直接复制过来改一下格式就能用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v2 = a1[<span class="number">2</span>];</span><br><span class="line">v3 = a1[<span class="number">1</span>];</span><br><span class="line">v4 = *a1;</span><br><span class="line">v5 = a1[<span class="number">3</span>];</span><br><span class="line">v6 = a1[<span class="number">4</span>];</span><br><span class="line">v7 = a1[<span class="number">5</span>];</span><br><span class="line">v8 = a1[<span class="number">6</span>];</span><br><span class="line">v9 = a1[<span class="number">7</span>];</span><br><span class="line">v10 = a1[<span class="number">9</span>];</span><br><span class="line">v11 = a1[<span class="number">8</span>];</span><br><span class="line">v12 = a1[<span class="number">10</span>];</span><br><span class="line">v13 = a1[<span class="number">11</span>];</span><br><span class="line">v14 = a1[<span class="number">12</span>];</span><br><span class="line">v15 = a1[<span class="number">13</span>];</span><br></pre></td></tr></table></figure>

<p>a1[0]和a1[2]替换了，a1[8]和a1[9]替换了，记得解完方程组，替换过来，再进行异或解密。</p>
<p>然后反编译的时候可能会出现(v9 &lt;&lt; 7)这种情况，替换成v9 * 128，如果是(v9 &lt;&lt; 6)，就替换成v9 * 64.</p>
<h2 id="ikun计算器"><a href="#ikun计算器" class="headerlink" title="ikun计算器"></a>ikun计算器</h2><p>题目类型：安卓逆向+tea算法  </p>
<p>解题思路：用jdax进行反编译后，搜索关键词找到关键代码</p>
<p>找到v和key进行解密</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/%E5%9B%BE%E7%89%871.png" alt="图片1"></p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/%E5%9B%BE%E7%89%872.png" alt="图片2"></p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/%E5%9B%BE%E7%89%873.png" alt="图片3"></p>
<p>解出十进制转为十六进制，然后在cyberchef用from hex得出flag</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/%E5%9B%BE%E7%89%874.png" alt="图片4"></p>
<p>Flag：SLsec{u_2re_g00d11y}</p>
<h2 id="easyre1"><a href="#easyre1" class="headerlink" title="easyre1"></a>easyre1</h2><p>用ida32位打开附件，shift+f12查找字符串</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/wps1.jpg" alt="img"> </p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/wps2.jpg" alt="img"> </p>
<p>点进dialogfunc看一下</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/wps3.jpg" alt="img"> </p>
<p>这里应该是点击19999次会出flag，当然现在已经很明显的看到flag就是</p>
<p>BJD</p>
]]></content>
      <categories>
        <category>周赛</category>
      </categories>
      <tags>
        <tag>周赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题笔记：REVERSE</title>
    <url>/2023/04/12/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%9AREVERSE/</url>
    <content><![CDATA[<h1 id="reverse2"><a href="#reverse2" class="headerlink" title="reverse2"></a>reverse2</h1><p>拖入IDA64位</p>
<p>空格，SHIFT+F12</p>
<p>找到flag的一半，如图</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172223353.png" alt="image-20230417222352316"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172223751.png" alt="image-20230417222346707"></p>
<p>先把105 114 49转成字符（选中按R即可）</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172223254.png" alt="image-20230417222341232"></p>
<p>可以发现，输入的v2要和&amp;flag做比较，而双击&amp;flag发现内容就是之前的hacking_for_fun}<br>再分析循环，会将flag中的i和r替换成1，使用最后得到flag</p>
<p>flag{hack1ng_fo1_fun}</p>
<h1 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h1><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172223636.png" alt="image-20230417222329604"></p>
<p>第7行：输入flag</p>
<p>第9行：输入的flag长度要为33</p>
<p>第11行：输入的flag与自身前一位异或</p>
<p>第13行：与global比较</p>
<p>查看一下global值</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172223054.png" alt="image-20230417222322016"></p>
<p>python脚本</p>
<p>tmp &#x3D; [‘f’, 0x0A, ‘k’, 0x0C, ‘w’, ‘&amp;’, ‘O’, ‘.’, ‘@’, 0x11, ‘x’, 0x0D, ‘Z’, ‘;’, ‘U’, 0x11, ‘p’, 0x19, ‘F’, 0x1F, ‘v’,<br>        ‘“‘, ‘M’, ‘#’, ‘D’, 0x0E, ‘g’, 6, ‘h’, 0x0F, ‘G’, ‘2’, ‘O’]<br>flag &#x3D; ‘f’<br>for i in range(1, len(tmp)):<br>    if (isinstance(tmp[i], str)):<br>        if (isinstance(tmp[i - 1], str)):<br>            flag +&#x3D; chr(ord(tmp[i]) ^ ord(tmp[i - 1]))#如果都是字符串<br>        else:#tmp[i]为字符串，tmp[i-1]不是字符串<br>            flag +&#x3D; chr(ord(tmp[i]) ^ tmp[i- 1])<br>    else:#tmp[i]和tmp[i-1]都不是字符串<br>        flag +&#x3D; chr(tmp[i] ^ ord(tmp[i - 1]))<br>print(flag)</p>
<p>这个脚本首先定义了一个列表 <code>tmp</code>，其中包含了一些字符串和整数。</p>
<p>接下来，脚本定义了一个变量 <code>flag</code>，初始化为列表中的第一个元素 <code>&#39;f&#39;</code>。</p>
<p>然后，脚本使用一个 for 循环来遍历列表 <code>tmp</code> 中的元素。对于每个元素，脚本判断它的类型，分为以下 3 种情况：</p>
<ol>
<li>如果当前元素和前一个元素都是字符串，则将它们的 ASCII 码值进行异或操作，并将结果转换为字符，添加到 <code>flag</code> 中。</li>
<li>如果当前元素是字符串而前一个元素不是字符串，则将当前元素的 ASCII 码值和前一个元素的数值进行异或操作，并将结果转换为字符，添加到 <code>flag</code> 中。</li>
<li>如果当前元素和前一个元素都不是字符串，则将它们的数值进行异或操作，并将结果转换为字符，添加到 <code>flag</code> 中。</li>
</ol>
<p>最终，脚本输出变量 <code>flag</code>，即得到了解密后的字符串。整个脚本的目的是对加密的字符串进行解密，解密算法是通过将相邻元素进行异或操作，并将结果转换为 ASCII 码对应的字符。</p>
<p>其中，isinstance函数的作用是检测是否为已知类型，这里即比较tmp[i]与tmp[i-1]是否为字符串</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172223879.png" alt="image-20230417222311853">flag{QianQiuWanDai_YiTongJiangHu}</p>
<p>注：其中，isinstance函数的作用是检测是否为已知类型，这里即比较tmp[i]与tmp[i-1]是否为字符串。</p>
<h1 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a>reverse3</h1><p>IDA打开，搜字符串能明显看到base<br>查看main伪代码，简单来说，输入的str加密后得到v1，再进入for循环后得到Dest后的字符与str2进行比较</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172223702.png" alt="image-20230417222306669"></p>
<p>第30行：Str2与Dest比较</p>
<p>其中 str2的内容为e3nifIH9b_C@n@dH</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172223096.png" alt="image-20230417222300071"></p>
<p>跟进sub_4110BE函数</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172222842.png" alt="image-20230417222254802"></p>
<p>发现使用了这个进行数组变换，跟进发现就是之前的base64。</p>
<p>解码过程：<br>首先for循环将Dest每一位都加了j，所以写脚本还原v1，然后进行base64解码</p>
<h2 id="原脚本："><a href="#原脚本：" class="headerlink" title="原脚本："></a>原脚本：</h2><p>import base64</p>
<p>str &#x3D; ‘e3nifIH9b_C@n@dH’<br>flag &#x3D; ‘’<br>for i in range(len(str)):<br>    flag+&#x3D;chr(ord(str[i])-i)</p>
<p>flag &#x3D; base64.b64decode(flag)<br>print(flag)</p>
<h2 id="优化后："><a href="#优化后：" class="headerlink" title="优化后："></a>优化后：</h2><p>import base64</p>
<p>s &#x3D; ‘e3nifIH9b_C@n@dH’<br>flag &#x3D; ‘’.join(chr(ord(c) - i) for i, c in enumerate(s))<br>decoded &#x3D; base64.b64decode(flag.encode(‘utf-8’))<br>print(decoded)</p>
<p>这个版本使用了列表推导式和 <code>join</code> 方法来构建 <code>flag</code> 字符串。在列表推导式中，使用了 <code>enumerate</code> 函数来同时遍历字符串中的字符和它们的下标，避免使用循环和索引来访问字符串中的字符。使用 <code>join</code> 方法可以将一个列表中的元素连接成一个字符串。</p>
<p>注意到 <code>b64decode</code> 函数的参数是一个 bytes 对象，因此在将 <code>flag</code> 转换为 bytes 对象后再进行解码。</p>
<p>另外，同样避免使用 <code>str</code> 作为变量名，这里将变量名改为 <code>s</code>。</p>
<h1 id="不一样的flag"><a href="#不一样的flag" class="headerlink" title="不一样的flag"></a>不一样的flag</h1><p>用32位的IDA打开，一打开就看到01串</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172222266.png" alt="image-20230417222248240"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172222636.png" alt="image-20230417222239598"></p>
<p>划到下面，把49，35，按R换成1和#</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172222859.png" alt="image-20230417222232835"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172222433.png" alt="image-20230417222227404"></p>
<p>可以发现，遇到1退出，遇到#输出flag</p>
<p>开头的0串刚好25个</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172222968.png" alt="image-20230417222219946"></p>
<p>再根据上面的1 up，2  down ……</p>
<p>得出flag{222441144222}</p>
<h1 id="SimpleRev"><a href="#SimpleRev" class="headerlink" title="SimpleRev"></a>SimpleRev</h1><p>拖入64位IDA查看main，发现输入D进入游戏。</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172222352.png" alt="image-20230417222208321"></p>
<p>跟进Decry</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172221914.png" alt="image-20230417222154887"></p>
<h2 id="代码解读"><a href="#代码解读" class="headerlink" title="代码解读"></a>代码解读</h2><p>这段代码中，<code>v11 = __readfsqword(0x28u);</code> 是获取CPU中的控制寄存器FS的值，可以用来防止缓冲区溢出攻击。<code>*(_QWORD *)src = 0x534C43444ELL;</code> 给 <code>src</code> 赋了一个十六进制值，等价于将其转换为字符数组 “SLCDD”。接着，变量 <code>v7</code>、<code>v8</code>、<code>v10</code> 都被初始化为0。数组 <code>v9</code> 的第一个元素被赋值为十六进制数值 0x776F646168，第二个元素赋值为0。<code>join(key3, v9)</code> 将字符串数组 <code>key3</code> 和 <code>v9</code> 合并成一个新的字符串，赋值给变量 <code>text</code>。<code>strcpy(key, key1)</code> 复制字符串 <code>key1</code> 到 <code>key</code> 中，<code>strcat(key, src)</code> 将字符串 <code>src</code> 连接到 <code>key</code> 后面。最后，<code>v2</code> 和 <code>v3</code> 都被初始化为0，<code>getchar()</code> 是用来暂停程序，等待用户按下任意键后再继续执行下去。</p>
<p><code>join()</code> 是 Python 中的一个字符串方法，用于将一个可迭代对象（例如列表、元组、集合等）中的字符串按照指定的分隔符连接成一个新的字符串。</p>
<p>例子：my_list &#x3D; [‘hello’, ‘world’, ‘python’]<br>new_str &#x3D; ‘ ‘.join(my_list)<br>print(new_str)  # 输出：’hello world python’</p>
<p>在上述代码中，<code>join</code>函数将<code>key3</code>和<code>v9</code>中的元素进行拼接，并返回拼接结果的指针，然后将该指针赋值给<code>text</code>变量。</p>
<p>其中text&#x3D;key3+v9</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304181942207.png" alt="image-20230418194224164"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304181943060.png" alt="image-20230418194354042"></p>
<p>key3为kills，因为是小端序存储，则text为killshadow<br>key为key1+src，key1为ADSFK</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304181932065.png" alt="image-20230418193225027"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304181930203.png" alt="image-20230418193039127"></p>
<p>则key为ADSFKNDCLS</p>
<h2 id="小端序存储"><a href="#小端序存储" class="headerlink" title="小端序存储"></a>小端序存储</h2><p>小端序储存（Little Endian）是一种数据存储的方式。在小端序储存中，数据的最低有效字节（即数值最小的字节）被存储在最前面的地址，而最高有效字节（即数值最大的字节）则被存储在最后面的地址。这与大端序储存（Big Endian）相反，在大端序储存中，数据的最高有效字节被存储在最前面的地址，最低有效字节则被存储在最后面的地址。</p>
<p>举例来说，如果我们要存储数值为0x12345678的32位整数，在小端序储存中，它的字节序列将被储存为0x78, 0x56, 0x34, 0x12，而在大端序储存中，它的字节序列将被储存为0x12, 0x34, 0x56, 0x78。在计算机中，x86架构的处理器是小端序的，而其他的处理器如PowerPC和SPARC则是大端序的。</p>
<p>下面查看加密过程</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304181933851.png" alt="image-20230418193348806"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304181934057.png" alt="image-20230418193409020"></p>
<p><strong>注释</strong></p>
<p><code>!strcmp</code> 是用于判断两个字符串是否相同的函数。<code>strcmp</code> 函数的返回值是一个整数，当两个字符串相等时返回 0，不相等时返回非 0 的值。因此，<code>!strcmp(str1, str2)</code> 的含义是：如果 <code>str1</code> 和 <code>str2</code> 相等，则返回 1，否则返回 0。<code>!</code> 符号表示逻辑非，可以将非 0 的值转换为 0，将 0 转换为 1。因此，<code>!strcmp(str1, str2)</code> 实际上等价于判断 <code>str1</code> 和 <code>str2</code> 是否相等，如果相等则返回 1，否则返回 0。</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304181938679.png" alt="image-20230418193816634"></p>
<p>最后text需要和str2进行比较，既然已经知道了加密后的字符串和key(注意key在第2张图被+32，即大写变成了小写），所以可以直接写脚本一位一位的进行爆破</p>
<p>key &#x3D; “adsfkndcls”<br>text &#x3D; “killshadow”<br>flag &#x3D; “”<br>dict &#x3D; “ABCDEFGHIJKLMNOPQRSTUVWXYZ”<br>v5 &#x3D; len(text)<br>for i in range(v5):<br>    for v1 in dict:<br>        if ord(text[i]) &#x3D;&#x3D; (ord(v1) - 39 - ord(key[i % v5]) + 97) % 26 + 97:<br>            flag +&#x3D; v1<br>print(flag)</p>
<p>这段代码是一个简单的凯撒密码加密算法，其中key代表密钥，text代表明文，flag代表密文，dict是用于表示密文中可能出现的字符集。每次对于明文的一个字符，先根据key中的密钥计算出偏移量，然后通过凯撒密码加密算法，将该字符替换成偏移量之后的字符，即得到密文。</p>
<p>这段代码的作用是对字符串 “text” 进行加密，加密的密钥是 “key”。它遍历了 “text” 中的每个字符，对于每个字符，它通过循环枚举字母表中的每个字母，并计算该字母加密后是否与 “text” 中的字符相等。具体地，它使用如下公式计算加密后的字母：</p>
<p>(ord(v1) - 39 - ord(key[i % v5]) + 97) % 26 + 97</p>
<p>其中，ord(v1) 表示字母 v1 的 ASCII 码值，39 和 97 是常数，v5 是 “text” 的长度，i % v5 计算出当前字符在 “text” 中的位置，ord(key[i % v5]) 表示使用密钥 “key” 中对应位置的字符作为加密密钥。</p>
<p>如果计算得到的加密后的字母等于 “text” 中的字符，就将该字母添加到 “flag” 中，最终得到的 “flag” 就是加密后的结果。</p>
<p><code>(ord(v1) - 39 - ord(key[i % v5]) + 97) % 26 + 97</code> 是对字符 v1 进行加密的过程，可以分为以下几步：</p>
<ol>
<li><code>ord(v1)</code>：将字符 v1 转换成对应的 ASCII 码值。</li>
<li><code>- 39</code>：将 ASCII 码值减去 39。</li>
<li><code>- ord(key[i % v5])</code>：将减去的结果再减去对应位置上的 key 字符的 ASCII 码值。</li>
<li><code>+ 97</code>：将减去的结果加上 97。</li>
<li><code>% 26</code>：将加上 97 的结果对 26 取模。</li>
<li><code>+ 97</code>：将取模后的结果再加上 97，得到最终的加密后的字符的 ASCII 码值。</li>
</ol>
<p>这个过程中，<code>ord(key[i % v5])</code> 表示从 key 中取出与当前处理字符的位置相对应的字符的 ASCII 码值，<code>v5</code> 表示 text 的长度，<code>i % v5</code> 表示当前处理字符在 text 中的位置，因此可以用 i % v5 计算出对应位置的 key 字符。<code>97</code> 和 <code>26</code> 分别是小写字母的起始 ASCII 码值和字母表中字母的个数，用于保证加密后的结果为小写字母。</p>
<h1 id="刮开有奖"><a href="#刮开有奖" class="headerlink" title="刮开有奖"></a>刮开有奖</h1><p>32位程序，IDA打开<br>找到关键函数DialogFunc</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304182033973.png" alt="image-20230418203312907"></p>
<p>跟进</p>
<h2 id="分析伪代码"><a href="#分析伪代码" class="headerlink" title="分析伪代码"></a>分析伪代码</h2><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304191917893.png" alt="image-20230419191730801"></p>
<p>memset函数就是初始化的。</p>
<h2 id="找到字符串加密函数"><a href="#找到字符串加密函数" class="headerlink" title="找到字符串加密函数"></a>找到字符串加密函数</h2><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304191921735.png" alt="image-20230419192130696"></p>
<p>（把数字按R转换了一下）</p>
<p>看到这里，String，应该是我们要的flag，flag &#x3D; 8.，也就是有8个字符了。</p>
<p>看到这里有11个字符，，但是还有一个函数sub_4010F0，跟进去看看。</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304191928167.png" alt="image-20230419192817103"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304191928712.png" alt="image-20230419192832672"></p>
<p>很显然，这个函数会把这已知的11个字符，加密成其他的，这里我们直接把伪代码换为C语言代码，运行就能得到新的加密字符是什么。</p>
<p>#include &lt;stdio.h&gt;<br>int  sub_4010F0(char* a1, int a2, int a3)<br>{<br>  int result; &#x2F;&#x2F; eax<br>  int i; &#x2F;&#x2F; esi<br>  int v5; &#x2F;&#x2F; ecx<br>  int v6; &#x2F;&#x2F; edx</p>
<p>  result &#x3D; a3;<br>  for ( i &#x3D; a2; i &lt;&#x3D; a3; a2 &#x3D; i )<br>  {<br>    v5 &#x3D; i;<br>    v6 &#x3D; i[a1];<br>    if ( a2 &lt; result &amp;&amp; i &lt; result )<br>    {<br>      do<br>      {<br>        if ( v6 &gt; a1[result])<br>        {<br>          if ( i &gt;&#x3D; result )<br>            break;<br>          ++i;<br>          a1[v5] &#x3D; a1[result];<br>          if ( i &gt;&#x3D; result )<br>            break;<br>          while ( a1[i] &lt;&#x3D; v6 )<br>          {<br>            if ( ++i &gt;&#x3D; result )<br>              goto LABEL_13;<br>          }<br>          if ( i &gt;&#x3D; result )<br>            break;<br>          v5 &#x3D; i;<br>         a1[result] &#x3D; a1[i];<br>        }<br>        –result;<br>      }<br>      while ( i &lt; result );<br>    }<br>LABEL_13:<br>    a1[result] &#x3D; v6 ;<br>    sub_4010F0(a1, a2, i - 1);<br>    result &#x3D; a3;<br>    ++i;<br>  }<br>  return result;<br>}</p>
<p>int main()<br>{<br>    char str[] &#x3D; “ZJSECaNH3ng”;<br>    sub_4010F0(str,0,10);<br>    printf(“%s”, str);<br>    return 0;<br>}</p>
<p>*<em>注释:在伪代码中，有a1+ 4 * i，a1+4 <em>result，这样的字符。但是在C语言代码中，为什么没有了？</em></em></p>
<p>int占四个字节，所以需要*4.如果是char类型，就不需要.</p>
<p>我们知道，计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问数组中的某个元素时，它会首先通过下面的寻址公式，计算出该元素存储的内存地址:</p>
<p>a[i]_address &#x3D; base_address + i * data__type_size</p>
<p>其中 data_type_size 表示数组中每个元素的大小。我们举的这个例子里，数组中存储的是 int 类型数据，所以data_type_size  就为 4 个字节.</p>
<p>从这里，我们知道a1+4*i，也就是a1【i】，a1+4 * result，也就是a1【result】。</p>
<p>将伪代码的寻址方式改为数组寻址，然后将*(_DWORD*) 删掉，因为这是汇编的表示。</p>
<p>所以伪代码变成了C语言代码。</p>
<p>运行C语言代码得到</p>
<p>3CEHJNSZagn</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304191949181.png" alt="image-20230419194916137"></p>
<p>得到加密之后的字符。继续分析</p>
<h2 id="base64加密"><a href="#base64加密" class="headerlink" title="base64加密"></a>base64加密</h2><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304191956217.png" alt="image-20230419195621177"></p>
<p><strong>注释：怎么知道是base64的</strong>。</p>
<p>SHIFT+F12查看字符串</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304191958915.png" alt="image-20230419195820873"></p>
<p>在这里，可以看到，v4，v5 &#x3D; sub_401000，跟进看看。</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304191959537.png" alt="image-20230419195944492"></p>
<p>发现也是一串代码，但是很复杂，看到这里有一个byte_407830函数，跟进看看。</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304192001857.png"></p>
<p>推测是将，<strong>v4 &#x3D; ak1w，v5 &#x3D; V1Ax，两个字符串base64加密</strong>。</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304192010894.png" alt="image-20230419201000856"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304192010866.png" alt="image-20230419201022823"></p>
<p><strong>解密之后，v4 &#x3D; jMp，v5 &#x3D; WP1.</strong></p>
<h2 id="分析if语句，得到flag"><a href="#分析if语句，得到flag" class="headerlink" title="分析if语句，得到flag"></a>分析if语句，得到flag</h2><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304192012833.png" alt="image-20230419201227784"></p>
<p>最后，我们看到最后的if语句，</p>
<p>第一句：String[0] &#x3D;&#x3D; v7[0] + 34，这里的v7【0】，就是上面10个字符的第一个字符，我们通过加密函数之后，v7【0】由一开始的Z变成了，v7【0】 &#x3D; 3.</p>
<p>3的ASCII码是51，51 + 34 &#x3D; 85，85ASCII码对应的是大写的 U。flag第一个字符得到。</p>
<p>第二句：String[1] &#x3D;&#x3D; v10，v10在之前没加密的时候，是排第五位，我们看看加密之后的第五位是谁，3CEHJNSZagn，可以看到，加密之后的第五位是 J。flag第二个字符得到。</p>
<p>第三句：4 * String[2] - 141 &#x3D;&#x3D; 3 * v8，v8在没加密之前，是排第三位，先看看加密之后的第三位是谁，可以看到是E，E的ASCII码是69，所以3*69 + 141 &#x2F; 4 &#x3D; 87 ,ASCII为W,flag第三个字符得到。</p>
<p>第四句：String[3] &#x2F; 4 &#x3D;&#x3D; 2 * (v13 &#x2F; 9)，看到v13没加密之前排到数第四位，看看加密之后的到数第四位是谁，是Z，Z的ASCII是90，所以2<em>（90&#x2F;9）</em>4 &#x3D; 80 ,ASCII为P，flag第四个字符得到。</p>
<p>后面四个字符，就是base64加密的那几个，可以看到第三第四字符已经是WP了，说明，WP1在前，jMp在后。</p>
<p>将他们拼接在一起，得到，UJWP1jMp。</p>
<p>带上flag{}，得到flag{UJWP1jMp}。</p>
<h2 id="GWCTF-2019-pyre"><a href="#GWCTF-2019-pyre" class="headerlink" title="[GWCTF 2019]pyre"></a>[GWCTF 2019]pyre</h2><p>下载下来是pyc文件，直接反编译</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304192050391.png" alt="image-20230419205025299"></p>
<p>网站链接<a href="https://www.toolnb.com/tools/pyc.html">pyc反编译 - 爱资料工具 (toolnb.com)</a></p>
<p>print ‘Welcome to Re World!’<br>print ‘Your input1 is your flag~’<br>l &#x3D; len(input1)<br>for i in range(l):<br>    num &#x3D; ((input1[i] + i) % 128 + 128) % 128<br>    code +&#x3D; num</p>
<p>for i in range(l - 1):<br>    code[i] &#x3D; code[i] ^ code[(i + 1)]</p>
<p>print code<br>code &#x3D; [‘\x1f’, ‘\x12’, ‘\x1d’, ‘(‘, ‘0’, ‘4’, ‘\x01’, ‘\x06’, ‘\x14’, ‘4’, ‘,’, ‘\x1b’, ‘U’, ‘?’, ‘o’, ‘6’, ‘*’, ‘:’, ‘\x01’, ‘D’, ‘;’, ‘%’, ‘\x13’]</p>
<p><strong>代码解释</strong></p>
<p>这段代码看起来像是一个简单的字符串加密程序，它使用了一种称为异或加密的技术来对一个字符串进行加密，并将加密后的结果输出为一个列表 <code>code</code>。</p>
<p>首先，程序输出欢迎语句，提示用户输入一个标志。然后，程序计算标志字符串的长度并存储在 <code>l</code> 变量中。</p>
<p>接下来，程序使用一个循环，将每个字符转换为一个数字，并将其加上其在字符串中的位置 <code>i</code>，然后对 128 取模数，这是一种简单的变换方法。这个变换的目的是打乱字符的顺序，并防止加密后的字符串只包含一些特定的 ASCII 字符，从而使加密更难被破解。计算出来的数字存储在 <code>code</code> 列表中。</p>
<p>然后，程序使用另一个循环来对 <code>code</code> 列表中相邻的元素进行异或运算，将它们混合在一起，从而加密了字符串。这个循环从 0 开始，到 <code>l - 2</code> 结束，步长为 1。</p>
<p>最后，程序输出加密后的字符串，它存储在 <code>code</code> 列表中。与先前的代码段不同的是，它使用了硬编码的列表 <code>code</code> 来表示加密后的字符串，而不是将加密后的字符串打印为一个字符串。</p>
<p>然后照着代码逆向一下</p>
<p>下面是将代码逆向回来，解密输入字符串的过程。</p>
<p>首先，我们将列表 <code>code</code> 赋值给一个新变量，以便在解密时使用。然后，我们将循环 <code>for i in range(l - 1)</code> 中的 <code>l</code> 变量修改为 <code>len(code)</code>，以便正确地处理加密后的字符串。接下来，我们反向循环 <code>for i in range(len(code) - 2, -1, -1)</code> 中的 <code>i</code> 变量，以便在解密时正确计算每个字符的值。最后，我们将 <code>num</code> 变量中的算法修改为 <code>num = (ord(code[i]) - i) % 128</code>，以便正确地解密每个字符。最终的逆向代码如下：</p>
<p>print(‘Welcome to Re World!’)<br>print(‘Your input1 is your flag~’)</p>
<p>code &#x3D; [<br>    ‘\x1f’,<br>    ‘\x12’,<br>    ‘\x1d’,<br>    ‘(‘,<br>    ‘0’,<br>    ‘4’,<br>    ‘\x01’,<br>    ‘\x06’,<br>    ‘\x14’,<br>    ‘4’,<br>    ‘,’,<br>    ‘\x1b’,<br>    ‘U’,<br>    ‘?’,<br>    ‘o’,<br>    ‘6’,<br>    ‘*’,<br>    ‘:’,<br>    ‘\x01’,<br>    ‘D’,<br>    ‘;’,<br>    ‘%’,<br>    ‘\x13’<br>]</p>
<p>flag &#x3D; ‘’<br>for i in range(len(code) - 2, -1, -1):<br>    code[i] &#x3D; chr(ord(code[i]) ^ ord(code[i + 1]))</p>
<p>for i in range(len(code)):<br>    num &#x3D; (ord(code[i]) - i) % 128<br>    flag +&#x3D; chr(num)</p>
<p>print(‘The decrypted flag is:’, flag)</p>
<p>在PC里面运行得出flagGWHT{Just_Re_1s_Ha66y!}</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304192053997.png" alt="image-20230419205344935"></p>
<h1 id="简单注册器"><a href="#简单注册器" class="headerlink" title="简单注册器"></a>简单注册器</h1><p>下载出来是apk文件，所以是一道安卓逆向题目</p>
<p>用jadx-gui打开</p>
<p>找到main函数</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304270819756.png" alt="image-20230427081858642"></p>
<p>找到关键函数</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304270822147.png" alt="image-20230427082259116"></p>
<p>由此可知dd2940c04462b4dd7c450528835cca15就是我们要的flag</p>
<p>对字符串进行转换</p>
<p>脚本：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">input_str = <span class="string">&quot;dd2940c04462b4dd7c450528835cca15&quot;</span></span><br><span class="line">input_list = <span class="built_in">list</span>(input_str)</span><br><span class="line">input_list<span class="selector-attr">[2]</span> = <span class="built_in">chr</span>(<span class="built_in">ord</span>(input_list<span class="selector-attr">[2]</span>) + <span class="built_in">ord</span>(input_list<span class="selector-attr">[3]</span>) - <span class="number">50</span>)</span><br><span class="line">input_list<span class="selector-attr">[4]</span> = <span class="built_in">chr</span>(<span class="built_in">ord</span>(input_list<span class="selector-attr">[2]</span>) + <span class="built_in">ord</span>(input_list<span class="selector-attr">[5]</span>) - <span class="number">48</span>)</span><br><span class="line">input_list<span class="selector-attr">[30]</span> = <span class="built_in">chr</span>(<span class="built_in">ord</span>(input_list<span class="selector-attr">[31]</span>) + <span class="built_in">ord</span>(input_list<span class="selector-attr">[9]</span>) - <span class="number">48</span>)</span><br><span class="line">input_list<span class="selector-attr">[14]</span> = <span class="built_in">chr</span>(<span class="built_in">ord</span>(input_list<span class="selector-attr">[27]</span>) + <span class="built_in">ord</span>(input_list<span class="selector-attr">[28]</span>) - <span class="number">97</span>)</span><br><span class="line">input_list = input_list<span class="selector-attr">[::-1]</span></span><br><span class="line">output_str = <span class="string">&quot;flag&#123;&quot;</span> + <span class="string">&quot;&quot;</span><span class="selector-class">.join</span>(input_list) + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(output_str)</span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304270839781.png" alt="image-20230427083933747"></p>
<p>flag{59acc538825054c7de4b26440c0999dd}</p>
<h1 id="ACTF新生赛2020-easyre-1"><a href="#ACTF新生赛2020-easyre-1" class="headerlink" title="[ACTF新生赛2020]easyre 1"></a>[ACTF新生赛2020]easyre 1</h1><p>下载的文件有UPX壳</p>
<p>拖入UPXSHell中脱壳，脱完壳发现是32位</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304270843590.png" alt="image-20230427084357548"></p>
<p>拖入IDA 32位</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304270847718.png" alt="image-20230427084727677"></p>
<p>找到可疑字符串，先留着</p>
<p>}|{zyxwvutsrqponmlkjihgfedcba&#96;_^][ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;&#x3D;&lt;;:9876543210&#x2F;.-,+*)(‘,27h,’&amp;%</p>
<p>找到main函数</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304270851828.png" alt="image-20230427085149793"></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">int __cdecl main(int argc, const char argv, const char envp)</span><br><span class="line">&#123;</span><br><span class="line">  _BYTE v4[<span class="number">12</span>]; <span class="regexp">//</span> [esp+<span class="number">12</span>h] [ebp-<span class="number">2</span>Eh] BYREF</span><br><span class="line">  _DWORD v5[<span class="number">3</span>]; <span class="regexp">//</span> [esp+<span class="number">1</span>Eh] [ebp-<span class="number">22</span>h]</span><br><span class="line">  _BYTE v6[<span class="number">5</span>]; <span class="regexp">//</span> [esp+<span class="number">2</span>Ah] [ebp-<span class="number">16</span>h] BYREF</span><br><span class="line">  int v7; <span class="regexp">//</span> [esp+<span class="number">2</span>Fh] [ebp-<span class="number">11</span>h]</span><br><span class="line">  int v8; <span class="regexp">//</span> [esp+<span class="number">33</span>h] [ebp-Dh]</span><br><span class="line">  int v9; <span class="regexp">//</span> [esp+<span class="number">37</span>h] [ebp-<span class="number">9</span>h]</span><br><span class="line">  char v10; <span class="regexp">//</span> [esp+<span class="number">3</span>Bh] [ebp-<span class="number">5</span>h]</span><br><span class="line">  int i; <span class="regexp">//</span> [esp+<span class="number">3</span>Ch] [ebp-<span class="number">4</span>h]</span><br><span class="line"></span><br><span class="line">_main()；</span><br><span class="line">  qmemcpy(v4, <span class="string">&quot;*F&#x27;\&quot;N,\&quot;(I?+@&quot;</span>, sizeof(v4)); <span class="regexp">//</span> 将 <span class="string">&quot;*F&#x27;\&quot;N,\&quot;(I?+@&quot;</span> 复制到 v4 数组中</span><br><span class="line">  printf(<span class="string">&quot;Please input:&quot;</span>); <span class="regexp">//</span> 提示用户输入</span><br><span class="line">  scanf(<span class="string">&quot;%s&quot;</span>, v6); <span class="regexp">//</span> 获取用户输入</span><br><span class="line">  <span class="keyword">if</span> ( v6[<span class="number">0</span>] != <span class="number">65</span> || v6[<span class="number">1</span>] != <span class="number">67</span> || v6[<span class="number">2</span>] != <span class="number">84</span> || v6[<span class="number">3</span>] != <span class="number">70</span> || v6[<span class="number">4</span>] != <span class="number">123</span> || v10 != <span class="number">125</span> ) <span class="regexp">//</span> 判断用户输入的前五个字符是否为 <span class="string">&quot;ACTF&#123;&quot;</span>，最后一个字符是否为 <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">    return <span class="number">0</span>; <span class="regexp">//</span> 如果不是，则直接退出</span><br><span class="line">  v5[<span class="number">0</span>] = v7; <span class="regexp">//</span> 将变量 v7 的值赋给 v5[<span class="number">0</span>]</span><br><span class="line">  v5[<span class="number">1</span>] = v8; <span class="regexp">//</span> 将变量 v8 的值赋给 v5[<span class="number">1</span>]</span><br><span class="line">  v5[<span class="number">2</span>] = v9; <span class="regexp">//</span> 将变量 v9 的值赋给 v5[<span class="number">2</span>]</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">11</span>; ++i ) <span class="regexp">//</span> 循环遍历 v5 数组</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[i] != _data_start__[*((char *)v5 + i) - <span class="number">1</span>] ) <span class="regexp">//</span> 判断 v4 数组和指针 v5 指向的数据是否一致</span><br><span class="line">      return <span class="number">0</span>; <span class="regexp">//</span> 如果不一致，则直接退出</span><br><span class="line">  &#125;</span><br><span class="line">  printf(<span class="string">&quot;You are correct!&quot;</span>); <span class="regexp">//</span> 输出 <span class="string">&quot;You are correct!&quot;</span></span><br><span class="line">  return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将*F’&quot;N,&quot;(I?+@转为10进制</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">s <span class="operator">=</span> <span class="string">&quot;*F&#x27;\&quot;</span>N<span class="punctuation">,</span>\<span class="string">&quot;(I?+@&quot;</span></span><br><span class="line">for <span class="keyword">c</span> in s:</span><br><span class="line">    print(<span class="keyword">ord</span>(<span class="keyword">c</span>))</span><br></pre></td></tr></table></figure>

<p>42<br>70<br>39<br>34<br>78<br>44<br>34<br>40<br>73<br>63<br>43<br>64</p>
<p>综上可知：v4 &#x3D; [42,70,39,34,78,44,34,40,73,63,43,64]</p>
<p>​                   <em>data_start</em>_&#x3D;}|{zyxwvutsrqponmlkjihgfedcba&#96;_^][ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;&#x3D;&lt;;:9876543210&#x2F;.-,+*)(‘,27h,’&amp;%</p>
<ol>
<li>将 v4 中的每个数字转化成对应的 ASCII 字符，得到字符串：*F’”N,”(I?+@</li>
<li>对于每个字符，在 <strong>data_start</strong> 中找到对应的位置，并将位置加 1 得到新的数字</li>
<li>将每个数字转换成对应的 ASCII 字符，并连接成字符串，得到 flag</li>
</ol>
<p>根据上述过程，可以得到如下 Python 代码实现：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">v4 = <span class="selector-attr">[42,70,39,34,78,44,34,40,73,63,43,64]</span></span><br><span class="line">__data_start__ = <span class="string">&#x27;~&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(\&#x27;&amp;%$# !&quot;&#x27;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> v4:</span><br><span class="line">    idx = __data_start__<span class="selector-class">.find</span>(<span class="built_in">chr</span>(i))</span><br><span class="line">    flag += <span class="built_in">chr</span>(idx+<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(flag)</span></span></span><br></pre></td></tr></table></figure>

<p>这段脚本的作用是将给定的数字列表 v4 转换为一个字符串 flag。在这个过程中，将 v4 中的每个数字当作 <strong>data_start</strong> 字符串中的一个索引，然后找到该索引在 <strong>data_start</strong> 中对应的字符，将该字符加入到 flag 字符串中。</p>
<p>具体而言，该脚本使用了一个字符串 <strong>data_start</strong>，其中包含了所有可以使用的字符。然后，遍历 v4 中的每个数字，使用 <code>chr(i)</code> 将其转换为对应的字符，并使用 <code>__data_start__.find()</code> 方法查找该字符在 <strong>data_start</strong> 中的索引。因为在 <strong>data_start</strong> 中的索引从 0 开始，所以最后还需要将找到的索引值加 1，才能得到正确的字符。将每次得到的字符加入到 flag 字符串中，最终得到转换后的字符串。</p>
<p>flag{U9X_1S_W6@T?}</p>
<h1 id="findit"><a href="#findit" class="headerlink" title="findit"></a>findit</h1><p>apk文件，用jadx-gui打开</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304270949209.png" alt="image-20230427094930141"></p>
<p>发现字符串，猜测是flag</p>
<h2 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h2><p>整理得到pvkq{m164675262033l4m49lnp7p9mnk28k75}</p>
<p>仔细观察pvkq，发现f——&gt;p为10，l——&gt;v为10，a——&gt;k为10，g——&gt;q为10</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304270952369.png" alt="image-20230427095222339"></p>
<h2 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h2><p>这段代码中没有直接使用凯撒密码加密，但是在点击按钮的事件中有一个对字符数组b的处理，这个数组中包含了一个加密过的字符串，处理的过程中使用了字符加密和解密时的位移，可以看出该字符串是通过凯撒密码加密的。具体来说，对于字符数组b中的每个字符，如果它是字母，就将它向右移动16个位置，如果移动后不在字母范围内，就将它减去26，即从字母表的末尾又回到了字母表的开头。</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304270953320.png" alt="image-20230427095334281"></p>
<p>脚本：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">cipher = <span class="string">&quot;pvkq&#123;m164675262033l4m49lnp7p9mnk28k75&#125;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">26</span>):</span><br><span class="line">    plain = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c in cipher:</span><br><span class="line">        <span class="keyword">if</span> c.isalpha():</span><br><span class="line">            ascii_code = <span class="keyword">ord</span>(c) - <span class="number">97</span>  <span class="comment"># 转换为0~25的数字</span></span><br><span class="line">            shifted_ascii = (ascii_code + i) % <span class="number">26</span>  <span class="comment"># 进行偏移</span></span><br><span class="line">            plain += <span class="keyword">chr</span>(shifted_ascii + <span class="number">97</span>)  <span class="comment"># 转换回字母并拼接</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            plain += c  <span class="comment"># 非字母字符保持不变</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;Shift %d: %s&quot;</span> % (i, plain))</span><br></pre></td></tr></table></figure>

<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304270954610.png" alt="image-20230427095402576"></p>
<p>flag{c164675262033b4c49bdf7f9cda28a75}</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>BUUCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>实验题目要求解释</title>
    <url>/2023/04/10/%E5%AE%9E%E9%AA%8C%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<h1 id="Legal-ops"><a href="#Legal-ops" class="headerlink" title="Legal ops"></a>Legal ops</h1><p>在计算机程序设计中，有些操作符被认为是合法的（legal），有些操作符则被认为是不合法的（illegal）。Legal ops 是指在编程中可以使用的合法的操作符，而不包括任何不合法的操作符。通常，在编程题目中，会明确规定 Legal ops 的范围，以限制参与者使用某些运算符，从而增加题目的挑战和限制。</p>
<h1 id="Max-ops"><a href="#Max-ops" class="headerlink" title="Max ops"></a>Max ops</h1><p>在编程题目中，Max ops（或者Maximum Operations）是指在解题过程中可以使用的操作符的最大数量。通常，为了增加编程的挑战和难度，会规定在解决问题的过程中只能使用有限的操作符数量。因此，题目的难度通常与所允许使用的操作符数量有关。在题目中，一般会给出最大操作数的限制，以提示解决问题时需要注意的事项。</p>
<h1 id="Rating"><a href="#Rating" class="headerlink" title="Rating"></a>Rating</h1><p>在编程题目中，Rating（或者Difficulty Rating）是指题目的难度评级。通常，难度评级是基于题目的复杂度、解决问题的难度和需要的知识量等因素来评定的。不同的平台或者网站可能会采用不同的评级系统，但通常都会以数字或者符号等形式表示。在一些网站中，例如LeetCode，难度评级一般被划分为Easy、Medium和Hard三个级别。对于参与编程竞赛或者考试的人来说，难度评级是选择题目时需要考虑的因素之一，也是评估自己编程能力的一种方式。</p>
]]></content>
      <tags>
        <tag>实验</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解计算机系统CSAPP实验一，实验记录</title>
    <url>/2023/04/10/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9FCSAPP%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%8C%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="itXor"><a href="#itXor" class="headerlink" title="itXor"></a>itXor</h1><p>这个 <code>bitXor</code> 函数的实现仅使用 <code>~</code>（取反）和 <code>&amp;</code>（按位与）运算符，其工作原理如下：</p>
<ol>
<li>计算左侧值（lhs），通过对 x 取反并与 y 进行按位与操作得到。这会在 y 为 1 且 x 为 0 时产生值为 1 的结果。</li>
<li>计算右侧值（rhs），通过对 y 取反并与 x 进行按位与操作得到。这会在 x 为 1 且 y 为 0 时产生值为 1 的结果。</li>
<li>最后，通过对 lhs 和 rhs 进行按位取反并操作来进行异或操作。</li>
</ol>
<p>lhs 和 rhs 的按位取反并操作会产生在 lhs 和 rhs 不同的位置上值为 1，在相同位置上值为 0 的结果。因此，这个最终步骤会产生正确的异或结果。</p>
<p>这个实现总共使用了 6 个运算符：2 个 <code>~</code>，3 个 <code>&amp;</code> 和 1 个 <code>^</code>。因此，它满足了只使用 <code>~</code> 和 <code>&amp;</code> 运算符的限制，并且最多使用 6+3+1&#x3D;10 个运算符。它的评级为 1，这表示它是一个简单直接的解决方案。</p>
<h2 id="什么是按位与"><a href="#什么是按位与" class="headerlink" title="什么是按位与"></a>什么是按位与</h2><p>按位与（Bitwise AND）是一种按位运算符，它对两个操作数的每一位执行逻辑 AND 操作。其结果是一个具有相同位数的整数，其中每一位都是两个操作数对应位上的值进行 AND 运算的结果。当且仅当两个操作数的相应位都为 1 时，结果中对应位才为 1，否则为 0。</p>
<p>按位与运算符使用符号 <code>&amp;</code> 表示，例如，对于两个 8 位的整数 a 和 b，a &amp; b 将对 a 和 b 的每一位进行逻辑 AND 操作，生成一个新的 8 位整数作为结果。</p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>a &#x3D; 10101010</p>
<p>b &#x3D; 11110000</p>
<p>a &amp; b &#x3D; 10100000</p>
<h2 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h2><p>在计算机中，<code>~</code> 符号表示按位取反（Bitwise NOT），它是一元运算符，只对一个操作数进行操作。按位取反会将操作数的每一位取反，即将 0 变为 1，将 1 变为 0。</p>
<p>例如，如果一个二进制数为 <code>00101011</code>，那么它的按位取反结果为 <code>11010100</code>。这是因为按位取反运算符会对每一个二进制位进行操作，将二进制位上的 0 变成 1，1 变成 0。</p>
<p>在 C 语言等许多编程语言中，<code>~</code> 运算符通常与整数类型一起使用，例如 <code>int</code> 或 <code>unsigned int</code>，表示对整数值的每个位取反。</p>
<h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><p>~00101101 &#x3D; 11010010</p>
<h2 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h2><p>题目要求只使用按位取反（<code>~</code>）和按位与（<code>&amp;</code>）来实现按位异或（<code>^</code>）运算，即实现一个函数 <code>bitXor(x, y)</code>，返回 x^y 的结果。</p>
<p>解题思路如下：</p>
<ol>
<li><p>使用按位与运算和按位取反运算，分别计算出 x 和 y 的“非重叠部分”和“重叠部分”。其中，“非重叠部分”指的是在 x 和 y 中只出现一次的二进制位，而“重叠部分”指的是在 x 和 y 中都出现的二进制位。</p>
<p>非重叠部分的计算可以使用按位与运算和按位取反运算，即 x &amp; ~y 和 ~x &amp; y。重叠部分的计算可以使用按位与运算，即 x &amp; y。</p>
</li>
<li><p>将“非重叠部分”和“重叠部分”的结果进行按位或运算，得到最终结果。具体来说，先将“非重叠部分”和“重叠部分”的结果进行按位或运算，得到一个中间结果。然后再将中间结果进行按位取反运算，得到最终结果。</p>
<p>这个步骤可以使用按位取反运算和按位与运算来实现，即 ~(lhs &amp; rhs)，其中 lhs 表示“非重叠部分”，rhs 表示“重叠部分”。</p>
<h3 id="例题解析bitXor-4-5-x3D-1"><a href="#例题解析bitXor-4-5-x3D-1" class="headerlink" title="例题解析bitXor(4, 5) &#x3D; 1"></a>例题解析bitXor(4, 5) &#x3D; 1</h3><p>题目要求实现一个函数 <code>bitXor(x, y)</code>，其中 x 和 y 分别为两个整数，函数的返回值是它们的按位异或结果。要求只能使用按位非运算符（<code>~</code>）和按位与运算符（<code>&amp;</code>），不能使用其他的运算符。</p>
<p>按照异或运算的性质，x ^ y 可以表示为：</p>
<ul>
<li>(x &amp; <del>y) | (</del>x &amp; y)</li>
</ul>
<p>这个式子的意思是，先对 x 和 y 进行按位取反运算，然后得到它们的“非重叠部分”和“重叠部分”。对于“非重叠部分”，只保留 y 中对应位为 1 的位，对于 x 中对应位为 1 的位则取反为 0；对于“重叠部分”，则保留 x 和 y 中对应位都为 1 的位。最后将“非重叠部分”和“重叠部分”进行按位或运算，即可得到 x ^ y 的结果。</p>
<p>根据上述思路，对于输入的 x&#x3D;4 和 y&#x3D;5，它们的二进制表示分别为 100 和 101。按照上述公式进行计算，得到：</p>
<ul>
<li>x &amp; ~y &#x3D; 100 &amp; 010 &#x3D; 000</li>
<li>~x &amp; y &#x3D; ~100 &amp; 101 &#x3D; 001</li>
<li>(x &amp; <del>y) | (</del>x &amp; y) &#x3D; 000 | 001 &#x3D; 001</li>
</ul>
<p>因此，<code>bitXor(4, 5)</code> 的结果为 1。</p>
<h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p>int bitXor(int x, int y) {  </p>
<p>int lhs &#x3D; ~x &amp; y;  &#x2F;&#x2F; 计算 x 和 y 的“非重叠部分”  </p>
<p>int rhs &#x3D; x &amp; ~y;  </p>
<p>return ~(lhs &amp; rhs);  &#x2F;&#x2F; 将“非重叠部分”和“重叠部分”进行按位或和按位取反运算，得到最终结果 </p>
<p>}</p>
<h1 id="tmin"><a href="#tmin" class="headerlink" title="tmin"></a>tmin</h1><h2 id="什么是tmin"><a href="#什么是tmin" class="headerlink" title="什么是tmin"></a>什么是tmin</h2><p><code>tmin</code> 是指最小的二进制补码整数，在32位补码表示中，其二进制表示为1000…0000，即最高位为1，其他位为0。因为在补码表示中，最高位为符号位，表示该数为负数，而其他位为0，表示该数的绝对值为最大，因此它是最小的二进制补码整数。</p>
<h2 id="题目解释"><a href="#题目解释" class="headerlink" title="题目解释"></a>题目解释</h2><p><code>tmin - return minimum two&#39;s complement integer</code> 意思是实现一个函数 <code>tmin</code>，用于返回最小的二进制补码整数。在32位补码表示中，最小的二进制补码整数为1000…0000（最高位为符号位，其余位为0），因此 <code>tmin</code> 函数应该返回这个值。这个函数应该使用合法的运算符和最小的操作数数量来实现。</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这道题目要求我们返回最小的二进制补码整数。在二进制补码中，最小的整数是符号位为1，其余位都是0。因此，我们只需要构造一个二进制数，让符号位为1，其余位都是0即可。在32位的二进制补码中，最小的整数可以用十六进制表示为<code>0x80000000</code>，或者用二进制表示为<code>0b10000000000000000000000000000000</code>。因此，我们可以直接返回这个数即可。</p>
<p>但是需要注意的是，题目中规定了只能使用一些特定的运算符来实现这个功能，包括非运算符<code>~</code>、与运算符<code>&amp;</code>、异或运算符<code>^</code>、或运算符<code>|</code>、加法运算符<code>+</code>和位移运算符<code>&lt;&lt;</code>、<code>&gt;&gt;</code>。因此，我们需要利用这些运算符来构造这个二进制数，而不能直接使用十六进制或二进制来表示。我们可以利用左移运算符<code>&lt;&lt;</code>来将<code>1</code>移动到符号位，然后再用其他运算符将其它位设置为0，得到最小的二进制补码整数。具体实现方法如下：</p>
<p>int tmin(void) {<br>  return 1 &lt;&lt; 31;<br>}</p>
<p>这样，我们就用了一条左移运算符<code>&lt;&lt;</code>就实现了这个函数。</p>
<h2 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h2><p>返回最小的二进制补码整数的实现可以使用左移运算符 <code>&lt;&lt;</code>。具体实现如下：</p>
<p>int tmin() {<br>  return 1 &lt;&lt; 31;<br>}</p>
<p>在二进制补码表示中，最小的整数是在符号位为1，其它位均为0时得到的。因此，可以使用左移运算符将1移动到符号位，然后移动31位，这样得到的结果就是最小的二进制补码整数了。</p>
<h1 id="isTmax"><a href="#isTmax" class="headerlink" title="isTmax"></a>isTmax</h1><h2 id="题目解释-1"><a href="#题目解释-1" class="headerlink" title="题目解释"></a>题目解释</h2><p><code>isTmax</code>函数的作用是判断一个整数x是否为32位有符号整数的最大值。</p>
<p>函数isTmax的作用是判断给定的整数x是否为32位二进制补码表示下的最大值，如果是，则返回1，否则返回0。其中，32位二进制补码中最大值的特征是除了最高位为1之外，其余位均为1。</p>
<h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>1.首先可以发现，对于32位的最大二进制补码数来说，其符号位为1，其余所有位都为0。因此，可以通过下面的方法来判断给定的数是否为最大值：</p>
<ul>
<li>判断x是否为负数（即符号位是否为1）；</li>
<li>判断x+1是否为负数。</li>
</ul>
<p>2.如果x是最大值，则x+1会溢出为最小值（即32位二进制补码表示下的最小负数），其符号位为1，其余所有位也为0。</p>
<p>3.最后，根据上述判断结果，如果x是最大值，则返回1，否则返回0。</p>
<p>基于以上思路，可以编写如下的isTmax函数：</p>
<p>int isTmax(int x) {<br>    int y &#x3D; x + 1;  &#x2F;&#x2F; 计算x+1<br>    int negX &#x3D; !x;  &#x2F;&#x2F; 判断x是否为0<br>    int isTmax &#x3D; !(y ^ x) &amp; !negX;  &#x2F;&#x2F; 判断是否为最大值<br>    return isTmax;<br>}</p>
<p>其中，使用了逻辑运算符!（逻辑非）、~（按位取反）、&amp;（按位与）、^（按位异或）和+（加法）等运算符，而且使用了三个中间变量，即y、negX和isTmax。根据题目要求，最大操作次数为10次。</p>
<h3 id="注：为什么要计算x-1-在二进制补码表示中，最大的二进制补码整数是0111…111，最小的二进制补码整数是1000…000。如果x是最大的二进制补码整数，那么x-1会溢出成最小的二进制补码整数，也就是tmin。因此，我们可以检查x-1是否等于-tmin来判断x是否为最大的二进制补码整数。"><a href="#注：为什么要计算x-1-在二进制补码表示中，最大的二进制补码整数是0111…111，最小的二进制补码整数是1000…000。如果x是最大的二进制补码整数，那么x-1会溢出成最小的二进制补码整数，也就是tmin。因此，我们可以检查x-1是否等于-tmin来判断x是否为最大的二进制补码整数。" class="headerlink" title="注：为什么要计算x+1 :在二进制补码表示中，最大的二进制补码整数是0111…111，最小的二进制补码整数是1000…000。如果x是最大的二进制补码整数，那么x+1会溢出成最小的二进制补码整数，也就是tmin。因此，我们可以检查x+1是否等于-tmin来判断x是否为最大的二进制补码整数。"></a>注：为什么要计算x+1 :在二进制补码表示中，最大的二进制补码整数是0111…111，最小的二进制补码整数是1000…000。如果x是最大的二进制补码整数，那么x+1会溢出成最小的二进制补码整数，也就是tmin。因此，我们可以检查x+1是否等于-tmin来判断x是否为最大的二进制补码整数。</h3><h2 id="答案-2"><a href="#答案-2" class="headerlink" title="答案"></a>答案</h2><p>int isTmax(int x) {<br>    int y &#x3D; x + 1;  &#x2F;&#x2F; 计算x+1<br>    int negX &#x3D; !x;  &#x2F;&#x2F; 判断x是否为0<br>    int isTmax &#x3D; !(y ^ x) &amp; !negX;  &#x2F;&#x2F; 判断是否为最大值<br>    return isTmax;<br>}</p>
<h1 id="allOddBits"><a href="#allOddBits" class="headerlink" title="allOddBits"></a>allOddBits</h1><h2 id="题目解释-2"><a href="#题目解释-2" class="headerlink" title="题目解释"></a>题目解释</h2><p>函数的名字为 “allOddBits”，它的输入参数是一个 “word”，这个 word 可能是一个整数或者一个二进制字符串。</p>
<p>这个函数的作用是检查输入的 word 是否所有的奇数位（即二进制表示中从右往左数的第1位、第3位、第5位等）都设置为了 1。如果是，那么函数就返回 1（表示真或成功）；否则返回 0（表示假或失败）。</p>
<p>例如，如果输入的 word 是一个 16 位的二进制字符串 “1010101010101010”，其中奇数位是 “1111”。如果所有的奇数位都设置为了 1，那么函数就返回 1；如果任意一个奇数位设置为了 0，那么函数就返回 0。</p>
<p>总的来说，这个函数可以用于检查一个二进制数字中的特定位是否被设置为了指定的值。</p>
<h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><ol>
<li>首先，定义一个掩码 <code>mask</code>，该掩码的二进制数值为 <code>10101010...</code>，即所有奇数位都为 1，偶数位都为 0。</li>
<li>然后，通过位运算将 <code>mask</code> 扩展到 32 位，得到一个可以用来检测所有奇数位的掩码。</li>
<li>最后，将输入的数值 <code>x</code> 与 <code>mask</code> 做 “&amp;” 运算，得到所有奇数位的值，然后将这个值与 <code>mask</code> 做 “^” 运算，得到所有奇数位为 0 的值。如果这个值等于 0，则说明所有奇数位都为 1，返回 1；否则返回 0。</li>
</ol>
<p>该代码中，使用了 4 次位运算符：”|”, “&lt;&lt;”, “&amp;” 和 “^”，没有使用除法、乘法等高级运算符。因此，代码满足了题目的要求，使用的最大运算符次数为 4 + 4 + 2 + 2 &#x3D; 12，符合最大运算符次数的限制。同时，该代码可以处理输入的数值为任意 32 位整数的情况，且能够正确地返回 1 或 0。</p>
<h2 id="答案-3"><a href="#答案-3" class="headerlink" title="答案"></a>答案</h2><p>int allOddBits(int x) {<br>  int mask &#x3D; 0xAA;<br>  mask |&#x3D; mask &lt;&lt; 8;<br>  mask |&#x3D; mask &lt;&lt; 16;<br>  return !((x &amp; mask) ^ mask);<br>}</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>实验</tag>
      </tags>
  </entry>
  <entry>
    <title>2022ISCC练习题</title>
    <url>/2023/04/27/2022ISCC%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>ISCC</tag>
      </tags>
  </entry>
</search>
