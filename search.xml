<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>3.12周赛wp</title>
    <url>/2023/03/12/3-12%E5%91%A8%E8%B5%9Bwp/</url>
    <content><![CDATA[<h1 id="WP-0312"><a href="#WP-0312" class="headerlink" title="WP(0312)"></a>WP(0312)</h1><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="MISC1"><a href="#MISC1" class="headerlink" title="MISC1"></a>MISC1</h3><p>明文攻击+修改图片高度</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312144855304.png" alt="image-20230312144855304"></p>
<p>CRC32相同拖进工具里明文爆破3分钟左右</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312145649291.png" alt="image-20230312145649291"></p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312145804420.png" alt="image-20230312145804420"></p>
<h3 id="MISC2"><a href="#MISC2" class="headerlink" title="MISC2"></a>MISC2</h3><p>题目来自[HGAME 2022 week1]好康的流量</p>
<p>pcapng就用Wireshark打开看一看</p>
<p>搜索字符串png发现可疑流量</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312150642091.png" alt="image-20230312150642091"></p>
<p>继续追踪TCP流</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312150703138.png" alt="image-20230312150703138"></p>
<p>很明显是base64转图片，找个在线网志转一下就OK</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312150738688.png" alt="image-20230312150738688"></p>
<p>转换后的图片没有藏文件，在stegslove里的Green plane2通道发现了条形码</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312151152092.png" alt="image-20230312151152092"></p>
<p>条形码识别拿到第一串flag</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312151342616.png" alt="image-20230312151342616"></p>
<p>第二串flag在LSB中也可以看到，或者用zsteg -a 无脑输出</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312151556915.png" alt="image-20230312151556915"><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312151824219.png" alt="image-20230312151824219"></p>
<h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="CRYPTO1"><a href="#CRYPTO1" class="headerlink" title="CRYPTO1"></a>CRYPTO1</h3><p>签到题，大家都写出来就不写wp了</p>
<h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p><a href="https://zhuanlan.zhihu.com/p/450180396">RSA —— 经典的非对称加密算法 - 知乎 (zhihu.com)</a></p>
<p>解题脚本</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import libnum</span><br><span class="line">p = 141493587653297411370439677105095474506267822697001438051041895587903396514427461466979497141218213971690310610514467813146676842622743398790253412530819749118406134020947115559682593610342763888104969622973887741207742252760222498680896216682602158136788796526168985621624735704961525874105354623989072264981</span><br><span class="line">q = 111441439477838955803597483896717666754532380278114130983843648670032762436607561052410587524915150904926002034830888185361650817789453762849839552420521067076892846499981550153493686351516888441312325540874518004148842425315229417788597821758537506532889890486063082554704330240793974476699063453282978886249</span><br><span class="line">c = 5079028827869590362000738880301174705093432869418229030159524009544135123601838083162186012939657219639413807233474698696910473121742000239640600292625130736396432402798048160699294611561735918851833555240411603368351677461523270039409765030657943566974099009072220652270860050596240753142886589936267208762755667491046856428335946408740914977272214355515294978180415824639164370758420558281118779203031611474436168706576433173184518313609380881414206683447702818891792028867192446462828374301387165986209056247548070890174500701700183255023679504718963526079877860379115328770781897622621806437172112937589750896340</span><br><span class="line">e = 65537</span><br><span class="line">n = p * q</span><br><span class="line">phi = (p - 1) * (q - 1)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = pow(c, d, n)</span><br><span class="line">print(libnum.n2s(int(m)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><p>IDA查看字符串</p>
<h3 id="PYreverse"><a href="#PYreverse" class="headerlink" title="PYreverse"></a>PYreverse</h3><p>python打包的exe，直接ida反汇编不太行</p>
<p><a href="https://zhuanlan.zhihu.com/p/394049570">Pyhon解包及反编译: PyInstaller Extractor+uncompyle6 - 知乎 (zhihu.com)</a></p>
<p>需要的工具文章里写的很详细</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312161228590.png" alt="image-20230312161228590"></p>
<p>我这里是需要补全这个magic head </p>
<p>第一步找到struct和程序同名文件 用010打开</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312161337505.png" alt="image-20230312161337505"></p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312161347466.png" alt="image-20230312161347466"></p>
<p>struct里的这部分原文件里是没有的，将它插入进去改文件后缀位pyc就可</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312161446383.png" alt="image-20230312161446383"></p>
<p>反编译之后异或就是flag</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312162612270.png" alt="image-20230312162612270"></p>
<h3 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h3><p><a href="https://blog.csdn.net/m0_52164435/article/details/124871122?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-124871122-blog-112414254.pc_relevant_3mothn_strategy_and_data_recovery&spm=1001.2101.3001.4242.1&utm_relevant_index=3">ida使用技巧之动态调试_ida动态调试_parafish_0的博客-CSDN博客</a></p>
<p>主函数很简单，看的也很清楚</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/29032258/1678112464671-9b0820c7-07f9-47c2-b12c-0c3ebe0a0c8b.png" alt="image.png"></p>
<p>题目并没有给你现成的地图，需要自己简单的调试一下，在check函数里面定义了迷宫的规则，wsad控制上下左右</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/29032258/1678112500130-4fbf76f3-4dc8-4ef0-98d9-c7049eecd792.png" alt="image.png"></p>
<p>提取地图</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312162215066.png" alt="image-20230312162215066"></p>
<p>CreatMap函数里写的也很清楚是16x16规格的迷宫</p>
<p>提取出来画个图走一遍就好</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">maze = [<span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,</span><br><span class="line"><span class="built_in">    0,</span>   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    0,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    0,</span>   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    0,</span>   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    0,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,</span><br><span class="line"><span class="built_in">    0,</span>   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    0,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    0,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,</span><br><span class="line"><span class="built_in">    0,</span>   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    0,</span>   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line"><span class="built_in">    1,</span>   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>]</span><br><span class="line"><span class="title">for i in range(len(maze)):</span></span><br><span class="line"><span class="title">    if i % 16 == 0:</span></span><br><span class="line">        print()</span><br><span class="line"><span class="title">    else:</span></span><br><span class="line">        print(maze[i],end=&#x27; &#x27;)</span><br><span class="line">import hashlib</span><br><span class="line">m = &#x27;wwdddwwwaaawwwwwwwwwddddssssdddssdsssssssdddwwwwddsssd&#x27;</span><br><span class="line">print()</span><br><span class="line">print(&#x27;SLsec&#123;&#x27;+hashlib.md5(m.encode(encoding=&#x27;UTF-<span class="number">8</span>&#x27;)).hexdigest()+&#x27;&#125;&#x27;)</span><br><span class="line"><span class="meta">#flag = SLsec&#123;a8622109e2fb1296e06d5eed6f78f954&#125;</span></span><br><span class="line"><span class="meta">#maze = wwdddwwwaaawwwwwwwwwddddssssdddssdsssssssdddwwwwddsssd</span></span><br></pre></td></tr></table></figure>

<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$$$$_</span>) &amp;&amp; <span class="variable">$$$$_ </span>== <span class="number">5614</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num </span>= <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>前半部分$$$$_ 就是一个字符传递例如：_&#x3D;a1&amp;a1&#x3D;a2那么a2就是$$_</p>
<p>Playload:_&#x3D;a1&amp;a1&#x3D;a2&amp;a2&#x3D;a3&amp;a3&#x3D;5614</p>
<p>下面一部分 num !&#x3D; 5614 可以使用十六进制绕过但</p>
<p>preg_match(“&#x2F;[a-z]|.&#x2F;i”, $num)又禁用了十六进制前缀中的x所以只能使用八进制来绕过但if(!strpos($num, “0”)){检测头是否为0接着改010574</p>
<p>(intval($num,0)&#x3D;&#x3D;&#x3D;4476)这个就是没别的办法只能寻找特殊字符绕过了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);	</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">256</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="number">1</span>; <span class="variable">$j</span>++) &#123; </span><br><span class="line">		<span class="variable">$a</span>=<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>);</span><br><span class="line">		<span class="variable">$num</span> =<span class="variable">$a</span>.<span class="string">&#x27;010574&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="variable">$num</span>.<span class="string">&#x27;&lt;/br&gt;&#x27;</span>;&#125;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>跑出来就是 字符+可以用  playload:</p>
<p>GET  ?num&#x3D;+010574</p>
<p>POST:  _&#x3D;a1&amp;a1&#x3D;a2&amp;a2&#x3D;a3&amp;a3&#x3D;5614</p>
]]></content>
      <categories>
        <category>周赛</category>
      </categories>
      <tags>
        <tag>周赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>2022ISCC练习题</title>
    <url>/2023/04/27/2022ISCC%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Garden"><a href="#Garden" class="headerlink" title="Garden"></a>Garden</h1><p>下载文件是pyc文件，直接反编译</p>
<p>反编译网站<a href="https://www.toolnb.com/tools/pyc.html">pyc反编译 - 爱资料工具 (toolnb.com)</a></p>
<p>反编译源码：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.5.0</span></span><br><span class="line"><span class="comment"># Python bytecode 2.7 (62211)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 2.7.5 (default, Nov 16 2020, 22:23:17)</span></span><br><span class="line"><span class="comment"># [GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]</span></span><br><span class="line"><span class="comment"># Embedded file name: garden.py</span></span><br><span class="line"><span class="comment"># Compiled at: 2021-02-28 12:29:29</span></span><br><span class="line">import platform, sys, marshal, types</span><br><span class="line"></span><br><span class="line">def check(s):</span><br><span class="line">    f = <span class="string">&#x27;2(88\x006\x1a\x10\x10\x1aIKIJ+\x1a\x10\x10\x1a\x06&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> len(s) != len(f):</span><br><span class="line">        return False</span><br><span class="line">    checksum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(f, s):</span><br><span class="line">        checksum += ord(b) ^ ord(a) ^ <span class="number">123</span></span><br><span class="line"></span><br><span class="line">    return checksum == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.version_info.major != <span class="number">2</span> or sys.version_info.minor != <span class="number">7</span>:</span><br><span class="line">    sys.<span class="keyword">exit</span>(<span class="string">&#x27;\xe8\xaf\x95\xe8\xaf\x95 Python 2.7.&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">    sys.<span class="keyword">exit</span>(<span class="string">&#x27;usage: bronze.pyc &lt;flag&gt;&#x27;</span>)</span><br><span class="line">flag = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> len(flag) &gt;= <span class="number">32</span>:</span><br><span class="line">    print <span class="string">&#x27;\xe5\xa4\xaa\xe9\x95\xbf\xe4\xba\x86.&#x27;</span></span><br><span class="line">    sys.<span class="keyword">exit</span>(<span class="number">1</span>)</span><br><span class="line">alphabet = set(<span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#123;&#125;!@#$%+&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="keyword">if</span> ch not <span class="keyword">in</span> alphabet:</span><br><span class="line">        print <span class="string">&#x27;\xe4\xb8\x8d\xe5\xaf\xb9.&#x27;</span></span><br><span class="line">        sys.<span class="keyword">exit</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> check(flag):</span><br><span class="line">    print <span class="string">&#x27;\xe5\xb0\xb1\xe6\x98\xaf\xe8\xbf\x99\xe4\xb8\xaa!&#x27;</span></span><br><span class="line">    sys.<span class="keyword">exit</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print <span class="string">&#x27;\xe6\x90\x9e\xe9\x94\x99\xe4\xba\x86.&#x27;</span></span><br><span class="line">    sys.<span class="keyword">exit</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>注意到check()函数的功能是校对flag的，所以关键信息就在check()函数中。</p>
<p>下面这段代码是将输入的字符串和flag逐个比较后将其ASCII码按异或运算后保存在checksum中。</p>
<p><strong>注释</strong></p>
<p>在Python中，<code>zip()</code>是一个内置函数，它将多个序列中对应位置的元素打包成元组，然后返回由这些元组组成的迭代器。在这个脚本中，<code>zip(f, s)</code>将两个字符串 <code>f</code> 和 <code>s</code> 中的对应字符打包成元组，用于计算校验和。例如，如果 <code>f = &quot;abc&quot;</code>，<code>s = &quot;123&quot;</code>，则 <code>zip(f, s)</code> 返回的是一个迭代器 <code>((&#39;a&#39;, &#39;1&#39;), (&#39;b&#39;, &#39;2&#39;), (&#39;c&#39;, &#39;3&#39;))</code>。</p>
<p>在Python中，<code>ord()</code>是一个内置函数，它用于将一个字符（一个长度为1的字符串）转换为它在字符集中的整数表示。例如，<code>ord(&#39;A&#39;)</code> 返回的值是 65，因为大写字母 A 在 ASCII 码表中的十进制表示为 65。</p>
<p>直接将2(88\x006\x1a\x10\x10\x1aIKIJ+\x1a\x10\x10\x1a\x06和123进行异或</p>
<p>脚本：</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">f</span> = <span class="string">&#x27;2(88\x006\x1a\x10\x10\x1aIKIJ+\x1a\x10\x10\x1a\x06&#x27;</span></span><br><span class="line"><span class="variable">a</span> = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="variable"><span class="class">result</span></span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="variable">for</span> <span class="variable">ch</span> <span class="variable"><span class="keyword">in</span></span> <span class="variable">f</span>:</span><br><span class="line">    <span class="variable"><span class="class">result</span></span> += <span class="function"><span class="title">chr</span>(<span class="title"><span class="built_in">ord</span></span>(<span class="variable">ch</span>) ^ <span class="variable">a</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span>(<span class="variable"><span class="class">result</span></span>)</span></span><br></pre></td></tr></table></figure>

<p>ISCC{Makka2021Pakka}</p>
<h1 id="Amy’s-Code"><a href="#Amy’s-Code" class="headerlink" title="Amy’s Code"></a>Amy’s Code</h1><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304302230724.png" alt="image-20230430223008649"></p>
<p>没壳，32位，用IDA 32位打开</p>
<p>异或</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304271034097.png" alt="image-20230427103452070"></p>
<p>相加</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304271035523.png" alt="image-20230427103552486"></p>
<p>先减再异或得到flag</p>
<p>脚本：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">v9</span>=[&#x27;&#x27;]*<span class="number">20</span></span><br><span class="line"><span class="attribute">flag</span>=[&#x27;&#x27;]*<span class="number">20</span></span><br><span class="line"><span class="attribute">v9</span>[<span class="number">0</span>] = <span class="number">149</span>;</span><br><span class="line"><span class="attribute">v9</span>[<span class="number">1</span>] = <span class="number">169</span>;</span><br><span class="line"><span class="attribute">v9</span>[<span class="number">2</span>] = <span class="number">137</span>;</span><br><span class="line"><span class="attribute">v9</span>[<span class="number">3</span>] = <span class="number">134</span>;</span><br><span class="line"><span class="attribute">v9</span>[<span class="number">4</span>] = <span class="number">212</span>;</span><br><span class="line"><span class="attribute">v9</span>[<span class="number">5</span>] = <span class="number">188</span>;</span><br><span class="line"><span class="attribute">v9</span>[<span class="number">6</span>] = <span class="number">177</span>;</span><br><span class="line"><span class="attribute">v9</span>[<span class="number">7</span>] = <span class="number">184</span>;</span><br><span class="line"><span class="attribute">v9</span>[<span class="number">8</span>] = <span class="number">177</span>;</span><br><span class="line"><span class="attribute">v9</span>[<span class="number">9</span>] = <span class="number">197</span>;</span><br><span class="line"><span class="attribute">v9</span>[<span class="number">10</span>] = <span class="number">192</span>;</span><br><span class="line"><span class="attribute">v9</span>[<span class="number">11</span>] = <span class="number">179</span>;</span><br><span class="line"><span class="attribute">v9</span>[<span class="number">12</span>] = <span class="number">153</span>;</span><br><span class="line"><span class="attribute">v9</span>[<span class="number">13</span>] = <span class="number">167</span>;</span><br><span class="line"><span class="attribute">v9</span>[<span class="number">14</span>] = <span class="number">186</span>;</span><br><span class="line"><span class="attribute">v9</span>[<span class="number">15</span>] = <span class="number">172</span>;</span><br><span class="line"><span class="attribute">v9</span>[<span class="number">16</span>] = <span class="number">164</span>;</span><br><span class="line"><span class="attribute">v9</span>[<span class="number">17</span>] = <span class="number">174</span>;</span><br><span class="line"><span class="attribute">v9</span>[<span class="number">18</span>] = <span class="number">103</span>;</span><br><span class="line"><span class="attribute">v9</span>[<span class="number">19</span>] = <span class="number">184</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">v6</span>=list(&#x27;LWHFUENGDJGEFHYDHIGJ&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">for</span> i in range(len(v9)):</span><br><span class="line">     <span class="attribute">flag</span>[i]=v9[i]-ord(v6[i])</span><br><span class="line">     <span class="attribute">flag</span>[i]=flag[i]^i</span><br><span class="line">     <span class="attribute">print</span>(chr(flag[i]),end=&#x27;&#x27;)</span><br></pre></td></tr></table></figure>

<p>脚本优化：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">v9 = <span class="selector-attr">[149, 169, 137, 134, 212, 188, 177, 184, 177, 197, 192, 179, 153, 167, 186, 172, 164, 174, 103, 184]</span></span><br><span class="line">v6 = <span class="built_in">list</span>(<span class="string">&#x27;LWHFUENGDJGEFHYDHIGJ&#x27;</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="selector-attr">[chr((v9[i]</span> - <span class="built_in">ord</span>(v6<span class="selector-attr">[i]</span>)) ^ i) <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v9))]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&#x27;&#x27;</span>.join(flag)</span></span>)</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong></p>
<p>每个人v9不一样</p>
<p>ISCC{reverse_RogLt2}</p>
<h1 id="GetTheTable"><a href="#GetTheTable" class="headerlink" title="GetTheTable"></a>GetTheTable</h1><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304271108853.png" alt="image-20230427110831811"></p>
<p>没有壳，64位</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304271117803.png" alt="image-20230427111759780"></p>
<p>题目提示为：采用正确的解密软件就能快速解密</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304271123294.png" alt="image-20230427112333263"></p>
<p>123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</p>
<p>上述为base58编码</p>
<p>base58</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304271118022.png" alt="image-20230427111833998"></p>
<p>ISCC{Jvb9qzP910IPv}</p>
<h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304271128633.png" alt="image-20230427112814589"></p>
<p>无壳，32位</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304271710144.png" alt="image-20230427171009071"></p>
<p>上述为plaintext &#x3D; [-55, -53, -60, -41, -81, -56, -63, 1, 23, 23, 8, 60, 43, 58, 20, 23, 57, 37, 53, 34, 61, 14, 24, 22, 10]</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304271711255.png" alt="image-20230427171116233"></p>
<p>上述为key &#x3D; [82, 69, 86, 69, 82, 83, 69] <strong>REVERSE换成ASCII码就是左边数字</strong></p>
<p>进入mix函数</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304271712020.png" alt="image-20230427171225988"></p>
<p>将这段代码反过来运算</p>
<p>脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cpt = [<span class="number">67</span>,-<span class="number">33</span>,<span class="number">20</span>,<span class="number">3</span>,<span class="number">13</span>,<span class="number">44</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">23</span>,<span class="number">8</span>,-<span class="number">4</span>,<span class="number">43</span>,-<span class="number">6</span>,<span class="number">20</span>,<span class="number">23</span>,-<span class="number">7</span>,<span class="number">37</span>,-<span class="number">11</span>,<span class="number">34</span>,<span class="number">61</span>,-<span class="number">50</span>,<span class="number">24</span>,<span class="number">22</span>,<span class="number">10</span>]</span><br><span class="line">mix = [<span class="number">82</span>,<span class="number">69</span>,<span class="number">86</span>,<span class="number">69</span>,<span class="number">82</span>,<span class="number">83</span>,<span class="number">69</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mix)):</span><br><span class="line">    mix[k] %= <span class="number">64</span></span><br><span class="line"><span class="comment">#加密用的密匙都是取余后的，所以先取余操作</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cpt)):</span><br><span class="line">    <span class="keyword">if</span> mix[n%<span class="number">7</span>] &amp; <span class="number">1</span>:</span><br><span class="line">        cpt[n] -= <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cpt[n] -= <span class="number">1</span></span><br><span class="line"><span class="comment">#先逆加一和加二</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cpt)//<span class="number">2</span>):</span><br><span class="line">    x = cpt[m]</span><br><span class="line">    cpt[m] = cpt[<span class="built_in">len</span>(cpt)-<span class="number">1</span>-m]</span><br><span class="line">    cpt[<span class="built_in">len</span>(cpt)-<span class="number">1</span>-m] = x</span><br><span class="line"><span class="comment">#对称互换</span></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cpt)):</span><br><span class="line">    cpt[l] -= mix[l%<span class="number">7</span>]</span><br><span class="line"><span class="comment">#逆自加，既自减</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cpt)-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    cpt[j] += cpt[j+<span class="number">1</span>]</span><br><span class="line"><span class="comment">#这一步需要从后往前，因为最后一个字符是不变的</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cpt)):</span><br><span class="line">    cpt[i] += <span class="number">64</span></span><br><span class="line"><span class="comment">#加回64</span></span><br><span class="line"><span class="built_in">print</span>(cpt)</span><br><span class="line"><span class="comment">#列表形式输出（ASCII码形式）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cpt)):</span><br><span class="line">    cpt[i] = <span class="built_in">chr</span>(cpt[i])</span><br><span class="line"><span class="comment">#转为字符</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span>.join(cpt)<span class="comment">#串成串</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<h1 id="奇特的信息"><a href="#奇特的信息" class="headerlink" title="奇特的信息"></a>奇特的信息</h1><p>Gyzvecy ke WvyVKT!</p>
<p>W’zz by reso dsbdkwksky tzjq teo kly ujr. Teo keujr, gy joy dksurwmq bjdwv vorakeqojalr jmu wkd jaazwvjkwemd. Vorakeqojalr ljd j zemq lwdkeor, jzklesql gwkl kly juxymk et vecaskyod wk ljd qekkym oyjzzr vecazwvjkyu. Decy dwcazy ezu vwalyod joy kly Vjydjo vwalyo, kly Xwqymyoy vwalyo, kly dsbdkwkskwem vwalyo, glwvl wd klwd emy, jmu de em. Jzcedk jzz et klydy vwalyod joy yjdwzr boeiym keujr gwkl kly lyza et vecaskyod. Decy myg ymvorakwem cykleud joy JYD, kly vsooymk dkjmujou teo ymvorakwem, jzemq gwkl ODJ. Vorakeqojalr wd j xjdk twyzu jmu wd xyor wmkyoydkwmq klesql. De iwvi bjvi, oyju sa em decy veez vwalyod jmu ljxy tsm!</p>
<p>El jmu teo reso oyveoud cr mjcy wd WvyVKT{jzgjrd_zwdkym_ke_reso_dsbdkwksky_tzjqd}.</p>
<p>复制下来</p>
<p>粘贴到<a href="https://quipqiup.com/">quipqiup - cryptoquip and cryptogram solver</a></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304271901743.png" alt="image-20230427190157689"></p>
<h1 id="海市蜃楼"><a href="#海市蜃楼" class="headerlink" title="海市蜃楼"></a>海市蜃楼</h1><p>下载文件，文件名为zip，加上后缀zip，得到</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304271916736.png" alt="image-20230427191653699"></p>
<p>然后把docx改成zip，得到</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304271917736.png" alt="image-20230427191731706"></p>
<p>解压</p>
<p>搜索flag</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304271918905.png" alt="image-20230427191817877"></p>
<p>用Excel打开这个xml文件</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304271918207.png" alt="image-20230427191858176"></p>
<p>ISCC{zheshishui}</p>
<h1 id="美人计"><a href="#美人计" class="headerlink" title="美人计"></a>美人计</h1><p>下载之后解压文件</p>
<p>得到一张图片，一张二维码</p>
<p>将docx文件用写字板打开</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304271945707.png" alt="image-20230427194544649"></p>
<p>小码：U2FsdGVkX19eOY&#x2F;pDh8+vPAcvfkLi1XLUneVzjLLOMul53sKK8UpobdCOiPIv4KE</p>
<p>大码：U2FsdGVkX1&#x2F;Ka+sScszwQkwhO+VLiJwV&#x2F;6IFg5W+TfNHGxG2qZsIr2iwMwb9X9Iu 3GuGWmPOtO27z8vNppD2D50fwsD+8VWhdtW9J4cewYivH&#x2F;Z&#x2F;7GoUvcJXJMrvf+vu +CBqWDGp6HWd0e5whGhuzlK0ZtBcDZdPDSIHA7+GuUlifp8PcFCtJPgiuk143REE +pKFiSJXolXLR1vJCdGY9w5mXFbiWPrb2U7r&#x2F;v5noP8&#x3D;</p>
<p>图片拖入010，拉到最后</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304271931210.png" alt="image-20230427193101178"></p>
<p>Try AES and you will get the flag</p>
<p>key：ISCC2021</p>
<p>解码网站<a href="https://www.sojson.com/encrypt_des.html">在线DES加密 | DES解密- 在线工具 (sojson.com)</a></p>
<p>第二段密码三次解密之后：</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304272002039.png" alt="image-20230427200223009"></p>
<p>y0u_h@ve_fal1en_intO_tHe_tr@p_0f_tHe_be@uty_!</p>
<p>不是flag，对第一段进行解密</p>
<p>DES解密得</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304272004813.png" alt="image-20230427200412779"></p>
<p>ISCC{be@uty_1ike$_Y0u_2O2lISCC}</p>
<h1 id="我的折扣是多少"><a href="#我的折扣是多少" class="headerlink" title="我的折扣是多少"></a>我的折扣是多少</h1><p>给了三个文件</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304272022638.png" alt="image-20230427202211591"></p>
<p>give.exe打开，闪的很慢，随手截到</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304272023057.png" alt="image-20230427202302033"></p>
<p>pass1{\u006b\u0072\u0077}</p>
<p>\u开头，明显是<strong>Unicode编码</strong></p>
<p>解码网址<a href="https://c.runoob.com/front-end/3602/">在线 Unicode 编码转换 | 菜鸟工具 (runoob.com)</a></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304272026080.png" alt="image-20230427202649053"></p>
<p>pass1{krw}</p>
<p>me.zip拖入010</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304272023835.png" alt="image-20230427202354808"></p>
<p>得到cGFzczJ7Z2NjNjY2fQ&#x3D;&#x3D;</p>
<p>base64解密<a href="https://tool.ip138.com/base64">https://tool.ip138.com/base64</a></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304272024124.png" alt="image-20230427202431094"></p>
<p>pass2{gcc666}</p>
<p>因为开头是pass，猜测是加密txt密码，两个连起来，打开加密txt：eW91Zm91bmRtZT8&#x3D;</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304272029679.png" alt="image-20230427202910653"></p>
<p>解码base64</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304272029707.png" alt="image-20230427202954677"></p>
<p>用MP3Stego打开,用法CSDN</p>
<p>MP3StegoDecode.exe -X -P  youfoundme? discount.mp3</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304272055252.png" alt="image-20230427205518224"></p>
<p>base32解码</p>
<p>ISCC{Yourdiscount2.15}</p>
<h1 id="Sad-Code"><a href="#Sad-Code" class="headerlink" title="Sad Code"></a>Sad Code</h1><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304280921856.png" alt="image-20230428092148772"></p>
<p>无壳，32位</p>
<p>找到main函数</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304280934583.png" alt="image-20230428093429548"></p>
<p>解题关键</p>
<p>放入脚本，先解出a[0]~a[6]和b然后求flag</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">from</span> z3 import *</span><br><span class="line"></span><br><span class="line"><span class="attribute">v14</span> =<span class="meta"> [Int(&quot;v14%s&quot; % i) for i in range(8)]</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">s</span> = Solver()</span><br><span class="line"></span><br><span class="line"><span class="attribute">s</span>.add(v14[<span class="number">2</span>] + <span class="number">7</span> * v14[<span class="number">1</span>] - <span class="number">4</span> * v14[<span class="number">0</span>] - <span class="number">2</span> * v14[<span class="number">3</span>] == <span class="number">0</span>x212278F95)</span><br><span class="line"></span><br><span class="line"><span class="attribute">s</span>.add(<span class="number">5</span> * v14[<span class="number">3</span>] + <span class="number">3</span> * v14[<span class="number">2</span>] - v14[<span class="number">1</span>] - <span class="number">2</span> * v14[<span class="number">0</span>] == <span class="number">0</span>x146E7D971)</span><br><span class="line"></span><br><span class="line"><span class="attribute">s</span>.add(<span class="number">2</span> * v14[<span class="number">1</span>] + <span class="number">8</span> * v14[<span class="number">3</span>] + <span class="number">10</span> * v14[<span class="number">0</span>] - <span class="number">5</span> * v14[<span class="number">2</span>] == <span class="number">0</span>x419AB1349)</span><br><span class="line"></span><br><span class="line"><span class="attribute">s</span>.add(<span class="number">7</span> * v14[<span class="number">0</span>] + <span class="number">15</span> * v14[<span class="number">1</span>] - <span class="number">3</span> * v14[<span class="number">3</span>] - <span class="number">2</span> * v14[<span class="number">2</span>] == <span class="number">0</span>x7C35A4CA7)</span><br><span class="line"></span><br><span class="line"><span class="attribute">s</span>.add(<span class="number">15</span> * v14[<span class="number">4</span>] + <span class="number">35</span> * v14[<span class="number">7</span>] - v14[<span class="number">5</span>] - v14[<span class="number">6</span>] == <span class="number">0</span>xF867F3C4C)</span><br><span class="line"></span><br><span class="line"><span class="attribute">s</span>.add(<span class="number">38</span> * v14[<span class="number">6</span>] + v14[<span class="number">4</span>] + v14[<span class="number">7</span>] - <span class="number">24</span> * v14[<span class="number">5</span>] == <span class="number">0</span>x7AFCBCA32)</span><br><span class="line"></span><br><span class="line"><span class="attribute">s</span>.add(<span class="number">38</span> * v14[<span class="number">5</span>] + <span class="number">32</span> * v14[<span class="number">4</span>] - v14[<span class="number">6</span>] - v14[<span class="number">7</span>] == <span class="number">0</span>x139360369D)</span><br><span class="line"></span><br><span class="line"><span class="attribute">s</span>.add(v14[<span class="number">4</span>] + <span class="number">41</span> * v14[<span class="number">6</span>] - v14[<span class="number">5</span>] - <span class="number">25</span> * v14[<span class="number">7</span>] == <span class="number">0</span>x653CABE3E)</span><br><span class="line"></span><br><span class="line"><span class="attribute">v4</span> =<span class="meta"> []</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">if</span> (s.check() == sat):</span><br><span class="line"></span><br><span class="line">    <span class="attribute">m</span> = s.model()</span><br><span class="line"></span><br><span class="line">    <span class="attribute">for</span> i in range(<span class="number">8</span>):</span><br><span class="line">        <span class="attribute">v4</span>.append(hex(int(str(m[v14[i]])))[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="attribute">print</span>(v4)</span><br><span class="line"></span><br><span class="line"><span class="attribute">for</span> i in range(<span class="number">8</span>):</span><br><span class="line"></span><br><span class="line">    <span class="attribute">for</span> j in range(<span class="number">4</span>):</span><br><span class="line">        <span class="attribute">print</span>(chr(int(v4[i][j * <span class="number">2</span>:j * <span class="number">2</span> + <span class="number">2</span>], <span class="number">16</span>)), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304281017541.png" alt="image-20230428101704499"></p>
<p>ISCC{ZFHZWWAA-SLSCQABG-LYIZNRQP}</p>
<h1 id="隐秘的信息"><a href="#隐秘的信息" class="headerlink" title="隐秘的信息"></a>隐秘的信息</h1><p>题目给的提示是base64，解密出来是压缩包里面图片的密码</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304281035205.png" alt="image-20230428103514167"></p>
<p>easy_to_find_the_flag</p>
<p>用stegsolve打开，LSB隐写</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304281125612.png" alt="image-20230428112500570"></p>
<p>e92a68686f688aed ec8929064de62ded<br>4b2a87260888a92f 4b4fbffc01f8007f<br>fffc7e3fe00fff00 71ffffffffffffff</p>
<p>网站<a href="https://cyberchef.org/">CyberChef</a></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304281125089.png" alt="345cd0346516216ce9ab2a689a0e882"></p>
<p>然后</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304281126374.png" alt="image-20230428112612326"></p>
<p>注意删掉前面的111</p>
<p>得到ISCC{DWodIH2o1ojYT90DEIzZ}</p>
<h1 id="小明的表情包"><a href="#小明的表情包" class="headerlink" title="小明的表情包"></a>小明的表情包</h1><p>根据提示AVARGRRA AVARGL AVAR为凯撒密码</p>
<p>枚举解密发现</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304281616212.png"></p>
<p>即1999（年份），还差日和月</p>
<p>用C++脚本输出所以日月年，弄一个字典</p>
<p>脚本如下：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">if</span>(i==<span class="number">2</span>)</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">28</span>;j++)</span><br><span class="line">            <span class="keyword">printf</span>(<span class="string">&quot;%02d%02d1999\n&quot;</span>,j,i);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">4</span>||i==<span class="number">6</span>||i==<span class="number">9</span>||i==<span class="number">11</span>)</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">30</span>;k++)</span><br><span class="line">            <span class="keyword">printf</span>(<span class="string">&quot;%02d%02d1999\n&quot;</span>,k,i);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>;l&lt;=<span class="number">31</span>;l++)</span><br><span class="line">            <span class="keyword">printf</span>(<span class="string">&quot;%02d%02d1999\n&quot;</span>,l,i);</span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后打开ARCHPR，字典爆破</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304281637384.png" alt="image-20230428163724340"></p>
<p>密码为07071999</p>
<p>得到的图片无法打开</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304281638370.png" alt="image-20230428163806342"></p>
<p>拖入010发现该文件没有文件头，经过查询可知，JPG文件头为FF D8 FF</p>
<p>把前面的00 00 00 化成上述文件头即可</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304281641747.png" alt="image-20230428164150720"></p>
<p>保存之后打开图片</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304281642124.png" alt="image-20230428164208084"></p>
<p>ISCC{Nyuuiitt}</p>
<h1 id="藏在星空中的诗"><a href="#藏在星空中的诗" class="headerlink" title="藏在星空中的诗"></a>藏在星空中的诗</h1><p>解压出来文件，zip，txt，psd</p>
<p>psd文件用Adobe Photoshop打开</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304281655776.png" alt="image-20230428165522622"></p>
<p>可以看到箭头指的顺序是13524</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304281656674.png" alt="image-20230428165609647"></p>
<p>刚好TXT文件里面有五个，连在一起得到</p>
<p>☆✪٭☪✲🟔⍣☪🟐⍣✦✫🌠✡🞱✡🟇⍟⍟✸🟌🟔≛🟌✦</p>
<p><strong>上述方法用了好几次都没有解密成功</strong></p>
<p>用字典爆破</p>
<p>下面代码是输出所有5个排在排列方式</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">import itertools</span><br><span class="line"></span><br><span class="line">str_list = <span class="selector-attr">[<span class="string">&quot;☆✪٭☪✲&quot;</span>, <span class="string">&quot;✡🟇⍟⍟✸&quot;</span>, <span class="string">&quot;🟔⍣☪🟐⍣&quot;</span>, <span class="string">&quot;🟌🟔≛🟌✦&quot;</span>, <span class="string">&quot;✦✫🌠✡🞱&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> itertools<span class="selector-class">.permutations</span>(str_list):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span><span class="selector-class">.join</span>(i))</span><br></pre></td></tr></table></figure>

<p>然后搞一个txt文件，爆破</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304281717228.png" alt="image-20230428171749155"></p>
<p>文件密码：鈽嗏湭侪鈽湶馃煍鈲ｂ槳馃煇鈲ｂ湨鉁煂犫湣馃灡鉁○煙団崯鈲熲湼馃煂馃煍鈮涴煙屸湨</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304281718863.png" alt="image-20230428171821834"></p>
<p>脚本：</p>
<p>密码按照1，2，3，4，5顺序排列</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">key_dict = &#123;<span class="string">&#x27;٭&#x27;</span>:<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;≛&#x27;</span>:<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;⍟&#x27;</span>:<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;⍣&#x27;</span>:<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;★&#x27;</span>:<span class="string">&#x27;E&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;☆&#x27;</span>:<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;☪&#x27;</span>:<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;⚝&#x27;</span>:<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;✡&#x27;</span>:<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;✦&#x27;</span>:<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;✧&#x27;</span>:<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;✪&#x27;</span>:<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;✫&#x27;</span>:<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;✮&#x27;</span>:<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;✯&#x27;</span>:<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;✴&#x27;</span>:<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;🌟&#x27;</span>:<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;🟌&#x27;</span>:<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;🟇&#x27;</span>:<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;🌠&#x27;</span>:<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;🟉&#x27;</span>:<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;🟀&#x27;</span>:<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;🟃&#x27;</span>:<span class="string">&#x27;W&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;🟆&#x27;</span>:<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;🟐&#x27;</span>:<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;🟔&#x27;</span>:<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;✲&#x27;</span>:<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;✸&#x27;</span>:<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;🞱&#x27;</span>:<span class="string">&#x27;&#125;&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag = &quot;按12345的顺序拼起来填入&quot;</span></span><br><span class="line">flag = <span class="string">&quot;☆✪٭☪✲✡🟇⍟⍟✸🟔⍣☪🟐⍣🟌🟔≛🟌✦✦✫🌠✡🞱&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range((len(flag))):</span><br><span class="line">    res = key_dict.<span class="built_in">get</span>(flag[i])</span><br><span class="line">    <span class="built_in">print</span>(res, <span class="attribute">end</span>=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>ISCC{ZDGYDRZBRJJMTI}</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>ISCC</tag>
      </tags>
  </entry>
  <entry>
    <title>2.26周赛wp</title>
    <url>/2023/02/27/2-26%E5%91%A8%E8%B5%9Bwp/</url>
    <content><![CDATA[<h1 id="周赛（02-x2F-26）WP"><a href="#周赛（02-x2F-26）WP" class="headerlink" title="周赛（02&#x2F;26）WP"></a>周赛（02&#x2F;26）WP</h1><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="1-Keyed-Caesar"><a href="#1-Keyed-Caesar" class="headerlink" title="1.Keyed Caesar"></a>1.Keyed Caesar</h3><p>key里字母在字母表中的数字就是偏移量</p>
<p>注意凯撒通常只针对二十六个字母</p>
<h3 id="2-找找看"><a href="#2-找找看" class="headerlink" title="2.找找看"></a>2.找找看</h3><p>这道题是原题</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/14c0f5c3b41d2973085306c546ae83f2.png" alt="image-20230226184700958"></p>
<h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="1-re1"><a href="#1-re1" class="headerlink" title="1.re1"></a>1.re1</h3><p>再简单不过的一道re，考虑到你们寒假有点懈怠（我也是）出的及其入门的题目找点自信</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/7e45dc88c1445c8fd8fd26a73ed9623a.png" alt="image-20230225115535710"></p>
<p>没什么可说的 3替换成e 4替换成a结束</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">&quot;&#123;34sy_r3v3rs3&#125;&quot;</span></span><br><span class="line">flag=flag.replace(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;e&quot;</span>).replace(<span class="string">&quot;4&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SLsec&quot;</span> + flag)</span><br></pre></td></tr></table></figure>

<h3 id="2-re2"><a href="#2-re2" class="headerlink" title="2.re2"></a>2.re2</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/e64c2ac95e77c3fd6f1d11b0f90d28cf.png" alt="image-20230225134651061"></p>
<p>只挑选了 97 98 65 66 这几个数字加24 其他都是减2(比赛的发现判断范围有问题，但是不影响做题)</p>
<p>第一种方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str1[<span class="number">64</span>] = <span class="string">&quot;QJqcaypc]fcjjm&#123;&quot;</span>;</span><br><span class="line">    <span class="comment">//char flag[64] = &quot;SLsec&#123;re_hello&#125;&quot;;</span></span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(str1);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( str1[i] &gt; <span class="number">94</span> &amp;&amp; str1[i] &lt;= <span class="number">96</span> || str1[i] &gt; <span class="number">62</span> &amp;&amp; str1[i] &lt;= <span class="number">64</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            str1[i] -= <span class="number">24</span>;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            str1[i] += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,str1[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种方法是爆破</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> Str1[<span class="number">16</span>] = <span class="string">&quot;QJqcaypc]fcjjm&#123;&quot;</span>;</span><br><span class="line">    <span class="type">char</span> flag[<span class="number">16</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> i,j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">65</span>;j&lt;<span class="number">126</span>;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			flag[i] = j;</span><br><span class="line">			<span class="keyword">if</span> ( flag[i] &gt; <span class="number">96</span> &amp;&amp; flag[i] &lt;= <span class="number">98</span> || flag[i] &gt; <span class="number">64</span> &amp;&amp; flag[i] &lt;= <span class="number">66</span> )</span><br><span class="line">			&#123;</span><br><span class="line">      			flag[i] += <span class="number">24</span>;</span><br><span class="line">			&#125;</span><br><span class="line">    		<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">     			flag[i] -= <span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(flag[i] == Str1[i])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,j);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-re3"><a href="#3-re3" class="headerlink" title="3.re3"></a>3.re3</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/88fbf1bbcc60a47e40d12082cc87aee8.png" alt="image-20230226013043966"></p>
<p>主函数啥都没有，在函数列表发现了名为ques的可疑函数，经过调试程序并没有执行这个函数，思路是修改EIP即可</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/3fd2c04e586fc72ce9df9ac09d6c5d2b.png" alt="image-20230226013109781"></p>
<p>ques函数地址00401520</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/53fcc3b508e43f3b8df9b18b48f099be.png" alt="image-20230226013328290"></p>
<p>修改之后按F9执行就可</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/22986ba5bcf25ac3d16219d9c2bd6a30.png" alt="image-20230226013418305"></p>
<p>HACKIT4FUN</p>
<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="1-神奇的二维码"><a href="#1-神奇的二维码" class="headerlink" title="1.神奇的二维码"></a>1.神奇的二维码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;hex.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> h:</span><br><span class="line">    h = h.read()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./ascii.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> a:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(h), <span class="number">2</span>):</span><br><span class="line">        tmp = <span class="string">&#x27;0x&#x27;</span>+h[i]+h[i+<span class="number">1</span>]</span><br><span class="line">        tmp = <span class="built_in">int</span>(tmp, base=<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">chr</span>(tmp) != <span class="string">&#x27;(&#x27;</span> <span class="keyword">and</span> <span class="built_in">chr</span>(tmp) != <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            a.write(<span class="built_in">chr</span>(tmp))</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x, y = np.loadtxt(<span class="string">&#x27;./ascii.txt&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>, unpack=<span class="literal">True</span>)</span><br><span class="line">plt.plot(x, y,  <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>010打开图片发现很多16进制数据，提取出来转化为字符串就是坐标，再利用坐标画个二维码就可</p>
<p>第二种方法更简单，在linux利用gnuplot插件就能画图</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/cf1eda22ffe32576e96cff640fbb4830.png" alt="image-20230226184450729"></p>
<h3 id="2-re4"><a href="#2-re4" class="headerlink" title="2.re4"></a>2.re4</h3><p>明文爆破压缩包</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/5db0201d0b9c9971100d64f69c9e958a.png" alt="image-20230226191238175"></p>
<p>随后用IDA打开看主函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE *stream; <span class="comment">// ST08_8</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-2Ch]</span></span><br><span class="line">  <span class="type">char</span> ptr[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">40u</span>);</span><br><span class="line">  stream = <span class="built_in">fopen</span>(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="built_in">fread</span>(ptr, <span class="number">1uLL</span>, <span class="number">20uLL</span>, stream);</span><br><span class="line">  <span class="built_in">fclose</span>(stream);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">19</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &amp; <span class="number">1</span> )</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)(ptr[i] &lt;&lt; i));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)(i * ptr[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>没什么加密，顺着逆一下就出了</p>
<p>脚本</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	 <span class="type">int</span> arr[<span class="number">20</span>] = &#123; <span class="number">0</span>, <span class="number">198</span>,<span class="number">232</span>,<span class="number">816</span>,<span class="number">200</span>,<span class="number">1536</span>,<span class="number">300</span>,<span class="number">6144</span>,<span class="number">984</span>,<span class="number">51200</span>,<span class="number">570</span>,<span class="number">92160</span>,<span class="number">1200</span>,<span class="number">565248</span>,<span class="number">756</span>,<span class="number">1474560</span>,<span class="number">800</span>,<span class="number">6291456</span>,<span class="number">1782</span>,<span class="number">65536000</span>&#125;;</span><br><span class="line">	<span class="comment">//a[0]补0保证正常循环</span></span><br><span class="line">	<span class="type">char</span> c;</span><br><span class="line">	<span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">19</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((i &amp; <span class="number">1</span>))</span><br><span class="line">			c = (arr[i] &gt;&gt; i);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			c = (arr[i] / i);</span><br><span class="line">		<span class="built_in">putchar</span>(c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-小狗玩偶"><a href="#3-小狗玩偶" class="headerlink" title="3.小狗玩偶"></a>3.小狗玩偶</h3><p>flag总共两部分，16进制文本里能看到一部分，另一部分在LSB隐写</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/26b95f751f19647737bc484e131a07fd.png" alt="image-20230226185133964"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/95a59a35de4a3338aa59b2d0d15c25db.png" alt="image-20230226185302457"></p>
<h4 id="4-zip"><a href="#4-zip" class="headerlink" title="4.zip"></a>4.zip</h4><p>有密码尝试一下确定不是伪加密，爆破4到7为纯数字成功，打开压缩包是一串编码，16进制解一下就是flag</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/8982f5d79059cc2b18637d5e250508cb.png" alt="image-20230226185650652"></p>
<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="1-web1"><a href="#1-web1" class="headerlink" title="1.web1"></a>1.web1</h3><?PHP 

  show_source(__FILE__);

  ini_set("allow_url_include","on");

  error_reporting(0);

  $file=$_GET['file'];

  $q=$_GET['q'];

  $a = $GET['a'];

  $b = $_GET['b'];

  $c = $_POST['c'];

  $v = $_POST['v'];

  if($q==1 && $q+1 !== 2){ #q==弱比较，不同格式会先转换成同类型再比较，q!+1!==2是强比较必须类型数值完全相同科学计数法绕过即可

​    if($a != $b && md5($a) == md5($b))]]></content>
      <categories>
        <category>周赛</category>
      </categories>
      <tags>
        <tag>周赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>4.22周赛总wp</title>
    <url>/2023/04/23/4-22%E5%91%A8%E8%B5%9B%E6%80%BBwp/</url>
    <content><![CDATA[<h1 id="一根香烟"><a href="#一根香烟" class="headerlink" title="一根香烟"></a>一根香烟</h1><p><a href="http://211.69.16.145:7901/">http://211.69.16.145:7901/</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;heizi&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$a</span>,<span class="number">0</span>,<span class="number">4</span>) == <span class="string">&quot;ding&quot;</span> <span class="keyword">and</span> <span class="title function_ invoke__">substr</span>(<span class="variable">$a</span>,-<span class="number">4</span>,<span class="number">4</span>) == <span class="string">&quot;zhen&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$a</span> == <span class="string">&quot;dingzhen&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>( <span class="string">&quot;Hack!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ding.+?zhen/is&#x27;</span>,<span class="variable">$a</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Hack!!!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;????&quot;</span>);</span><br><span class="line">    &#125;&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>考点：preg_match绕过</p>
<p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">PHP利用PCRE回溯次数限制绕过某些安全限制 | 离别歌 (leavesongs.com)</a></p>
<p>play： POST heizi&#x3D;ding(a*1000000)zhen</p>
<p>SLsec{coossssadagaLLLLLLLL!}</p>
<h2 id="学姐的凝视"><a href="#学姐的凝视" class="headerlink" title="学姐的凝视"></a>学姐的凝视</h2><h2 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h2><p>这道题是西湖论剑2022的原题，网上有大把的wp</p>
<h2 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h2><p>这道题本意是想出难一点的，但由于自身实力不够，不知道写了个什么鸟东西</p>
<p>直接看伪代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input your flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) == <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">      v4[i] = Str[i];</span><br><span class="line">    v4[<span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fun1</span>(v4, <span class="number">8</span>i64, Str1);</span><br><span class="line">    Str2 = <span class="string">&quot;f7fae20f2f0b7facff1281fdd1e8fdf6d14cd4c1&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(Str1, <span class="string">&quot;f7fae20f2f0b7facff1281fdd1e8fdf6d14cd4c1&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">8</span>; ++j )</span><br><span class="line">        v8[j] = Str[j + <span class="number">8</span>];</span><br><span class="line">      v8[<span class="number">9</span>] = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">fun2</span>(v8, v7);</span><br><span class="line">      v13 = <span class="string">&quot;JBUWED&#123;WK&quot;</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v7, <span class="string">&quot;JBUWED&#123;WK&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">15</span>; ++k )</span><br><span class="line">          v5[k] = Str[k + <span class="number">17</span>];</span><br><span class="line">        v12 = (<span class="type">char</span> *)<span class="built_in">fun3</span>(v5, <span class="number">15</span>);</span><br><span class="line">        v11 = <span class="string">&quot;WPrYVgNoQx6vTPNuU8e!&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v12, <span class="string">&quot;WPrYVgNoQx6vTPNuU8e!&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;you are so good!&quot;</span>);</span><br><span class="line">          <span class="built_in">free</span>(v12);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;wrong3!&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;wrong2!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;wrong1!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先就看到flag总共是32位，其中前八位进行了如下加密在fun1里加密</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">  <span class="attribute">v4</span>[i] = Str[i];</span><br><span class="line"><span class="attribute">v4</span>[<span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="attribute">fun1</span>(v4, <span class="number">8</span>i64, Str1);</span><br></pre></td></tr></table></figure>

<p>fun1点进去根据特征值可以判断打出来是sha1加密</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230422141131051.png" alt="image-20230422141131051"></p>
<p>我们知道flag的格式是SLsec{xxxxx}，总共八位，已知6位，所以可以爆破出来前八位</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">known_prefix = <span class="string">&quot;SLsec&#123;&quot;</span></span><br><span class="line">known_hash = <span class="string">&quot;f7fae20f2f0b7facff1281fdd1e8fdf6d14cd4c1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 枚举后两位字符</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        candidate = known_prefix + chr(i) + chr(j)</span><br><span class="line">        candidate_hash = hashlib.sha1(candidate.encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> candidate_hash == known_hash:</span><br><span class="line">            print(<span class="string">&quot;Found the original string: &quot;</span>, candidate)</span><br><span class="line">            <span class="keyword">exit</span>()</span><br></pre></td></tr></table></figure>

<p>接着往下看</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">8</span>; ++j )</span><br><span class="line">        <span class="attribute">v8</span>[j] = Str[j + <span class="number">8</span>];</span><br><span class="line">      <span class="attribute">v8</span>[<span class="number">9</span>] = <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">fun2</span>(v8, v7);</span><br><span class="line">      <span class="attribute">v13</span> = <span class="string">&quot;JBUWED&#123;WK&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>在fun2里加密了flag的第9位到第17位，而且fun2函数也仅仅是一个异或</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">v3 = strlen(<span class="built_in">a1</span>);</span><br><span class="line"> for ( i = <span class="number">0</span>i64<span class="comment">; i &lt; v3; ++i )</span></span><br><span class="line">   <span class="built_in">a2</span>[i] = (<span class="built_in">a1</span>[i] ^ <span class="number">0x66</span>) + <span class="number">66</span>;</span><br></pre></td></tr></table></figure>

<p>解密</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">for</span> <span class="variable">i</span> <span class="variable"><span class="keyword">in</span></span> <span class="variable">str2</span>:</span><br><span class="line">    <span class="variable">flag</span> += <span class="function"><span class="title">chr</span>(<span class="number">0</span><span class="variable">x66</span>^(<span class="title"><span class="built_in">ord</span></span>(<span class="variable">i</span>)-<span class="number">66</span>))</span></span><br></pre></td></tr></table></figure>

<p>接着最后15进行了fun3加密</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">15</span>; ++k )</span><br><span class="line">  v5[k] = Str[k + <span class="number">17</span>];</span><br><span class="line">v12 = (<span class="type">char</span> *)<span class="built_in">fun3</span>(v5, <span class="number">15</span>);</span><br><span class="line">v11 = <span class="string">&quot;WPrYVgNoQx6vTPNuU8e!&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v12, <span class="string">&quot;WPrYVgNoQx6vTPNuU8e!&quot;</span>) )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;you are so good!&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(v12);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>fun3是一个换表的base64，python也就两行代码的事</p>
<p>最后完整exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="comment"># 已知信息</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">known_prefix = <span class="string">&quot;SLsec&#123;&quot;</span></span><br><span class="line">known_hash = <span class="string">&quot;f7fae20f2f0b7facff1281fdd1e8fdf6d14cd4c1&quot;</span></span><br><span class="line"><span class="comment"># 枚举后两位字符</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        candidate = known_prefix + <span class="built_in">chr</span>(i) + <span class="built_in">chr</span>(j)</span><br><span class="line">        candidate_hash = hashlib.sha1(candidate.encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> candidate_hash == known_hash:</span><br><span class="line">            <span class="built_in">print</span>(candidate,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">str2 = <span class="string">&#x27;JBUWED&#123;WK&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str2:</span><br><span class="line">     <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x66</span>^(<span class="built_in">ord</span>(i)-<span class="number">66</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">str1 = <span class="string">&quot;WPrYVgNoQx6vTPNuU8e!&quot;</span></span><br><span class="line">string1 = <span class="string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz+/@!#$&quot;</span></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (base64.b64decode(str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))))</span><br><span class="line"></span><br><span class="line"><span class="comment">#SLsec&#123;confused_soul_run_quietly&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="学姐的凝视-1"><a href="#学姐的凝视-1" class="headerlink" title="学姐的凝视"></a>学姐的凝视</h2><p> <a href="http://211.69.16.145:3333/">http://211.69.16.145:3333/</a></p>
<p>猜测账号为QQ号（也可以采用集束炸弹进行爆破）</p>
<p>弱口令爆破即可</p>
<p>进入下载图片二进制打开最下面有base64解密即可。</p>
<p><img src="https://k5hai-1311151548.cos.ap-shanghai.myqcloud.com/https://k5hai-1311151548.cos.ap-shanghai.myqcloud.comimage-20230421174943823.png#id=lXwW9&originHeight=427&originWidth=648&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p><a href="http://211.69.16.145:3322/">http://211.69.16.145:3322</a><br>在他界面跳转之前抓包，发包即可</p>
<h2 id="easyCrypto"><a href="#easyCrypto" class="headerlink" title="easyCrypto"></a>easyCrypto</h2><p>签到题，看给的python代码，是base加密，分别是16，32，64</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">import base64</span><br><span class="line"></span><br><span class="line">s = &#x27;4B<span class="number">55594851365332</span>4B<span class="number">354844</span>4F<span class="number">565348</span>4E<span class="number">42594747</span>4D4A5A4F<span class="number">42525443</span>4F4C494C415A<span class="number">5655334444</span>4E5A<span class="number">5747</span>4D595A534E<span class="number">52324747523359</span>4E524D<span class="number">44475154</span>5A4D495A<span class="number">474936</span>4B5A4B<span class="number">34595453</span>3D3D3D&#x27;</span><br><span class="line"></span><br><span class="line">print(base64.b64decode(base64.b32decode(base64.b16decode(s))))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="你会解方程组不会？"><a href="#你会解方程组不会？" class="headerlink" title="你会解方程组不会？"></a>你会解方程组不会？</h2><p><img src="https://xmzbk-1310919595.cos.ap-nanjing.myqcloud.com/image-20230422001942638.png" alt="image-20230422001942638"></p>
<p>主函数，for循环是对输入的字符出进行异或加密，然后看v1，是一个if函数，函数里面是一堆方程组，我写代码的时候，可能环境问题，导致这个反编译显示代码格式不是很正常，但是不影响写脚本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">v2 = Int(<span class="string">&#x27;a2&#x27;</span>)</span><br><span class="line">v3 = Int(<span class="string">&#x27;a3&#x27;</span>)</span><br><span class="line">v4 = Int(<span class="string">&#x27;a4&#x27;</span>)</span><br><span class="line">v5 = Int(<span class="string">&#x27;a5&#x27;</span>)</span><br><span class="line">v6 = Int(<span class="string">&#x27;a6&#x27;</span>)</span><br><span class="line">v7 = Int(<span class="string">&#x27;a7&#x27;</span>)</span><br><span class="line">v8 = Int(<span class="string">&#x27;a8&#x27;</span>)</span><br><span class="line">v9 = Int(<span class="string">&#x27;a9&#x27;</span>)</span><br><span class="line">v10 = Int(<span class="string">&#x27;a10&#x27;</span>)</span><br><span class="line">v11 = Int(<span class="string">&#x27;a11&#x27;</span>)</span><br><span class="line">v12 = Int(<span class="string">&#x27;a12&#x27;</span>)</span><br><span class="line">v13 = Int(<span class="string">&#x27;a13&#x27;</span>)</span><br><span class="line">v14 = Int(<span class="string">&#x27;a14&#x27;</span>)</span><br><span class="line">v15 = Int(<span class="string">&#x27;a15&#x27;</span>)</span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(<span class="number">15</span> * v11</span><br><span class="line">     + -<span class="number">36</span> * v10</span><br><span class="line">     + <span class="number">13</span> * v9</span><br><span class="line">     + <span class="number">25</span> * v8</span><br><span class="line">     + <span class="number">43</span> * v6</span><br><span class="line">     + <span class="number">65</span> * v4</span><br><span class="line">     + <span class="number">88</span> * v2</span><br><span class="line">     + <span class="number">67</span> * v3</span><br><span class="line">     - <span class="number">5</span> * v5</span><br><span class="line">     + <span class="number">89</span> * v7</span><br><span class="line">     + <span class="number">11</span> * v12</span><br><span class="line">     + <span class="number">47</span> * v13</span><br><span class="line">     - <span class="number">60</span> * v14</span><br><span class="line">     + <span class="number">29</span> * v15 == <span class="number">22748</span>,</span><br><span class="line">     -<span class="number">41</span> * v13</span><br><span class="line">     + <span class="number">2</span> * v12</span><br><span class="line">     + <span class="number">8</span> * v11</span><br><span class="line">     + <span class="number">7</span> * v3</span><br><span class="line">     + <span class="number">89</span> * v2</span><br><span class="line">     + <span class="number">12</span> * v4</span><br><span class="line">     - <span class="number">25</span> * v5</span><br><span class="line">     + <span class="number">41</span> * v6</span><br><span class="line">     + <span class="number">23</span> * v7</span><br><span class="line">     + <span class="number">20</span> * v8</span><br><span class="line">     - <span class="number">66</span> * v9</span><br><span class="line">     + <span class="number">31</span> * v10</span><br><span class="line">     - <span class="number">39</span> * v14</span><br><span class="line">     + <span class="number">17</span> * v15 == <span class="number">7258</span>,</span><br><span class="line">     -<span class="number">34</span> * v14</span><br><span class="line">     + <span class="number">90</span> * v13</span><br><span class="line">     + <span class="number">101</span> * v12</span><br><span class="line">     + -<span class="number">33</span> * v10</span><br><span class="line">     + <span class="number">15</span> * v9</span><br><span class="line">     + <span class="number">27</span> * v8</span><br><span class="line">     + <span class="number">53</span> * v6</span><br><span class="line">     + <span class="number">35</span> * v3</span><br><span class="line">     + <span class="number">28</span> * v2</span><br><span class="line">     + <span class="number">16</span> * v4</span><br><span class="line">     - <span class="number">65</span> * v5</span><br><span class="line">     + <span class="number">39</span> * v7</span><br><span class="line">     + <span class="number">13</span> * v11</span><br><span class="line">     + <span class="number">23</span> * v15 == <span class="number">26190</span>,</span><br><span class="line">     (v9 * <span class="number">128</span>)</span><br><span class="line">     + <span class="number">81</span> * v7</span><br><span class="line">     + -<span class="number">59</span> * v5</span><br><span class="line">     + <span class="number">35</span> * v4</span><br><span class="line">     + <span class="number">34</span> * v3</span><br><span class="line">     + <span class="number">23</span> * v2</span><br><span class="line">     + <span class="number">49</span> * v6</span><br><span class="line">     + <span class="number">25</span> * v8</span><br><span class="line">     - <span class="number">32</span> * v10</span><br><span class="line">     + <span class="number">75</span> * v11</span><br><span class="line">     + <span class="number">81</span> * v12</span><br><span class="line">     + <span class="number">47</span> * v13</span><br><span class="line">     - <span class="number">60</span> * v14</span><br><span class="line">     + <span class="number">29</span> * v15 == <span class="number">37136</span>,</span><br><span class="line">     <span class="number">90</span> * v8</span><br><span class="line">     + <span class="number">79</span> * v7</span><br><span class="line">     + <span class="number">42</span> * v6</span><br><span class="line">     + -<span class="number">52</span> * v5</span><br><span class="line">     + <span class="number">35</span> * v4</span><br><span class="line">     + <span class="number">97</span> * v3</span><br><span class="line">     + <span class="number">38</span> * v2</span><br><span class="line">     + <span class="number">23</span> * v9</span><br><span class="line">     - <span class="number">36</span> * v10</span><br><span class="line">     + <span class="number">57</span> * v11</span><br><span class="line">     + <span class="number">81</span> * v12</span><br><span class="line">     + <span class="number">42</span> * v13</span><br><span class="line">     - <span class="number">62</span> * v14</span><br><span class="line">     - <span class="number">11</span> * v15 == <span class="number">27915</span>,</span><br><span class="line">     -<span class="number">61</span> * v14</span><br><span class="line">     + <span class="number">41</span> * v12</span><br><span class="line">     + -<span class="number">26</span> * v10</span><br><span class="line">     + <span class="number">49</span> * v7</span><br><span class="line">     + <span class="number">47</span> * v6</span><br><span class="line">     + -<span class="number">45</span> * v5</span><br><span class="line">     + <span class="number">35</span> * v4</span><br><span class="line">     + <span class="number">22</span> * v2</span><br><span class="line">     + <span class="number">27</span> * v3</span><br><span class="line">     + <span class="number">29</span> * v8</span><br><span class="line">     + <span class="number">18</span> * v9</span><br><span class="line">     + <span class="number">35</span> * v11</span><br><span class="line">     + <span class="number">40</span> * v13</span><br><span class="line">     + <span class="number">28</span> * v15 == <span class="number">17298</span>,</span><br><span class="line">     <span class="number">43</span> * v13</span><br><span class="line">     + <span class="number">76</span> * v12</span><br><span class="line">     + <span class="number">34</span> * v11</span><br><span class="line">     + -<span class="number">47</span> * v10</span><br><span class="line">     + <span class="number">85</span> * v9</span><br><span class="line">     + <span class="number">23</span> * v8</span><br><span class="line">     + <span class="number">86</span> * v7</span><br><span class="line">     + -<span class="number">42</span> * v6</span><br><span class="line">     + <span class="number">45</span> * v3</span><br><span class="line">     + <span class="number">12</span> * v2</span><br><span class="line">     + <span class="number">35</span> * v4</span><br><span class="line">     - <span class="number">9</span> * v5</span><br><span class="line">     - <span class="number">44</span> * v14</span><br><span class="line">     + <span class="number">65</span> * v15 == <span class="number">19875</span>,</span><br><span class="line">     <span class="number">57</span> * v13</span><br><span class="line">     + <span class="number">25</span> * v11</span><br><span class="line">     + -<span class="number">30</span> * v10</span><br><span class="line">     + <span class="number">86</span> * v8</span><br><span class="line">     + <span class="number">79</span> * v7</span><br><span class="line">     + <span class="number">35</span> * v4</span><br><span class="line">     + <span class="number">62</span> * v3</span><br><span class="line">     + <span class="number">79</span> * v2</span><br><span class="line">     - <span class="number">85</span> * v5</span><br><span class="line">     + <span class="number">33</span> * v6</span><br><span class="line">     + <span class="number">14</span> * v9</span><br><span class="line">     + <span class="number">11</span> * v12</span><br><span class="line">     - <span class="number">50</span> * v14</span><br><span class="line">     - <span class="number">9</span> * v15 == <span class="number">22784</span>,</span><br><span class="line">     <span class="number">47</span> * v13</span><br><span class="line">     + <span class="number">2</span> * v12</span><br><span class="line">     + -<span class="number">36</span> * v10</span><br><span class="line">     + <span class="number">2</span> * v8</span><br><span class="line">     + <span class="number">29</span> * v7</span><br><span class="line">     + (v4 * <span class="number">64</span>)</span><br><span class="line">     + <span class="number">8</span> * v2</span><br><span class="line">     + <span class="number">6</span> * v3</span><br><span class="line">     - <span class="number">85</span> * v5</span><br><span class="line">     + <span class="number">73</span> * v6</span><br><span class="line">     + <span class="number">23</span> * v9</span><br><span class="line">     + <span class="number">5</span> * v11</span><br><span class="line">     - (v14 * <span class="number">64</span>)</span><br><span class="line">     + <span class="number">27</span> * v15 == <span class="number">9710</span>,</span><br><span class="line">     <span class="number">41</span> * v12</span><br><span class="line">     + -<span class="number">38</span> * v10</span><br><span class="line">     + -<span class="number">51</span> * v5</span><br><span class="line">     + <span class="number">68</span> * v4</span><br><span class="line">     + -<span class="number">68</span> * v3</span><br><span class="line">     + <span class="number">67</span> * v2</span><br><span class="line">     - <span class="number">43</span> * v6</span><br><span class="line">     + <span class="number">81</span> * v7</span><br><span class="line">     + <span class="number">22</span> * v8</span><br><span class="line">     - <span class="number">12</span> * v9</span><br><span class="line">     + <span class="number">75</span> * v11</span><br><span class="line">     + <span class="number">27</span> * v13</span><br><span class="line">     - <span class="number">52</span> * v14</span><br><span class="line">     + <span class="number">31</span> * v15 == <span class="number">13376</span>,</span><br><span class="line">    -<span class="number">67</span> * v14</span><br><span class="line">     + <span class="number">31</span> * v12</span><br><span class="line">     + <span class="number">15</span> * v9</span><br><span class="line">     + -<span class="number">51</span> * v5</span><br><span class="line">     + <span class="number">63</span> * v3</span><br><span class="line">     + <span class="number">85</span> * v2</span><br><span class="line">     + <span class="number">5</span> * v4</span><br><span class="line">     + <span class="number">44</span> * v6</span><br><span class="line">     + <span class="number">36</span> * v7</span><br><span class="line">     + <span class="number">28</span> * v8</span><br><span class="line">     - <span class="number">6</span> * v10</span><br><span class="line">     + <span class="number">45</span> * v11</span><br><span class="line">     + <span class="number">7</span> * v13</span><br><span class="line">     + <span class="number">78</span> * v15 == <span class="number">24065</span>,</span><br><span class="line">     <span class="number">43</span> * v13</span><br><span class="line">     + -<span class="number">35</span> * v10</span><br><span class="line">     + <span class="number">25</span> * v8</span><br><span class="line">     + <span class="number">43</span> * v6</span><br><span class="line">     + <span class="number">47</span> * v2</span><br><span class="line">     + (v3 * <span class="number">64</span>)</span><br><span class="line">     + <span class="number">66</span> * v4</span><br><span class="line">     - <span class="number">5</span> * v5</span><br><span class="line">     + <span class="number">112</span> * v7</span><br><span class="line">     + <span class="number">13</span> * v9</span><br><span class="line">     + <span class="number">95</span> * v11</span><br><span class="line">     + <span class="number">21</span> * v12</span><br><span class="line">     - <span class="number">61</span> * v14</span><br><span class="line">     + <span class="number">20</span> * v15 == <span class="number">27687</span>,</span><br><span class="line">      -<span class="number">61</span> * v14</span><br><span class="line">     + <span class="number">47</span> * v13</span><br><span class="line">     + <span class="number">89</span> * v12</span><br><span class="line">     + <span class="number">14</span> * v11</span><br><span class="line">     + -<span class="number">92</span> * v10</span><br><span class="line">     + <span class="number">56</span> * v9</span><br><span class="line">     + <span class="number">23</span> * v8</span><br><span class="line">     + <span class="number">89</span> * v7</span><br><span class="line">     + <span class="number">49</span> * v6</span><br><span class="line">     + -<span class="number">25</span> * v5</span><br><span class="line">     + <span class="number">85</span> * v4</span><br><span class="line">     + <span class="number">67</span> * v3</span><br><span class="line">     + <span class="number">89</span> * v2</span><br><span class="line">     - <span class="number">29</span> * v15 == <span class="number">29250</span>,</span><br><span class="line">    -<span class="number">60</span> * v14</span><br><span class="line">     + <span class="number">51</span> * v12</span><br><span class="line">     + <span class="number">16</span> * v11</span><br><span class="line">     + <span class="number">12</span> * v9</span><br><span class="line">     + <span class="number">25</span> * v8</span><br><span class="line">     + -<span class="number">43</span> * v6</span><br><span class="line">     + <span class="number">34</span> * v3</span><br><span class="line">     + <span class="number">95</span> * v2</span><br><span class="line">     + <span class="number">62</span> * v4</span><br><span class="line">     - <span class="number">9</span> * v5</span><br><span class="line">     + <span class="number">83</span> * v7</span><br><span class="line">     - <span class="number">36</span> * v10</span><br><span class="line">     + <span class="number">47</span> * v13</span><br><span class="line">     - <span class="number">24</span> * v15 == <span class="number">15317</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;un&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(s.check()):</span><br><span class="line">    <span class="built_in">print</span>(s.model())   <span class="comment">#输出解</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">direct =&#123;       <span class="comment">#这点是方程组解密得到的，顺序已经替换过来了</span></span><br><span class="line">     <span class="number">13</span> : <span class="number">74</span>,</span><br><span class="line">     <span class="number">3</span> : <span class="number">24</span>,</span><br><span class="line">     <span class="number">4</span> : <span class="number">119</span>,</span><br><span class="line">     <span class="number">10</span> : <span class="number">108</span>,</span><br><span class="line">     <span class="number">12</span> : <span class="number">88</span>,</span><br><span class="line">     <span class="number">7</span> : <span class="number">43</span>,</span><br><span class="line">     <span class="number">14</span> : <span class="number">88</span>,</span><br><span class="line">     <span class="number">9</span> : <span class="number">91</span>,</span><br><span class="line">     <span class="number">6</span> : <span class="number">104</span>,</span><br><span class="line">     <span class="number">5</span> : <span class="number">7</span>,</span><br><span class="line">     <span class="number">8</span> : <span class="number">28</span>,</span><br><span class="line">     <span class="number">15</span> : <span class="number">33</span>,</span><br><span class="line">     <span class="number">2</span> : <span class="number">10</span>,</span><br><span class="line">     <span class="number">11</span> : <span class="number">52</span>&#125;</span><br><span class="line">flag = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> direct:</span><br><span class="line">    flag[i-<span class="number">2</span>] = direct[i]  <span class="comment">#顺序调整</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    flag[i] ^= flag[i + <span class="number">1</span>]   <span class="comment">#异或解密</span></span><br><span class="line">flag_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>):</span><br><span class="line">     flag_str += <span class="built_in">chr</span>(flag[i])</span><br><span class="line"><span class="built_in">print</span>(flag_str)</span><br></pre></td></tr></table></figure>

<p>主要思路是用z3模块解方程组，z3怎么搞，网上搜，写脚本需要注意的是有的变量顺序替换了，还有就是伪代码的方程组直接复制过来改一下格式就能用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v2 = a1[<span class="number">2</span>];</span><br><span class="line">v3 = a1[<span class="number">1</span>];</span><br><span class="line">v4 = *a1;</span><br><span class="line">v5 = a1[<span class="number">3</span>];</span><br><span class="line">v6 = a1[<span class="number">4</span>];</span><br><span class="line">v7 = a1[<span class="number">5</span>];</span><br><span class="line">v8 = a1[<span class="number">6</span>];</span><br><span class="line">v9 = a1[<span class="number">7</span>];</span><br><span class="line">v10 = a1[<span class="number">9</span>];</span><br><span class="line">v11 = a1[<span class="number">8</span>];</span><br><span class="line">v12 = a1[<span class="number">10</span>];</span><br><span class="line">v13 = a1[<span class="number">11</span>];</span><br><span class="line">v14 = a1[<span class="number">12</span>];</span><br><span class="line">v15 = a1[<span class="number">13</span>];</span><br></pre></td></tr></table></figure>

<p>a1[0]和a1[2]替换了，a1[8]和a1[9]替换了，记得解完方程组，替换过来，再进行异或解密。</p>
<p>然后反编译的时候可能会出现(v9 &lt;&lt; 7)这种情况，替换成v9 * 128，如果是(v9 &lt;&lt; 6)，就替换成v9 * 64.</p>
<h2 id="ikun计算器"><a href="#ikun计算器" class="headerlink" title="ikun计算器"></a>ikun计算器</h2><p>题目类型：安卓逆向+tea算法  </p>
<p>解题思路：用jdax进行反编译后，搜索关键词找到关键代码</p>
<p>找到v和key进行解密</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/%E5%9B%BE%E7%89%871.png" alt="图片1"></p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/%E5%9B%BE%E7%89%872.png" alt="图片2"></p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/%E5%9B%BE%E7%89%873.png" alt="图片3"></p>
<p>解出十进制转为十六进制，然后在cyberchef用from hex得出flag</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/%E5%9B%BE%E7%89%874.png" alt="图片4"></p>
<p>Flag：SLsec{u_2re_g00d11y}</p>
<h2 id="easyre1"><a href="#easyre1" class="headerlink" title="easyre1"></a>easyre1</h2><p>用ida32位打开附件，shift+f12查找字符串</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/wps1.jpg" alt="img"> </p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/wps2.jpg" alt="img"> </p>
<p>点进dialogfunc看一下</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/wps3.jpg" alt="img"> </p>
<p>这里应该是点击19999次会出flag，当然现在已经很明显的看到flag就是</p>
<p>BJD</p>
]]></content>
      <categories>
        <category>周赛</category>
      </categories>
      <tags>
        <tag>周赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>4.22周赛</title>
    <url>/2023/04/22/4-22%E5%91%A8%E8%B5%9B%E3%80%90%E4%B8%8A%E5%8D%88%E5%9C%BA%E3%80%91/</url>
    <content><![CDATA[<h1 id="好玩的时间戳"><a href="#好玩的时间戳" class="headerlink" title="好玩的时间戳"></a>好玩的时间戳</h1><p>时间戳转换网站<a href="https://tool.lu/timestamp/">时间戳(Unix timestamp)转换工具 - 在线工具 (tool.lu)</a></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304221021008.png" alt="image-20230422102059943"></p>
<p><a href="https://blog.csdn.net/u010418732/article/details/125178250?ops_request_misc=%7B%22request_id%22:%22168212901116800213015712%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168212901116800213015712&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-125178250-null-null.142%5Ev86%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=%E5%8C%BF%E4%BA%8E%E6%97%B6%E4%B9%8B%E4%B8%8B&spm=1018.2226.3001.4187">(30条消息) 【CTF-MISC出题思路分享】匿于时之下_ctf misc怎么出题_Tokeii的博客-CSDN博客</a></p>
<p>看了上述文章，大概知道了出题人的思路。</p>
<p>在CSDN搜了一下，对应<a href="https://so.csdn.net/so/search?q=%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CMISC&spm=1001.2101.3001.7020">攻防世界MISC</a>题Time_losing</p>
<p>已知源时间戳为2000000000</p>
<p>定义一下 并且定义一个a来存储最终的flag</p>
<p><strong>oldtime&#x3D;2000000000</strong><br><strong>a&#x3D;””</strong></p>
<p>总共有9个文件 (0~9) 需要每个文件都和源时间戳进行相减</p>
<p>那么就要用到循环</p>
<p>先获取文件的路径</p>
<p>C:\Users\86198\Desktop\flag{0}.txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os,time  <span class="comment">#查找处理文件要调用os库 先用import 导入</span></span><br><span class="line"></span><br><span class="line">oldtime=<span class="number">2000000000</span></span><br><span class="line">a=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">9</span>): <span class="comment">#有0~8个txt文件 就是循环9次</span></span><br><span class="line">   file = <span class="string">r&quot;C:\Users\86198\Desktop\flag\&#123;0&#125;.txt&quot;</span>.<span class="built_in">format</span>(i)<span class="comment">#文件路径</span></span><br><span class="line">   newtime = <span class="built_in">int</span>(os.path.getmtime(file))  <span class="comment">#获取最近修改的时间</span></span><br><span class="line">   s = newtime - oldtime</span><br><span class="line">   a = a+<span class="built_in">chr</span>(s)   <span class="comment">#将差值转为ASCII码</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://blog.csdn.net/qq_39291229/article/details/127803795?spm=1001.2014.3001.5502">(30条消息) python小记–攻防世界Time_losing解题脚本编写_tzyyyyyy的博客-CSDN博客</a></p>
<h1 id="easyCrypto"><a href="#easyCrypto" class="headerlink" title="easyCrypto"></a>easyCrypto</h1><p>base16,32,64挨个解码直接出flag</p>
<p>4B555948513653324B3548444F5653484E425947474D4A5A4F425254434F4C494C415A56553344444E5A57474D595A534E523247475233594E524D444751545A4D495A4749364B5A4B345954533D3D3D</p>
<h1 id="WALN"><a href="#WALN" class="headerlink" title="WALN"></a>WALN</h1><p>文本搜素SLsec</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304221046608.png" alt="image-20230422104649572"></p>
<h1 id="我很快的"><a href="#我很快的" class="headerlink" title="我很快的"></a>我很快的</h1><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304221151404.png" alt="image-20230422115102375"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304221151914.png" alt="image-20230422115121889"></p>
<p>SLsec{w3lcom_t0_Slc7f}</p>
<h1 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h1><p>第一步例行查壳发现无壳且为32bit，直接用ida打开</p>
<p>查找字符串在最下面发现可疑字符串疑似flag</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304221155203.png" alt="image-20230422115542165"></p>
<p>很好我以为得出flag开开心心去输入，结果输入错误，那就看看这个函数的反编译吧</p>
<p>大概就是这个程序要点19999次然后就出flag然后呢我们看那里呢，当然是看sprintf函数咯，看见前面的%d%d，大胆猜测后面跟的19999与0就是%d所代表的，毕竟逆向这玩意三分经验七分蒙，大胆尝试，结果很好正确地</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304221156796.png" alt="91873894178eb97aca09abe164209e6"></p>
<p>BJD{1999902069a45792d233ac}</p>
<p>记得把BJD改成SLsec</p>
]]></content>
      <categories>
        <category>周赛</category>
      </categories>
      <tags>
        <tag>周赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>ISCC2023</title>
    <url>/2023/05/01/ISCC2023/</url>
    <content><![CDATA[<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="好看的维吾尔族小姐姐"><a href="#好看的维吾尔族小姐姐" class="headerlink" title="好看的维吾尔族小姐姐"></a>好看的维吾尔族小姐姐</h2><p>图片后缀改成png</p>
<p>010中修改宽高</p>
<p>得到一张DM码，把整张图片反转</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305011052347.png" alt="image-20230501105246284"></p>
<p>扫码得到：;521#&amp;;33#&amp;;101#&amp;;011#&amp;;111#&amp;;001#&amp;;801#&amp;;801#&amp;;101#&amp;;911#&amp;;59#&amp;;611#&amp;;501#&amp;;59#&amp;;611#&amp;;111#&amp;;301#&amp;;59#&amp;;711#&amp;;111#&amp;;121#&amp;;321#&amp;;76#&amp;;76#&amp;;38#&amp;;37#&amp;</p>
<p>根据题目提示，把字符串倒叙</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&amp;#73;</span><span class="symbol">&amp;#83;</span><span class="symbol">&amp;#67;</span><span class="symbol">&amp;#67;</span><span class="symbol">&amp;#123;</span><span class="symbol">&amp;#121;</span><span class="symbol">&amp;#111;</span><span class="symbol">&amp;#117;</span><span class="symbol">&amp;#95;</span><span class="symbol">&amp;#103;</span><span class="symbol">&amp;#111;</span><span class="symbol">&amp;#116;</span><span class="symbol">&amp;#95;</span><span class="symbol">&amp;#105;</span><span class="symbol">&amp;#116;</span><span class="symbol">&amp;#95;</span><span class="symbol">&amp;#119;</span><span class="symbol">&amp;#101;</span><span class="symbol">&amp;#108;</span><span class="symbol">&amp;#108;</span><span class="symbol">&amp;#100;</span><span class="symbol">&amp;#111;</span><span class="symbol">&amp;#110;</span><span class="symbol">&amp;#101;</span><span class="symbol">&amp;#33;</span><span class="symbol">&amp;#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305011128520.png" alt="image-20230501112800488"></p>
<p>ISCC{you_got_it_welldone!}</p>
<p>解码网页<a href="https://www.matools.com/%EF%BC%88%E8%A7%A3Unicode%E7%A0%81%EF%BC%89">https://www.matools.com/（解Unicode码）</a></p>
<p><a href="https://jie.2weima.com/%EF%BC%88%E6%89%AB%E7%A0%81%EF%BC%89">https://jie.2weima.com/（扫码）</a></p>
<p><a href="https://flip.imageonline.co/cn/">在线翻转图像（快速） - 免费工具 (imageonline.co)</a>（图片反转）</p>
<h3 id="解题收获："><a href="#解题收获：" class="headerlink" title="解题收获："></a>解题收获：</h3><p>通过此题知道的什么是DM码，学到了新的东西。</p>
<h2 id="汤姆历险记"><a href="#汤姆历险记" class="headerlink" title="汤姆历险记"></a>汤姆历险记</h2><p>解压得到两个文件，txt和jpg</p>
<p>把图片拖到010，最后一段字符进行词频统计，得到一串字符{yasuobpwrd91702!@$%^&amp;*}</p>
<p>词频统计网站<a href="https://uutool.cn/str-statistics/">https://uutool.cn/str-statistics/</a></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305121223451.png" alt="image-20230512122301336"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305121223451.png"></p>
<p>把Tom.jpg的后缀改成zip，得到一个压缩包，里面的文件有密码，猜测是上述词频统计的结果</p>
<p>（我焯，还真是！）</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305121225885.png" alt="image-20230512122502827"></p>
<p>得到一段文本</p>
<p>这段文章的字段有单倍行距和1.5倍行距。</p>
<p>将单倍行距为. </p>
<p>1.5倍行距为- </p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305121228896.png" alt="image-20230512122859871"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305121229263.png" alt="image-20230512122938237"></p>
<p>每行一看</p>
<p>…&#x2F;-.&#x2F;-..&#x2F;–.&#x2F;.-&#x2F;-.-&#x2F;.&#x2F;.-</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305121254306.png" alt="image-20230512125412269"></p>
<p>SNDGAKEA</p>
<p>对照字典z8sbmeym</p>
<p>ISCC{z8sbmeym}</p>
<h3 id="解题收获：-1"><a href="#解题收获：-1" class="headerlink" title="解题收获："></a>解题收获：</h3><p>通关此题得知了词频统计，以及文字行距可以看出来摩斯密码。很震惊。了解了通过binwalk指令查看文件是否藏有其他文件，通过foremost指令对文件进行分离。</p>
<h2 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h2><p>misc3流量包通过iscc字符定位，可以提取出来一个pitcure.rar和p2.pngpitcure.rar带密码无法解，分析p2.png得到关键提示，两个pass在流量包里都能找到rar里包含两种图片，共112张基本排除二维码，猜测为二进制每八位转字符得到字符串ISCC{i2s0c2c3}再通过字典表进行替换为flag</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305301948641.png" alt="image-20230530194833612"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305301948900.png" alt="image-20230530194818863"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305071939325.png" alt="image-20230507193918265"></p>
<p>ISCC{i2s0c2c3}</p>
<p>对照字典替换之后：ISCC{s0qkb0b1}</p>
<h3 id="解题收获：-2"><a href="#解题收获：-2" class="headerlink" title="解题收获："></a>解题收获：</h3><p>1、Wireshark的使用</p>
<p>2、两张不一样的图片且总数和频率可以往二进制上考虑</p>
<p>3、Base64在线转文件</p>
<h2 id="菜鸟黑客2"><a href="#菜鸟黑客2" class="headerlink" title="菜鸟黑客2"></a>菜鸟黑客2</h2><p>根据题意上面说的是附件是和菜鸟黑客的附件一样，然后使用接着使用R-Studio扫描上次下载的附件，发现扫描出来一些图片.</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305222116344.png" alt="image-20230522211638317"></p>
<p>但是恢复出来的图片不能查看</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305222117022.png" alt="image-20230522211700990"></p>
<p>然后用volatility把图片进行查看jpg,发现了一个emoji.jpg图片</p>
<p>然后进行导出查看</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305222118075.png" alt="image-20230522211804044"></p>
<p>然后使用editbox查看发现一段信息</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305222118500.png" alt="image-20230522211824476"></p>
<p>根据猜测emoji.jpg图片的眼睛中藏有信息，睁着眼就是.闭着眼就是-中间的空白处为空格</p>
<p>然后得到. – — .— .. .. … ..-. ..- -.然后进行解密</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305222119064.png" alt="image-20230522211932030"></p>
<p>得到的EMOJIISFUN</p>
<p>这个不像是一个flag更像是一个密钥</p>
<p>然后使用foremost分离图片</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305222120276.png" alt="image-20230522212003244"></p>
<p>得到一个压缩包，进行解压里面是一个加密文件</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305222120608.png" alt="image-20230522212018582"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305222120450.png" alt="image-20230522212032440"></p>
<p>得到的是一段维吉纳亚密码，上面解出的摩斯密码的密钥是这个密码解密的密钥</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305222121741.png" alt="image-20230522212103715"></p>
<p>得到flag ISCC{afdf_buhi_pqwd_tfus}</p>
<h3 id="解题收获：-3"><a href="#解题收获：-3" class="headerlink" title="解题收获："></a>解题收获：</h3><p>1、vol指令的进阶使用，以及dumpfiles指令对文件的恢复，</p>
<p>2、以及binwalk和foremost指令的一块使用来进行图片分析。通过相关题得到的提示来作用于与其相关的题。</p>
<p>3、维吉尼亚密码的解密，密钥的需要。</p>
<h2 id="你相信AI吗？"><a href="#你相信AI吗？" class="headerlink" title="你相信AI吗？"></a>你相信AI吗？</h2><p>下载好附件，打开dataset文件夹发现有很多txt文本，打开查看几个txt文本，需要构造py脚本（需要将</p>
<p>dataset文件夹放在与脚本同一个位置，然后创建一个名为a的文件夹）</p>
<p>脚本如下：</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305301912432.png" alt="image-20230530191240315"></p>
<p>这个脚本执行完后将a文件夹中的图片显示的数字按顺序写到cipher_text中每个数字之间用空格隔开</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305301913092.png" alt="image-20230530191323050"></p>
<p>运行得到：</p>
<p>VlRGYVQxSkdSWHBqZWtwVVRVWmFSVlpyV21GaFJrcEpZak5zVGsxRVJtRlZiWEJYWWxaV2RWcEVhejA9</p>
<p>使用base64解码几次后得到flag：ISCC{6KECTVaDz23MYF5fRw}</p>
<h3 id="解题收获：-4"><a href="#解题收获：-4" class="headerlink" title="解题收获："></a>解题收获：</h3><p>学到一些新的东西，以及脚本的编写，主要是脚本的编写。</p>
<h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="JustDoIt"><a href="#JustDoIt" class="headerlink" title="JustDoIt"></a>JustDoIt</h2><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305010856755.png" alt="image-20230501085638669"></p>
<p>无壳，32位，拖入32位IDA</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305301951134.png" alt="image-20230530195138097"></p>
<p>得到线索，编写python脚本，运行得到flag</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305301952427.png" alt="image-20230530195212395"></p>
<p>ISCC{Just<del>Do</del>It}</p>
<h3 id="解题收获：-5"><a href="#解题收获：-5" class="headerlink" title="解题收获："></a>解题收获：</h3><p>在解决re题时，根据IDA进行脚本编写是必不可少的。</p>
<h2 id="奇门遁甲"><a href="#奇门遁甲" class="headerlink" title="奇门遁甲"></a>奇门遁甲</h2><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305091930838.png"></p>
<p>32位</p>
<p>打开IDA32位后，查询主函数，发现其中有swtich函数，再结合本题打开后的操作，考虑是开门次序的线索，通过观察v3代表的是次数，case后面的数代表那些门的编号,或者也可以通过穷举法得到次序得到次序为31284567，然后将每次开门得到的碎片收集，最终拼接加上ISCC{}即为flag</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305301954992.png" alt="image-20230530195406961"></p>
<p>ISCC{cqQ1N0rguLD?#wQbfYW5eykC}</p>
<h3 id="解题收获：-6"><a href="#解题收获：-6" class="headerlink" title="解题收获："></a>解题收获：</h3><p>1、通过直接打开exe文件来推之其在IDA的线索，最终以此来得到flag.</p>
<h2 id="变形记"><a href="#变形记" class="headerlink" title="变形记"></a>变形记</h2><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305092005930.png" alt="image-20230509200502871"></p>
<p>32位</p>
<p>找到了base64</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305092036589.png" alt="image-20230509203646540"></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">from base64 import b64decode</span><br><span class="line"></span><br><span class="line">secret = <span class="string">&quot;=MWe6lneCl3cykXV5JkdyI0cClnQ&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;&quot;</span>.join([(v)</span></span> <span class="keyword">if</span> v<span class="selector-class">.isdigit</span>() == False <span class="keyword">else</span> ((<span class="built_in">b64decode</span>(secret<span class="selector-attr">[::-1]</span><span class="selector-class">.encode</span>())<span class="selector-class">.decode</span>()<span class="selector-attr">[i-1]</span>)*(<span class="built_in">int</span>(v)-<span class="number">1</span>))</span><br><span class="line"> <span class="keyword">for</span>  <span class="selector-tag">i</span>,v <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">b64decode</span>(secret<span class="selector-attr">[::-1]</span><span class="selector-class">.encode</span>())<span class="selector-class">.decode</span>())]))</span><br></pre></td></tr></table></figure>

<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305092036378.png"></p>
<p>这段脚本主要用于解密一个经过编码的密文字符串，以下是代码的具体解释：</p>
<ol>
<li><p>导入base64模块中的b64decode函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义一个名为secret的字符串变量，值为”&#x3D;MWe6lneCl3cykXV5JkdyI0cClnQ”，该变量包含被加密的信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">secret = <span class="string">&quot;=MWe6lneCl3cykXV5JkdyI0cClnQ&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>采用反转、解码和再次反转的方法，将被加密的信息解密为原始的字符串，即先反转secret字符串，采用base64解码，再将结果反转，得到原始字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b64decode(secret[::-<span class="number">1</span>].encode()).decode()[i-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历解密后的字符串，如果当前字符不是数字，则直接保留该字符；如果当前字符是数字，则根据前面解密后的字符串的字符索引，计算出该位原始字符串的值，并将其乘以该数字减一，最终得到解密后的字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>.join([(v) <span class="keyword">if</span> v.isdigit() == <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span> ((b64decode(secret[::-<span class="number">1</span>].encode()).decode()[i-<span class="number">1</span>])</span><br><span class="line">          *(<span class="built_in">int</span>(v)-<span class="number">1</span>)) <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">enumerate</span>(b64decode(secret[::-<span class="number">1</span>].encode()).decode())])</span><br></pre></td></tr></table></figure></li>
</ol>
<p>因此，该脚本的主要作用是对被加密的信息进行解码，得到原始字符串。</p>
<p>ISCC{ByBsBBvByUyysyBzyzyc}</p>
<h3 id="解题收获：-7"><a href="#解题收获：-7" class="headerlink" title="解题收获："></a>解题收获：</h3><p>在完成相关的re题，如果脚本能力太弱，那么导致的就是题目的难以下手，所以re题中脚本编写学习是必要。</p>
<h2 id="Convert"><a href="#Convert" class="headerlink" title="Convert"></a>Convert</h2><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305222204746.png" alt="image-20230522220432699"></p>
<p>32位，拖入IDA</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305231955414.png" alt="image-20230523195538368"></p>
<p>这段代码看起来是一个C语言的<code>main_0</code>函数。它的主要逻辑是比较两个字符数组<code>v5</code>和<code>v8</code>中的元素是否相等，并根据比较结果输出不同的消息。</p>
<p>其中，<code>v8</code>数组被初始化为包含一系列数字和字符的序列，以及一些控制字符。这个序列可能代表一个密码或者标识符。</p>
<p>这段代码通过遍历<code>v5</code>和<code>v8</code>数组的元素进行逐个比较，如果有不相等的元素，则输出”The flag is false!”，否则输出”The flag is true!”。</p>
<p>找到这个页面一个23个十六进制数</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305231954176.png" alt="image-20230523195426137"></p>
<p>脚本逆向</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">a1 = [<span class="number">0x28</span>, <span class="number">0x30</span>, <span class="number">0x24</span>, <span class="number">0x24</span>, <span class="number">0x62</span>, <span class="number">0x39</span>, <span class="number">0x35</span>, <span class="number">0x39</span>, <span class="number">0x24</span>, <span class="number">0x0C</span>, <span class="number">0x2D</span>, <span class="number">0x28</span>, <span class="number">0x0AB</span>, <span class="number">0x66</span>, <span class="number">0x4C</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0x3E</span>, <span class="number">0x31</span>, <span class="number">0x4D</span>, <span class="number">0x2E</span>, <span class="number">0x1E</span>, <span class="number">0x73</span>]</span><br><span class="line">a2 = [<span class="number">73</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">67</span>]  #<span class="symbol">ISCC</span></span><br><span class="line">a3 = <span class="number">23</span></span><br><span class="line"></span><br><span class="line">for j in range(<span class="number">3</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line"></span><br><span class="line">    a1[j + <span class="number">16</span>] -= a2[j] // <span class="number">5</span></span><br><span class="line">    a1[j + <span class="number">12</span>] -= a1[j+<span class="number">4</span>]</span><br><span class="line">    a1[j + <span class="number">8</span>] -= <span class="number">2</span> * j</span><br><span class="line">    a1[j + <span class="number">4</span>] -= a2[j] <span class="comment">% 5</span></span><br><span class="line">    a1[j] -= j ^ - (a2[j] <span class="comment">% 4)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in range(<span class="number">22</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">    a1[i] -= i</span><br><span class="line">    a1[i] += <span class="number">32</span></span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(a1)</span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">for num in a1:</span><br><span class="line">    char = chr(num)</span><br><span class="line">    result += char</span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p>首先，给定了三个变量：</p>
<ul>
<li><code>a1</code>：一个包含整数的列表。</li>
<li><code>a2</code>：另一个包含整数的列表。</li>
<li><code>a3</code>：一个整数。</li>
</ul>
<p>然后，通过两个循环对列表 <code>a1</code> 进行操作：</p>
<p>第一个循环：</p>
<ul>
<li><p>使用 <code>range(3, -1, -1)</code> 来逆序迭代整数 3 到 0。</p>
</li>
<li><p>在每次迭代中，对列表 </p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="built_in">a1</span></span><br></pre></td></tr></table></figure>

<p> 中的一些元素进行修改。</p>
<ul>
<li><code>a1[j + 16] -= a2[j] // 5</code>：将 <code>a2[j]</code> 整除以 5 的商减去 <code>a1[j + 16]</code> 的值。</li>
<li><code>a1[j + 12] -= a1[j + 4]</code>：将 <code>a1[j + 4]</code> 的值减去 <code>a1[j + 12]</code> 的值。</li>
<li><code>a1[j + 8] -= 2 * j</code>：将 2 乘以 <code>j</code> 的值减去 <code>a1[j + 8]</code> 的值。</li>
<li><code>a1[j + 4] -= a2[j] % 5</code>：将 <code>a2[j]</code> 对 5 取模的结果减去 <code>a1[j + 4]</code> 的值。</li>
<li><code>a1[j] -= j ^ - (a2[j] % 4)</code>：将 <code>j</code> 异或上 <code>-(a2[j] % 4)</code> 的结果减去 <code>a1[j]</code> 的值。</li>
</ul>
</li>
</ul>
<p>第二个循环：</p>
<ul>
<li><p>使用 <code>range(22, -1, -1)</code> 来逆序迭代整数 22 到 0。</p>
</li>
<li><p>在每次迭代中，对列表 </p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="built_in">a1</span></span><br></pre></td></tr></table></figure>

<p> 中的元素进行修改。</p>
<ul>
<li><code>a1[i] -= i</code>：将 <code>i</code> 的值减去 <code>a1[i]</code> 的值。</li>
<li><code>a1[i] += 32</code>：将 <code>a1[i]</code> 的值加上 32。</li>
</ul>
</li>
</ul>
<p>最后，通过遍历列表 <code>a1</code> 中的每个整数，将其转换为对应的字符，并将这些字符连接起来构成字符串 <code>result</code>。</p>
<p>ISCC{QMP&lt;!?7]@)F=2M:)}</p>
<h2 id="Congratulations"><a href="#Congratulations" class="headerlink" title="Congratulations"></a>Congratulations</h2><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305231959838.png" alt="image-20230523195912793"></p>
<p>32位</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305232009705.png" alt="image-20230523200914619"></p>
<ol>
<li><p>定义了一些变量：</p>
<ul>
<li><code>i</code>：整型变量，用于循环计数。</li>
<li><code>v5</code>：字符数组，长度为 40，用于存储数据。</li>
<li><code>v6</code>：整型变量，用于存储值 26。</li>
<li><code>v7</code>：字符数组，长度为 28，用于存储字符串 “Oh-this-is-the-right-flag!”。</li>
<li><code>v8</code>：字符数组，长度为 12，用于存储字符串 “ISCC”。</li>
<li><code>v9</code>：字符数组，长度为 25，存储了一些特定的字符。</li>
<li><code>v10</code>：字符数组，长度为 5，存储了一个下划线字符和一个空字符。</li>
</ul>
</li>
<li><p>初始化了数组 <code>v9</code> 中的一些特定字符。</p>
</li>
<li><p>初始化了数组 <code>v10</code> 中的值。</p>
</li>
<li><p>使用 <code>qmemcpy</code> 函数将字符串 “ISCC” 复制到数组 <code>v8</code> 中。</p>
</li>
<li><p>使用 <code>strcpy</code> 函数将字符串 “Oh-this-is-the-right-flag!” 复制到数组 <code>v7</code> 中。</p>
</li>
<li><p>将值 26 赋给变量 <code>v6</code>。</p>
</li>
<li><p>调用了 <code>sub_4865AD</code> 函数，传递了两个参数。</p>
</li>
<li><p>调用了 <code>sub_484D2F</code> 函数，传递了两个参数。</p>
</li>
<li><p>调用了 <code>sub_488D5D</code> 函数，传递了两个参数。</p>
</li>
<li><p>调用了 <code>sub_489410</code> 函数，传递了三个参数。</p>
</li>
<li><p>使用循环对变量 <code>i</code> 进行迭代，从 0 到 <code>v6-1</code>。</p>
</li>
<li><p>在循环中，进行了一些条件判断：</p>
<ul>
<li>如果 <code>v8[3]</code> 为零，则调用 <code>sub_4865AD</code> 函数并输出一条信息，然后调用系统命令 <code>pause</code>。</li>
<li>如果 <code>i</code> 不等于 24 并且 <code>v5[i]</code> 不等于 <code>v9[i]</code>，则调用 <code>sub_4865AD</code> 函数并输出一条信息，然后调用系统命令 <code>pause</code>。</li>
</ul>
</li>
<li><p>如果循环正常完成，调用 <code>sub_4865AD</code> 函数并输出一条恭喜信息，然后调用系统命令 <code>pause</code>。</p>
</li>
<li><p>返回 0，表示程序正常结束。</p>
<p>根据代码写脚本</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305232009713.png" alt="image-20230523200953670"></p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">  char v9[<span class="number">26</span>];</span><br><span class="line">  char a2[<span class="number">4</span>]=<span class="string">&quot;ISCC&quot;</span>;</span><br><span class="line">  v9[<span class="number">0</span>] = <span class="number">-91</span>;</span><br><span class="line">  v9[<span class="number">1</span>] = <span class="number">67</span>;</span><br><span class="line">  v9[<span class="number">2</span>] = <span class="number">83</span>;</span><br><span class="line">  v9[<span class="number">3</span>] = <span class="number">-108</span>;</span><br><span class="line">  v9[<span class="number">4</span>] = <span class="number">92</span>;</span><br><span class="line">  v9[<span class="number">5</span>] = <span class="number">-82</span>;</span><br><span class="line">  v9[<span class="number">6</span>] = <span class="number">126</span>;</span><br><span class="line">  v9[<span class="number">7</span>] = <span class="number">-75</span>;</span><br><span class="line">  v9[<span class="number">8</span>] = <span class="number">87</span>;</span><br><span class="line">  v9[<span class="number">9</span>] = <span class="number">-113</span>;</span><br><span class="line">  v9[<span class="number">10</span>] = <span class="number">67</span>;</span><br><span class="line">  v9[<span class="number">11</span>] = <span class="number">-86</span>;</span><br><span class="line">  v9[<span class="number">12</span>] = <span class="number">103</span>;</span><br><span class="line">  v9[<span class="number">13</span>] = <span class="number">-102</span>;</span><br><span class="line">  v9[<span class="number">14</span>] = <span class="number">84</span>;</span><br><span class="line">  v9[<span class="number">15</span>] = <span class="number">-83</span>;</span><br><span class="line">  v9[<span class="number">16</span>] = <span class="number">89</span>;</span><br><span class="line">  v9[<span class="number">17</span>] = <span class="number">92</span>;</span><br><span class="line">  v9[<span class="number">18</span>] = <span class="number">96</span>;</span><br><span class="line">  v9[<span class="number">19</span>] = <span class="number">-65</span>;</span><br><span class="line">  v9[<span class="number">20</span>] = <span class="number">-73</span>;</span><br><span class="line">  v9[<span class="number">21</span>] = <span class="number">86</span>;</span><br><span class="line">  v9[<span class="number">22</span>] = <span class="number">-127</span>;</span><br><span class="line">  v9[<span class="number">23</span>] = <span class="number">14</span>;</span><br><span class="line">  v9[<span class="number">24</span>] = <span class="number">-9</span>;</span><br><span class="line">  v9[<span class="number">25</span>] = <span class="number">95</span>;</span><br><span class="line">  for (int k = <span class="number">0</span>; ; ++k )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( k &gt;= <span class="number">25</span> )</span><br><span class="line">      break;</span><br><span class="line">    v9[k] ^= a2[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  for(int i=<span class="number">24</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        v9[i]+=v9[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  for (int i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i )&#123;</span><br><span class="line">    v9[i] += <span class="number">30</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  for (int i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i )</span><br><span class="line">    printf(<span class="string">&quot;%c&quot;</span>,v9[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HRBB{loB\X|ls?voqgX%9UP~!}</p>
<p>用凯撒密码加密，偏移量为1</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305232010658.png" alt="image-20230523201033628"></p>
<p>ISCC{mpC\Y|mt?wprhY%9VQ~!}</p>
<h3 id="解题收获：-8"><a href="#解题收获：-8" class="headerlink" title="解题收获："></a>解题收获：</h3><p>学会了根据IDA显示的代码进行深入分析，知道逆向程序的运行逻辑。学会了根据反编译代码编写脚本。</p>
<h2 id="狂飙"><a href="#狂飙" class="headerlink" title="狂飙"></a>狂飙</h2><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mod</span> = <span class="number">38</span></span><br><span class="line">a1 = <span class="number">0x50d7c32f4a659</span></span><br><span class="line">a2 =<span class="string">&quot;4-chloroisatin&quot;</span></span><br><span class="line">a3 =<span class="string">&quot;Ammosamide B&quot;</span></span><br><span class="line">mod_out = (<span class="built_in">int</span>((a1 % <span class="number">100000</span>) % <span class="keyword">mod</span>)) ^ (<span class="keyword">mod</span> * (<span class="built_in">int</span>)(a1 % <span class="number">100000</span>))</span><br><span class="line">flag = <span class="string">&quot;ISCC&#123;&quot;</span> + <span class="built_in">str</span>(mod_out) + <span class="string">&quot;_&quot;</span> + a2 + <span class="string">&quot;_&quot;</span> + <span class="built_in">str</span>(a1) + <span class="string">&quot;_&quot;</span> +a3 + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="keyword">print</span>(flag)</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305311938597.png" alt="image-20230531193841472"></p>
<p>ISCC{2023157_4-chloroisatin_1422201965553241_Ammosamide B}</p>
<h3 id="解题收获：-9"><a href="#解题收获：-9" class="headerlink" title="解题收获："></a>解题收获：</h3><p>主要就是写脚本。</p>
<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="羊了个羊"><a href="#羊了个羊" class="headerlink" title="羊了个羊"></a>羊了个羊</h2><p>打开管理员控制工具</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305232050629.png" alt="image-20230523205047577"></p>
<p>查看源代码</p>
<p>CTRL+F搜索关键字通关</p>
<p>找到base64加密U1ZORFEzdGtka3B2UVU1cFozTkNWalpzY3poS1IxRktTamw0U1dVM2MwUllOM1ZPY1gwPQ&#x3D;&#x3D;</p>
<p>解密两次即可</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305232051712.png" alt="image-20230523205157678"></p>
<p>ISCC{dvJoANigsBV6ls8JGQJJ9xIe7sDX7uNq}</p>
<h3 id="解题收获：-10"><a href="#解题收获：-10" class="headerlink" title="解题收获："></a>解题收获：</h3><p>搜索关键词。</p>
<h2 id="小周的密码锁"><a href="#小周的密码锁" class="headerlink" title="小周的密码锁"></a>小周的密码锁</h2><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305222046171.png" alt="image-20230522204619083"></p>
<p>猜测密码为12345</p>
<p>得到源码</p>
<p><a href="http://47.94.14.162:10008/?password=1&password2=5">http://47.94.14.162:10008/?password=1&amp;password2=5</a></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305222047124.png" alt="image-20230522204740061"></p>
<p>注意到这个地方</p>
<p>复制下来拉进010</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305222051889.png" alt="image-20230522205134861"></p>
<p>在十六进制前加一个百分号就可以了</p>
<p>继续代码审计</p>
<!DOCTYPE html>
<head>
  <meta charset="utf-8" />
  <title>Get flag</title>
  <link rel="stylesheet" href="./sb-admin-2.css" />
</head>
<style>
    .container-1 {
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
    }
</style>
<body class="">
<?php
  function MyHashCode($str)
  {
    $h = 0;
    $len = strlen($str);
    for ($i = 0; $i < $len; $i++) {
      $hash = intval40(intval40(40 * $hash) + ord($str[$i]));
    }
    return abs($hash);
  }

<p>  function intval40($code)<br>  {<br>    $falg &#x3D; $code &gt;&gt; 32;<br>    if ($falg &#x3D;&#x3D; 1) {<br>      $code &#x3D; ~($code - 1);<br>      return $code * -1;<br>    } else {<br>      return $code;<br>    }<br>  }<br>  function Checked($str){<br>    $p1 &#x3D; ‘&#x2F;ISCC&#x2F;‘;<br>    if (preg_match($p1, $str)){<br>      return false;<br>    }<br>    return true;<br>  }</p>
<p>  function SecurityCheck($sha1,$sha2,$user){</p>
<pre><code>$p1 = &#39;/^[a-z]+$/&#39;;
$p2 = &#39;/^[A-Z]+$/&#39;;
</code></pre>
<p>​    if (preg_match($p1, $sha1) &amp;&amp; preg_match($p2, $sha2)){<br>​      $sha1 &#x3D; strtoupper($sha1);<br>​      $sha2 &#x3D; strtolower($sha2);<br>​      $user &#x3D; strtoupper($user);<br>​      $crypto &#x3D; $sha1 ^ $sha2;<br>​    }<br>​    else{<br>​      die(“wrong”);<br>​    }    </p>
<p>​    return array($crypto, $user);<br>  }<br>  error_reporting(0);</p>
<p>  $user &#x3D; $_GET[‘username’];&#x2F;&#x2F;user<br>  $sha1 &#x3D; $_GET[‘sha1’];&#x2F;&#x2F;sha1<br>  $sha2 &#x3D; $_GET[‘‮⁦&#x2F;&#x2F;sha2⁩⁦sha2’];<br>  &#x2F;&#x2F;‮⁦see me ⁩⁦can you </p>
<p>  if (isset ($_GET[‘password’])) {<br>    if ($_GET[‘password2’] &#x3D;&#x3D; 5){<br>      show_source(<strong>FILE</strong>);<br>    }<br>    else{<br>      &#x2F;&#x2F;Try to encrypt<br>      if(isset($sha1) &amp;&amp; isset($sha2) &amp;&amp; isset($user)){<br>        [$crypto, $user] &#x3D; SecurityCheck($sha1,$sha2,$user);<br>        if((substr(sha1($crypto),-6,6) &#x3D;&#x3D;&#x3D; substr(sha1($user),-6,6)) &amp;&amp; (substr(sha1($user),-6,6)) &#x3D;&#x3D;&#x3D; ‘a05c53’){&#x2F;&#x2F;welcome to ISCC</p>
<pre><code>      if((MyHashcode(&quot;ISCCNOTHARD&quot;) === MyHashcode($_GET[&#39;password&#39;]))&amp;&amp;Checked($_GET[&#39;password&#39;]))&#123;
        include(&quot;f1ag.php&quot;);
        echo $flag;
      &#125;else&#123;
        die(&quot;就快解开了!&quot;);
      &#125;
      
    &#125;
    else&#123;
      die(&quot;真的想不起来密码了吗?&quot;);
    &#125;
  &#125;else&#123;
    die(&quot;密钥错误!&quot;);
  &#125;
&#125;  
</code></pre>
<p>  }    </p>
<p>  mt_srand((microtime() ^ rand(1, 10000)) % rand(1, 1e4) + rand(1, 1e4));<br>?&gt;</p>
<p>求出加密后为a05c53的user值</p>
<p>脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$hashedNumber</span> = 0;</span><br><span class="line"><span class="variable">$targetSuffix</span> = <span class="string">&quot;a05c53&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="variable">$hash</span> = sha1(<span class="variable">$hashedNumber</span>);</span><br><span class="line">    <span class="variable">$suffix</span> = substr(<span class="variable">$hash</span>, -6);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$suffix</span> === <span class="variable">$targetSuffix</span>) &#123;</span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$hashedNumber</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$hashedNumber</span>&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>得到user为14987637</p>
<p>在写一个脚本得到sha1和sha2</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SecurityCheck</span>(<span class="params"><span class="variable">$sha1</span>, <span class="variable">$sha2</span>, <span class="variable">$user</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$p1</span> = <span class="string">&#x27;/^[a-z]+$/&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$p2</span> = <span class="string">&#x27;/^[A-Z]+$/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$p1</span>, <span class="variable">$sha1</span>) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="variable">$p2</span>, <span class="variable">$sha2</span>)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$sha1</span> = <span class="title function_ invoke__">strtoupper</span>(<span class="variable">$sha1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$sha2</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$sha2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$user</span> = <span class="title function_ invoke__">strtoupper</span>(<span class="variable">$user</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$crypto</span> = <span class="variable">$sha1</span> ^ <span class="variable">$sha2</span>;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;wrong&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(<span class="variable">$crypto</span>, <span class="variable">$user</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="string">&#x27;14987637&#x27;</span>; <span class="comment">// 已知 user 值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴力枚举 sha1 和 sha2 的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">26</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="number">26</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$k</span> = <span class="number">0</span>; <span class="variable">$k</span> &lt; <span class="number">26</span>; <span class="variable">$k</span>++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$l</span> = <span class="number">0</span>; <span class="variable">$l</span> &lt; <span class="number">26</span>; <span class="variable">$l</span>++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$sha1</span> = <span class="title function_ invoke__">chr</span>(<span class="number">97</span> + <span class="variable">$i</span>) . <span class="title function_ invoke__">chr</span>(<span class="number">97</span> + <span class="variable">$j</span>) . <span class="title function_ invoke__">chr</span>(<span class="number">97</span> + <span class="variable">$k</span>) . <span class="title function_ invoke__">chr</span>(<span class="number">97</span> + <span class="variable">$l</span>); <span class="comment">// 生成 sha1 值</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="variable">$m</span> = <span class="number">0</span>; <span class="variable">$m</span> &lt; <span class="number">26</span>; <span class="variable">$m</span>++) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="variable">$n</span> = <span class="number">0</span>; <span class="variable">$n</span> &lt; <span class="number">26</span>; <span class="variable">$n</span>++) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span> (<span class="variable">$o</span> = <span class="number">0</span>; <span class="variable">$o</span> &lt; <span class="number">26</span>; <span class="variable">$o</span>++) &#123;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span> (<span class="variable">$p</span> = <span class="number">0</span>; <span class="variable">$p</span> &lt; <span class="number">26</span>; <span class="variable">$p</span>++) &#123;</span><br><span class="line"></span><br><span class="line">                                <span class="variable">$sha2</span> = <span class="title function_ invoke__">chr</span>(<span class="number">65</span> + <span class="variable">$m</span>) . <span class="title function_ invoke__">chr</span>(<span class="number">65</span> + <span class="variable">$n</span>) . <span class="title function_ invoke__">chr</span>(<span class="number">65</span> + <span class="variable">$o</span>) . <span class="title function_ invoke__">chr</span>(<span class="number">65</span> + <span class="variable">$p</span>); <span class="comment">// 生成 sha2 值</span></span><br><span class="line"></span><br><span class="line">                                [<span class="variable">$crypto</span>, <span class="variable">$user</span>] = <span class="title function_ invoke__">SecurityCheck</span>(<span class="variable">$sha1</span>, <span class="variable">$sha2</span>, <span class="variable">$user</span>); <span class="comment">// 加密</span></span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span> ((<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$crypto</span>), -<span class="number">6</span>, <span class="number">6</span>) === <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$user</span>), -<span class="number">6</span>, <span class="number">6</span>)) &amp;&amp; (<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$user</span>), -<span class="number">6</span>, <span class="number">6</span>)) === <span class="string">&#x27;a05c53&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">echo</span> <span class="string">&quot;sha1: <span class="subst">$sha1</span>, sha2: <span class="subst">$sha2</span>\n&quot;</span>; <span class="comment">// 输出符合条件的 sha1 和 sha2 值</span></span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">echo</span> <span class="string">&quot;flag\n&quot;</span>; <span class="comment">// 输出 flag</span></span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">exit</span>(); <span class="comment">// 结束程序</span></span><br><span class="line"></span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305232031196.png"></p>
<p>sha1: aaad, sha2: JEJX</p>
<p>因为发现xxxxNOTHARD经过加密后几位的数都是一样的然后就可以进行枚举爆破了py脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_hash_code</span>(<span class="params">s</span>):</span><br><span class="line">   h = <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">       h = ((h * <span class="number">40</span>) &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span>) + <span class="built_in">ord</span>(c)</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">abs</span>(int40(h))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">int40</span>(<span class="params">n</span>):</span><br><span class="line">   <span class="keyword">if</span> n &gt;&gt; <span class="number">39</span>:</span><br><span class="line">       n = ~((n &amp; <span class="number">0xFFFFFFFFFFFFFFF</span>) - <span class="number">1</span>)</span><br><span class="line">       <span class="keyword">return</span> -n</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> n</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_password</span>(<span class="params">password</span>):</span><br><span class="line">   <span class="keyword">return</span> my_hash_code(password) == my_hash_code(<span class="string">&quot;ISCCNOTHARD&quot;</span>) <span class="keyword">and</span> <span class="string">&quot;ISCC&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> password</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> password <span class="keyword">in</span> itertools.product(<span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>, repeat=<span class="number">4</span>):</span><br><span class="line">   password = <span class="string">&quot;&quot;</span>.join(password) + <span class="string">&quot;NOTHARD&quot;</span></span><br><span class="line">   <span class="built_in">print</span>(password)</span><br><span class="line">   <span class="keyword">if</span> check_password(password):</span><br><span class="line">       <span class="built_in">print</span>(password)</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&quot;ok mima&quot;</span>)</span><br><span class="line">       <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305232035927.png" alt="image-20230523203558890"></p>
<p>发送请求拿到flag</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305232037428.png" alt="image-20230523203755392"></p>
<p>ISCC{NbynkooTT0mKyDxzwpFNSTrdHESj8iEi}</p>
<h3 id="解题收获：-11"><a href="#解题收获：-11" class="headerlink" title="解题收获："></a>解题收获：</h3><p>学会了代码审计，了解了PHP脚本的编写。以及爆破加密。</p>
<h1 id="mobile"><a href="#mobile" class="headerlink" title="mobile"></a>mobile</h1><h2 id="NOJAVA"><a href="#NOJAVA" class="headerlink" title="NOJAVA"></a>NOJAVA</h2><p>GDAE打开APK文件</p>
<p>找到这个函数</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305222136104.png" alt="image-20230522213621067"></p>
<p>这里发现关键字符串</p>
<p>直接点这个就可弹出下图</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305222138876.png" alt="image-20230522213853845"></p>
<p>比较函数</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305222135531.png" alt="image-20230522213527485"></p>
<p>写exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text=<span class="string">&#x27;YfjfYejZfjYeeeejjiYijjZi&#x27;</span></span><br><span class="line">binary = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">format</span>(<span class="built_in">ord</span>(i), <span class="string">&#x27;08b&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> text)</span><br><span class="line">a = [binary[i:i+<span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary), <span class="number">4</span>)]</span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line">payload=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line"> <span class="keyword">if</span> i==<span class="string">&quot;1001&quot;</span>:</span><br><span class="line">  payload+=<span class="string">&quot;10&quot;</span></span><br><span class="line"> <span class="keyword">elif</span> i==<span class="string">&quot;0110&quot;</span>:</span><br><span class="line">  payload+=<span class="string">&quot;01&quot;</span></span><br><span class="line"> <span class="keyword">elif</span> i==<span class="string">&quot;1010&quot;</span>:</span><br><span class="line">  payload+=<span class="string">&quot;11&quot;</span></span><br><span class="line"> <span class="keyword">elif</span> i==<span class="string">&quot;0101&quot;</span>:</span><br><span class="line">  payload+=<span class="string">&quot;00&quot;</span></span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;waaa&quot;</span>)</span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(payload[i:i+<span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(payload), <span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305222140810.png" alt="image-20230522214049771"></p>
<p>ISCC</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>ISCC</tag>
      </tags>
  </entry>
  <entry>
    <title>3.26周赛</title>
    <url>/2023/03/28/3-26%E5%91%A8%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="鲜衣怒马少年郎，谁人不识理塘王！"><a href="#鲜衣怒马少年郎，谁人不识理塘王！" class="headerlink" title="鲜衣怒马少年郎，谁人不识理塘王！"></a>鲜衣怒马少年郎，谁人不识理塘王！</h2><p>顶真</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SLsec</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;鍒€涓嶉攱鍒╅┈澶槮&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pass</span>=<span class="string">&#x27;浣犳嬁浠€涔堝拰鍥涚偣鏂�&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$jk</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">a4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;jk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">a6</span>(<span class="params"><span class="variable">$ding</span>,<span class="variable">$zhen</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt; name==<span class="variable">$ding</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;pass==<span class="variable">$zhen</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">a8</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;jk)&#123;<span class="comment">#$jk为真</span></span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;椴滆。鎬掗┈灏戝勾閮庯紝璋佷汉涓嶈瘑鐞嗗鐜嬶紒&quot;</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$name</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$pass</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">a6</span>(<span class="variable">$name</span>,<span class="variable">$pass</span>))&#123;<span class="comment">#赋值判断pass传参与两个GET是否相同</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">a4</span>())&#123;<span class="comment">#赋值</span></span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">a8</span>();&#125;<span class="comment">#调用flag</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Snow leopards are really hard to ride, so it&#x27;s better to exchange money for an Audi&quot;</span>;</span><br><span class="line">    &#125;&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SLsec</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pass</span>=<span class="string">&#x27;aa&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$jk</span>=<span class="literal">true</span>;&#125;</span><br><span class="line">  <span class="variable">$f</span>=<span class="keyword">new</span> <span class="title class_">SLsec</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$f</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://k5hai-1311151548.cos.ap-shanghai.myqcloud.com/https://k5hai-1311151548.cos.ap-shanghai.myqcloud.comimage-20230326200954241.png">https://k5hai-1311151548.cos.ap-shanghai.myqcloud.com/https://k5hai-1311151548.cos.ap-shanghai.myqcloud.comimage-20230326200954241.png</a></p>
<p>play：GET： name&#x3D;a&amp;pass&#x3D;aa</p>
<p>​	     POST:   user&#x3D;O:5:”SLsec”:3:{s:4:”name”;s:1:”a”;s:4:”pass”;s:2:”aa”;s:2:”jk”;b:1;}</p>
<h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="babyrsa"><a href="#babyrsa" class="headerlink" title="babyrsa"></a>babyrsa</h2><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">import gmpy2</span><br><span class="line">p= 174900179045398405758362887050510099953351230680589941223587187096927676318250039003867347118828470850766614025136710989402078055968449696991925901611318398319579226096026113980420314613233522410263933804832601250567540744629955554545762144406833636478599885984277733223077146277644459138695484730091497123653</span><br><span class="line">q= 138394168894464614599095635109542670799766048108401527799025178725205133812543876982783399176166727189388896418668604671443249386259427967695540806910521362186865886429031334061503953791903407614931162328753160467494420213786798800975785789856116685244900988587164035039772328579334638131513694977152566697693</span><br><span class="line">dq= 91144988599155922537286812069488697332186431610461674212452885608698963724568088535192289473758461311143377744214326484716015838529829408451331802003020019755397796512654690339237890864185649014688783869167705450325681146031490758620578699998011937814370759561761662578187180465099739857369029748140120600665</span><br><span class="line">dp= 77086099023854203737282939293131883320148165131282183381041486477787447250448637817213304263658092078129814396693072568608252203284383928126276449456687549559196269981593821846047893367155199274005122723844388469454558713530315183683329104798684553606121087426276184813900290984173218215988206302221537366933</span><br><span class="line">c= 15801371432169186780418480692589791195238785876344412995045613608181370212202255665942402417893437199493695445538341476746293760869621577715385796212569911097161252465453342990879413408685475673255790355354475333896669490479548332300912398201417641777563849663680004298227798906936140992367106039486966585574927214313333872682519241375796031187317957899045859494277570277966275262219924901316942847426675912933662265462110997773928571167535352177539455991039999517915239795197245498033201847388365903662518433723721091041449528248327695253818581438003566115867963542838871840099584964228370817957241460684463142116638</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">I = gmpy2.invert(q,p)</span><br><span class="line">mp = pow(c,dp,p)</span><br><span class="line">mq = pow(c,dq,q)               <span class="comment">#求幂取模运算</span></span><br><span class="line"></span><br><span class="line">m = (((mp-mq)*I)%p)*q+mq       <span class="comment">#求明文公式</span></span><br><span class="line"></span><br><span class="line">print( long_to_bytes(m))         <span class="comment">#转为十六进制</span></span><br></pre></td></tr></table></figure>

<h2 id="base？"><a href="#base？" class="headerlink" title="base？"></a>base？</h2><p>很简单的base64换表解码。<br>首先写个python脚本提取编码表</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">这是提取的编码表：</span><br><span class="line">JKLxNOMyUzVABCDEFGH798PQIacbdefghijklmWXYZ0123456SRTnopqrstuvw+<span class="string">/=</span></span><br></pre></td></tr></table></figure>

<p>然后编写脚本解码：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">import <span class="built_in">base64</span></span><br><span class="line">import <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;9nSTaPCu8MimQoamdXmg9qGRIPsXa8wjIQCmQTIngF==&quot;</span></span><br><span class="line"></span><br><span class="line">string1 = <span class="string">&quot;JKLxNOMyUzVABCDEFGH798PQIacbdefghijklmWXYZ0123456SRTnopqrstuvw+/=&quot;</span></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">base64</span>.b64decode(str1.<span class="built_in">translate</span>(str.maketrans(string1,string2))))</span><br></pre></td></tr></table></figure>

<p>也可以网站解密：<br><img src="https://xmzbk-1310919595.cos.ap-nanjing.myqcloud.com/image-20230326113727063.png" alt="image-20230326113727063"></p>
<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="看不懂的文件"><a href="#看不懂的文件" class="headerlink" title="看不懂的文件"></a>看不懂的文件</h2><p>把文件复制到虚拟机，打开终端执行 cat flag就出flag了</p>
<p>flag:SLsec{!2023_Will_Be_Special,2022_Was_Not!}</p>
<h2 id="里在干什莫？"><a href="#里在干什莫？" class="headerlink" title="里在干什莫？"></a>里在干什莫？</h2><p>16进制文件是反的很容易看出来</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">with <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) as file: <span class="selector-id">#flag</span>.txt里保存的是反着的<span class="number">16</span>进制文本</span><br><span class="line">    re_str = file<span class="selector-class">.read</span>()</span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> re_str:</span><br><span class="line">   tmp += <span class="selector-tag">i</span><span class="selector-class">.strip</span>()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(tmp[::-<span class="number">1</span>])</span></span></span><br><span class="line">#<span class="number">504</span>B0304140000000800F8BE7956F4507576100000000E00000008000000666C61672E747874AB4D2D2E4A2D4B2DAA4E4E2DF6090600504B01021400140000000800F8BE7956F4507576100000000E000000080024000000000000002000000000000000666C61672E7478740A00200000000000010018001F7EE443325FD901FF777E4A325FD901C6D233C4245FD901504B050600000000010001005A000000360000000000</span><br></pre></td></tr></table></figure>

<p>将输出的16进制010重新读取一下就是flag</p>
<h2 id="你知道什么是xor吗？"><a href="#你知道什么是xor吗？" class="headerlink" title="你知道什么是xor吗？"></a>你知道什么是xor吗？</h2><p>这道题是shangu👴赞助的</p>
<p>附件很简单，一个key，一个flag,还有题目的关键描述 ‘xor’</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">key</span> = <span class="string">&#x27;jaks&#123;qwertyui-opas-dfgh-jklz-xcvbnmqwertu&#125;&#x27;</span></span><br><span class="line"><span class="attr">flag</span> = <span class="string">&#x27;óòõëÿ¾»®¿íâë÷ÿñë­îÿ¨ û ÿ¤­¥±ÿ¿ú½®÷öïº®º²¼ÿ&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这道题脑洞很大，所以我就按我的分析来了</p>
<p>首先看key，标准的flag格式，但是前四位被替换成了’jaks’，里面是按照键盘的qwer顺序，最开始分析的是字母在表中的顺序之类的，但是死活凑不出flag就放弃了。</p>
<p>换一条思路，异或具有可逆性，或许’jask‘与’flag‘异或的结果就是我们要找的关键</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312153303362.png" alt="image-20230312153303362"></p>
<p>再看flag这串乱码，先取前四位找一下规律,由于乱码的ascii码值通常是很大的，超出了标准ascii码的范围，我们可以先看一下他的ascii值是多少</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312153728805.png" alt="image-20230312153728805"></p>
<p>还是找不到什么规律，由于xor本质上是二进制比特位之间的操作，我们进一步观察他们的二进制形式</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312154001470.png" alt="image-20230312154001470"></p>
<p>再看’jask‘与’flag‘异或结果的二进制</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230312154148276.png" alt="image-20230312154148276"></p>
<p>其实到这里就已经很明显了，</p>
<p>将flag的各位取反再与key异或</p>
<p>脚本</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line"><span class="keyword">key</span> = <span class="string">&#x27;jaks&#123;qwertyui-opas-dfgh-jklz-xcvbnmqwertu&#125;&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;óòõëÿ¾»®¿íâë÷ÿñë­îÿ¨ û ÿ¤­¥±ÿ¿ú½®÷öïº®º²¼ÿ&#x27;</span></span><br><span class="line"><span class="keyword">data </span>= [0xff ^ ord(i) for i <span class="keyword">in</span> flag]</span><br><span class="line">for i <span class="keyword">in</span> <span class="meta">range</span>(le<span class="meta">n</span>(data)):</span><br><span class="line">    pr<span class="meta">int</span>(chr(ord(<span class="keyword">key</span>[i])^data[i]),<span class="keyword">end</span>=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>最后看一下出题人视角</p>
<p>拿到flag &gt; 与随便打出来的key异或 &gt; 将异或结果按位取反 &gt; 给出附件</p>
<h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="re2"><a href="#re2" class="headerlink" title="re2"></a>re2</h2><p>程序是有一个upx壳，壳没有魔改可以直接脱</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230326203037222.png" alt="image-20230326203037222"></p>
<p>首先是通过循环可以看出来12个总共12位，<strong>v4</strong>含有转义字符需要去一下，所以这里为了方便直接用ascii码，加密就是找到v4中字符在__data_strart__ 表中的位置，然后将他的ascii减1（其实可以看出来表中的字符就是倒着的ascii码表）</p>
<p>脚本</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">v4 = <span class="selector-attr">[42,70,39,34,78,44,34,40,73,63,43,64]</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">__data_strart__ = <span class="string">&#x27;~&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(\&#x27;&amp;%$# !&quot;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> v4:</span><br><span class="line">    flag += <span class="built_in">chr</span>(__data_strart__<span class="selector-class">.find</span>(<span class="built_in">chr</span>(i))+<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="贪吃蛇"><a href="#贪吃蛇" class="headerlink" title="贪吃蛇"></a>贪吃蛇</h2><p>贪吃蛇小游戏来自SWPUCTF 2022 新生赛</p>
<p>反编译可以看到一个v18</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230326205454666.png" alt="image-20230326205454666"></p>
<p>这个代码写这里八九不离十可以猜到v18就是分数</p>
<p>ce直接改数值</p>
<p>因为刚开始v18&#x3D;4，就从4开始扫，分数加一慢慢筛选</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230326211220393.png" alt="image-20230326211220393"></p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230326211243449.png" alt="image-20230326211243449"></p>
<p>改下数值直接就能出flag</p>
<p><img src="https://hyup-1311193709.cos.ap-nanjing.myqcloud.com/blogimg/image-20230326211341663.png" alt="image-20230326211341663"></p>
]]></content>
      <categories>
        <category>周赛</category>
      </categories>
      <tags>
        <tag>周赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>PWN1</title>
    <url>/2023/05/07/PWN1/</url>
    <content><![CDATA[<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305071902238.png" alt="image-20230507190251136"></p>
<p>64位</p>
]]></content>
      <tags>
        <tag>实验</tag>
      </tags>
  </entry>
  <entry>
    <title>4.22周赛【下午场】</title>
    <url>/2023/04/22/4-22%E5%91%A8%E8%B5%9B%E3%80%90%E4%B8%8B%E5%8D%88%E5%9C%BA%E3%80%91/</url>
    <content><![CDATA[<h1 id="BabyRE"><a href="#BabyRE" class="headerlink" title="BabyRE"></a>BabyRE</h1><p>见2023西湖论剑——BabyRE</p>
<p>[(30条消息) 2023西湖论剑RE–BabyRE_XiaozaYa的博客-CSDN博客](<a href="https://blog.csdn.net/qq_61670993/article/details/129345972?ops_request_misc=%7B%22request_id%22:%22168214434416800215028269%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=168214434416800215028269&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-129345972-null-null.142%5Ev86%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=DASCTF">https://blog.csdn.net/qq_61670993/article/details/129345972?ops_request_misc=%7B%22request%5Fid%22%3A%22168214434416800215028269%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=168214434416800215028269&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-129345972-null-null.142^v86^control_2,239^v2^insert_chatgpt&amp;utm_term=DASCTF</a> babyre&amp;spm&#x3D;1018.2226.3001.4187)</p>
<h1 id="一根香烟"><a href="#一根香烟" class="headerlink" title="一根香烟"></a>一根香烟</h1><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304221444942.png" alt="73ebc735f0eb5cbedf9220bc3e3fa4d"></p>
<p>通过向该页面POST请求一个名为”heizi”，值为”ding\nzhen”，得到</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304221444829.png" alt="a2476b27c91d9e6bfac6514b0169d4e"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304221445944.png" alt="a1b98671e2520b187a7ea4613ea4184"></p>
<p>再将fffflaaa09g.php输入网址后，解出</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304221445012.png" alt="c4f9080e521723bb4cd864e92966e86"></p>
]]></content>
      <categories>
        <category>周赛</category>
      </categories>
      <tags>
        <tag>周赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>【深入理解计算机系统】CSAPP-实验一：DataLab思路以及代码</title>
    <url>/2023/04/09/%E3%80%90%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E3%80%91CSAPP-%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9ADataLab%E6%80%9D%E8%B7%AF%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="实验说明"><a href="#实验说明" class="headerlink" title="实验说明"></a>实验说明</h2><p>datalab主要是对整型以及<a href="https://so.csdn.net/so/search?q=%E6%B5%AE%E7%82%B9%E5%9E%8B&spm=1001.2101.3001.7020">浮点型</a>的实验，其中对条件语句、算数运算以及逻辑运算限定了不同的规则。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/qq_42234461/article/details/108531976?ops_request_misc=%7B%22request_id%22:%22168101666516800192280526%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=168101666516800192280526&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-108531976-null-null.142">https://blog.csdn.net/qq_42234461/article/details/108531976?ops_request_misc=%7B%22request%5Fid%22%3A%22168101666516800192280526%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=168101666516800192280526&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-108531976-null-null.142</a></p>
<p><a href="https://blog.csdn.net/qq_43855740/article/details/106843924">https://blog.csdn.net/qq_43855740/article/details/106843924</a></p>
<h1 id="itXor"><a href="#itXor" class="headerlink" title="itXor"></a>itXor</h1><p>*bitXor - x^y using only ~ and &amp; </p>
<p>*Example: bitXor(4, 5) &#x3D; 1</p>
<p>*Legal ops: ~ &amp;</p>
<p>*Max ops: 14</p>
<p>*Rating: 1</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>逐渐展开。</p>
<p>x^y &#x3D; ( <del>x&amp;y | x&amp;</del>y )</p>
<p>然后根据 (a|b) &#x3D; (a&amp;~b)把上面的或写成与</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>int bitXor(int x, int y) {</p>
<p>  int lhs &#x3D; ~x &amp; y;<br>  int rhs &#x3D; x &amp; ~y;</p>
<p>  return ~( ~lhs &amp; ~rhs );<br>}</p>
<h1 id="tmin"><a href="#tmin" class="headerlink" title="tmin"></a>tmin</h1><p>*tmin - return minimum two’s complement integer </p>
<p>*Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>
<p>*Max ops: 4</p>
<p>*Rating: 1</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p>int tmin(void) {<br>  return 1&lt;&lt;31;<br>}</p>
<h1 id="isTmax"><a href="#isTmax" class="headerlink" title="isTmax"></a>isTmax</h1><p>*isTmax - returns 1 if x is the maximum, two’s complement number,</p>
<p>*and 0 otherwise </p>
<p>*Legal ops: ! ~ &amp; ^ | +</p>
<p>*Max ops: 10</p>
<p>*Rating: 1</p>
<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>一开始我想通过 异或的方法直接判断输入值是否是目标值。即</p>
<p>int isTmax(int x) {</p>
<p>  int Tmax &#x3D; ~(1&lt;&lt;31);</p>
<p>  return !(x^Tmax);<br>}</p>
<p>然后题目不允许。只能通过别的方式。</p>
<p>可以知道: Tmax + 1 &#x3D; 0x8fffffff，而 2 * 0x8fffffff &#x3D; 0.<br>根据这个性质可以判断。是否有反例？有一个：2 * 0 &#x3D; 0，因此要排除掉这个。</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><p>int isTmax(int x) {</p>
<p>  int x_plus1 &#x3D; x+1; &#x2F;&#x2F;x_plus1得排除是0的情况（即x&#x3D;0xffffffff)<br>  int x_plus1_double &#x3D;x_plus1+x_plus1;</p>
<p>  return !x_plus1_double &amp; ( !!x_plus1 );<br>}</p>
<h1 id="allOddBits"><a href="#allOddBits" class="headerlink" title="allOddBits"></a>allOddBits</h1><p>*allOddBits - return 1 if all odd-numbered bits in word set to 1</p>
<p>*where bits are numbered from 0 (least significant) to 31 (most significant)</p>
<p>*Examples allOddBits(0xFFFFFFFD) &#x3D; 0, allOddBits(0xAAAAAAAA) &#x3D; 1</p>
<p>*Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>
<p>*Max ops: 12</p>
<p>*Rating: 2</p>
<h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>生成一个mask，把输入x的所有奇数位置的值取下来（与）。</p>
<p>然后再比对两个mask与该值是否一致。</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><p>int allOddBits(int x) {<br>  int i &#x3D; 1&lt;&lt;1;<br>  i &#x3D; (i&lt;&lt;2) | i;<br>  i &#x3D; (i&lt;&lt;4) | i;<br>  i &#x3D; (i&lt;&lt;8) | i;<br>  i &#x3D; (i&lt;&lt;16) | i; &#x2F;&#x2F;mask</p>
<p>  return !((x&amp;i)^i);<br>}</p>
<h1 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h1><p>*negate - return -x </p>
<p>*Example: negate(1) &#x3D; -1.</p>
<p>*Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>
<p>*Max ops: 5</p>
<p>*Rating: 2</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><p>int negate(int x) {</p>
<p>  return ~x + 1;<br>}</p>
<h1 id="isAsciiDigit"><a href="#isAsciiDigit" class="headerlink" title="isAsciiDigit"></a>isAsciiDigit</h1><p>*isAsciiDigit - return 1 if 0x30 &lt;&#x3D; x &lt;&#x3D; 0x39 (ASCII codes for characters ‘0’ to ‘9’)</p>
<p>*Example: isAsciiDigit(0x35) &#x3D; 1.</p>
<p>*isAsciiDigit(0x3a) &#x3D; 0.</p>
<p>*isAsciiDigit(0x05) &#x3D; 0.</p>
<p>*Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>
<p>*Max ops: 15</p>
<p>*Rating: 3</p>
<h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>用于Bit的范围判断。只能不断列举。</p>
<p>0x30是0011,0000. 而0x39是0011,1001.</p>
<p>找出这个范围内的Bit规律</p>
<ul>
<li>首先第五第六位Bit必须都是1</li>
<li>如果第四位bit是1,则第一位是0或1都可以，但2和3位要是0</li>
<li>如果第四位bit是0,第一第二第三怎样都可以。</li>
</ul>
<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><p>int isAsciiDigit(int x) {</p>
<pre><code>int mask = ~(0xf);
int bit5_6 = x &amp; mask;
int bit4 = (x&gt;&gt;3) &amp; 1;
int bit3 = (x&gt;&gt;2) &amp; 1;
int bit2 = (x&gt;&gt;1) &amp; 1;
return !(bit5_6^(3&lt;&lt;4)) &amp; ( !bit4|bit4&amp;( !bit2 &amp; !bit3 ) );
</code></pre>
<p>}</p>
<h1 id="conditional"><a href="#conditional" class="headerlink" title="conditional"></a>conditional</h1><p>*conditional - same as x ? y : z </p>
<p>*Example: conditional(2,4,5) &#x3D; 4</p>
<p>*Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>
<p>*Max ops: 16</p>
<p>*Rating: 3</p>
<h2 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h2><p>如何找一个合适的mask作为控制是最难的地方。</p>
<p>从0xffffffff入手是不错的思路</p>
<p>mask &#x3D; 0xffffffff+!x。</p>
<h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><p>int conditional(int x, int y, int z) {</p>
<p>  int mask &#x3D; <del>0 + !x;<br>  return (mask&amp;y ) | (</del>mask &amp; z);<br>}</p>
<h1 id="isLessOrEqual"><a href="#isLessOrEqual" class="headerlink" title="isLessOrEqual"></a>isLessOrEqual</h1><ul>
<li>isLessOrEqual - if x &lt;&#x3D; y then return 1, else return 0</li>
<li>Example: isLessOrEqual(4,5) &#x3D; 1.</li>
<li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li>
<li>Max ops: 24</li>
<li>Rating: 3</li>
</ul>
<h2 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h2><ul>
<li>LESS：相减，判断符号</li>
<li>Equal：异或判断是否相等</li>
</ul>
<p>以为这就结束了吗？</p>
<p>还得判断是否会溢出。</p>
<p>考虑溢出情况：</p>
<ul>
<li>正数 - 负数</li>
<li>负数 - 正数</li>
</ul>
<p>因此，如果是前者，就直接返回true，如果是后者，就直接返回false。</p>
<p>但是bit的写法会比较特殊。看看代码</p>
<h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><p>int isLessOrEqual(int x, int y) {<br>  int sum &#x3D; x + ~y +1;<br>  return<br>  (!(x^y) &#x2F;&#x2F; xy相等<br>  |( sum&gt;&gt;31)&amp;1 &#x2F;&#x2F;x+y为负数<br>  | ((x&gt;&gt;31)&amp;1) &amp; !((y&gt;&gt;31)&amp;1)) &#x2F;&#x2F;x为负数、y为正数<br>  &amp; ! (!((x&gt;&gt;31)&amp;1) &amp; ((y&gt;&gt;31)&amp;1)) ; &#x2F;&#x2F;这里必须是and<br>}</p>
<h1 id="logicalNeg"><a href="#logicalNeg" class="headerlink" title="logicalNeg"></a>logicalNeg</h1><p>*ogicalNeg - implement the ! operator, using all of</p>
<p>*the legal operators except !</p>
<p>*Examples: logicalNeg(3) &#x3D; 0, logicalNeg(0) &#x3D; 1</p>
<p>*Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>
<p>*Max ops: 12</p>
<p>*Rating: 4</p>
<h2 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h2><p>也是一种转化。投影到0和1.</p>
<p>映射关系为：</p>
<ul>
<li>如果x&#x3D;0，则输出1</li>
<li>如果x&#x3D;其他，则输出0</li>
</ul>
<p>因此我们要找出0以及其他的最大不同点，以完成投影。<br>那便是 +0 &#x3D; -0 &#x3D; 0。即 ~x +1 的符号位 &#x3D; x的符号位。</p>
<p>int logicalNeg(int x) {<br>  return   ((<del>(</del>x + 1) &amp; ~x )&gt;&gt;31 &amp; 1); &#x2F;&#x2F;这里之所以要给0和+0都取反，再与，是为了返回需要的1。如果不取反，就会返回成0<br>}</p>
<h1 id="howManyBits"><a href="#howManyBits" class="headerlink" title="howManyBits"></a>howManyBits</h1><p>howManyBits - return the minimum number of bits required to represent x in</p>
<p>*two’s complement</p>
<p>*Examples: howManyBits(12) &#x3D; 5</p>
<p>*howManyBits(298) &#x3D; 10</p>
<p>*howManyBits(-5) &#x3D; 4</p>
<p>*howManyBits(0) &#x3D; 1</p>
<p>*howManyBits(-1) &#x3D; 1</p>
<p>*howManyBits(0x80000000) &#x3D; 32</p>
<p>*Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>
<p>*Max ops: 90</p>
<p>*Rating: 4</p>
<h2 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h2><p>我们把例子都写一下，就知道这个结果是怎么来的。</p>
<ul>
<li>12: 0.1100</li>
<li>298: 01,0010,1010</li>
<li>-5: 1101</li>
<li>0: 0</li>
<li>-1: 1</li>
</ul>
<p>所以：正数的res &#x3D; 1的最高位位置m +1</p>
<p>负数的res &#x3D; 取反后：1的最高位位置m +1</p>
<p>现在问题变成，如何找出最高位</p>
<p>可以人工分治。</p>
<h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><p>int howManyBits(int x) {<br> int b16,b8,b4,b2,b1,b0;<br>    int sign&#x3D;x&gt;&gt;31;<br>    x&#x3D;sign&amp;(<del>x) | (</del>sign)&amp;x;&#x2F;&#x2F;如果x为正则不变，否则按位取反（统一找最高位为1）<br>    b16&#x3D;!!(x&gt;&gt;16)&lt;&lt;4;&#x2F;&#x2F;判断前16位是否有1，并且同时计算了需要移位的位数<br>    x&#x3D;x&gt;&gt;b16;&#x2F;&#x2F;有1就移动16位，否则b16&#x3D;0,不移动<br>    b8&#x3D;!!(x&gt;&gt;8)&lt;&lt;3;<br>    x&#x3D;x&gt;&gt;b8;<br>    b4&#x3D;!!(x&gt;&gt;4)&lt;&lt;2;<br>    x&#x3D;x&gt;&gt;b4;<br>    b2&#x3D;!!(x&gt;&gt;2)&lt;&lt;1;<br>    x&#x3D;x&gt;&gt;b2;<br>    b1&#x3D;!!(x&gt;&gt;1);<br>    x&#x3D;x&gt;&gt;b1;<br>    b0&#x3D;x;<br>  return b16+b8+b4+b2+b1+b0+1;<br>}</p>
<h1 id="floatScale2"><a href="#floatScale2" class="headerlink" title="floatScale2"></a>floatScale2</h1><p>*howManyBits - return the minimum number of bits required to represent x in</p>
<p>*two’s complement</p>
<p>*Examples: howManyBits(12) &#x3D; 5</p>
<p>*howManyBits(298) &#x3D; 10</p>
<p>*howManyBits(-5) &#x3D; 4</p>
<p>*howManyBits(0) &#x3D; 1</p>
<p>*howManyBits(-1) &#x3D; 1</p>
<p>*howManyBits(0x80000000) &#x3D; 32</p>
<p>*Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</p>
<p>*Max ops: 90</p>
<p>*Rating: 4</p>
<h2 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h2><p>这题很好地考察了规格化数与非规格化数。</p>
<p>以及自己琢磨一下这个例子，这题就会了</p>
<h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><p>unsigned floatScale2(unsigned uf) {<br>  unsigned s &#x3D; uf &amp; 0x80000000;<br>  unsigned exp &#x3D; uf &amp; 0x7f800000;<br>  unsigned frac &#x3D; uf &amp; 0x007fffff;</p>
<p>  if(!exp){ &#x2F;&#x2F; 非规格化数<br>    frac&lt;&lt;&#x3D;1;<br>  }<br>  else if(exp^ 0x7f800000){ &#x2F;&#x2F;规格化数（非规格化数除去NAN)<br>      exp+&#x3D;0x00800000;<br>      &#x2F;&#x2F;相加之后可能变成无穷大，此时要将尾数置0<br>      if(!(exp^0x7f800000)){<br>        frac &#x3D; 0;<br>      }<br>  }</p>
<p>  return s|exp|frac;<br>}</p>
<h1 id="floatFloat2Int"><a href="#floatFloat2Int" class="headerlink" title="floatFloat2Int"></a>floatFloat2Int</h1><p>*for floating point argument f.</p>
<p>*Argument is passed as unsigned int, but</p>
<p>*it is to be interpreted as the bit-level representation of a</p>
<p>*single-precision floating point value.</p>
<p>*Anything out of range (including NaN and infinity) should return</p>
<p>*0x80000000u.</p>
<p>*Legal ops: Any integer&#x2F;unsigned operations incl. ||, &amp;&amp;. also if, while</p>
<p>*Max ops: 30</p>
<p>*Rating: 4</p>
<h2 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h2><p>这里关键是理解unsigned表示的flaot以及转成int的过程的移位区别。</p>
<p>如果uf什么都不动，变成int的时候就已经是默认小数点右移动（变大）23了。</p>
<h2 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h2><p>int floatFloat2Int(unsigned uf) { &#x2F;&#x2F;吊</p>
<p>  int tmin&#x3D;0x1&lt;&lt;31;&#x2F;&#x2F;溢出需返回的值<br>    int sign&#x3D;uf&gt;&gt;31;&#x2F;&#x2F;取符号<br>    int frac&#x3D;uf&amp;0x007fffff;&#x2F;&#x2F;取尾数<br>    int E&#x3D;((uf&gt;&gt;23)&amp;0xff)-127;&#x2F;&#x2F;取指数  Exp-偏置（ 2^7 -1）&#x3D;127<br>    if(E&lt;0) return 0; &#x2F;&#x2F;如果指数小于0，相当于尾数小数点左移，必定为小数，舍入为0<br>  int M;<br>     M &#x3D; frac|(0x1&lt;&lt;23);&#x2F;&#x2F;能到这里的都是规格化数，补充隐藏位1.</p>
<pre><code>if(E&gt;31) return tmin;//如果指数大于31,相当于尾数小数点右移31，溢出
if(E&gt;23) M=M&lt;&lt;(E-23);//如果指数&gt;23,小数点左移E-23
else M=M&gt;&gt;(23-E);	//否则右移23-e

if(!( (M&gt;&gt;31) ^sign)) return M;//如果移动完成的尾数M符号位与sign相同，无需转换，直接返回M
else if(M&gt;&gt;31) return tmin;//如果不同，且M为负数，则无法表示(需更多位)，返回溢出
else return ~M+1;	//如果不同，且M为正数，返回其相反数
</code></pre>
<p>}</p>
<h1 id="floatPower2"><a href="#floatPower2" class="headerlink" title="floatPower2"></a>floatPower2</h1><p>*floatPower2 - Return bit-level equivalent of the expression 2.0^x</p>
<p>*(2.0 raised to the power x) for any 32-bit integer x.</p>
<p>*The unsigned value that is returned should have the identical bit</p>
<p>*representation as the single-precision floating-point number 2.0^x.</p>
<p>*If the result is too small to be represented as a denorm非规格化数, return</p>
<p>*0.If too large, return +INF无穷大.</p>
<ul>
<li></li>
</ul>
<p>*Legal ops: Any integer&#x2F;unsigned operations incl. ||, &amp;&amp;. Also if, while</p>
<p>*Max ops: 30</p>
<p>*Rating: 4</p>
<h2 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h2><p>这题很简单。</p>
<p>只需要根据 E &#x3D; e - bias反推e就好了。</p>
<h2 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h2><p>unsigned floatPower2(int x) {</p>
<pre><code>int inf=0x7f800000;
if(x&lt;-126) return 0;
if(x&gt;127) return inf;
</code></pre>
<p>  int e &#x3D; x+127;<br>    return e&lt;&lt;23;<br>}</p>
]]></content>
      <categories>
        <category>实验</category>
      </categories>
      <tags>
        <tag>实验</tag>
      </tags>
  </entry>
  <entry>
    <title>实验题目要求解释</title>
    <url>/2023/04/10/%E5%AE%9E%E9%AA%8C%E9%A2%98%E7%9B%AE%E8%A6%81%E6%B1%82%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<h1 id="Legal-ops"><a href="#Legal-ops" class="headerlink" title="Legal ops"></a>Legal ops</h1><p>在计算机程序设计中，有些操作符被认为是合法的（legal），有些操作符则被认为是不合法的（illegal）。Legal ops 是指在编程中可以使用的合法的操作符，而不包括任何不合法的操作符。通常，在编程题目中，会明确规定 Legal ops 的范围，以限制参与者使用某些运算符，从而增加题目的挑战和限制。</p>
<h1 id="Max-ops"><a href="#Max-ops" class="headerlink" title="Max ops"></a>Max ops</h1><p>在编程题目中，Max ops（或者Maximum Operations）是指在解题过程中可以使用的操作符的最大数量。通常，为了增加编程的挑战和难度，会规定在解决问题的过程中只能使用有限的操作符数量。因此，题目的难度通常与所允许使用的操作符数量有关。在题目中，一般会给出最大操作数的限制，以提示解决问题时需要注意的事项。</p>
<h1 id="Rating"><a href="#Rating" class="headerlink" title="Rating"></a>Rating</h1><p>在编程题目中，Rating（或者Difficulty Rating）是指题目的难度评级。通常，难度评级是基于题目的复杂度、解决问题的难度和需要的知识量等因素来评定的。不同的平台或者网站可能会采用不同的评级系统，但通常都会以数字或者符号等形式表示。在一些网站中，例如LeetCode，难度评级一般被划分为Easy、Medium和Hard三个级别。对于参与编程竞赛或者考试的人来说，难度评级是选择题目时需要考虑的因素之一，也是评估自己编程能力的一种方式。</p>
]]></content>
      <tags>
        <tag>实验</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题笔记：REVERSE</title>
    <url>/2023/04/12/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%9AREVERSE/</url>
    <content><![CDATA[<h1 id="reverse2"><a href="#reverse2" class="headerlink" title="reverse2"></a>reverse2</h1><p>拖入IDA64位</p>
<p>空格，SHIFT+F12</p>
<p>找到flag的一半，如图</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172223353.png" alt="image-20230417222352316"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172223751.png" alt="image-20230417222346707"></p>
<p>先把105 114 49转成字符（选中按R即可）</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172223254.png" alt="image-20230417222341232"></p>
<p>可以发现，输入的v2要和&amp;flag做比较，而双击&amp;flag发现内容就是之前的hacking_for_fun}<br>再分析循环，会将flag中的i和r替换成1，使用最后得到flag</p>
<p>flag{hack1ng_fo1_fun}</p>
<h1 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h1><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172223636.png" alt="image-20230417222329604"></p>
<p>第7行：输入flag</p>
<p>第9行：输入的flag长度要为33</p>
<p>第11行：输入的flag与自身前一位异或</p>
<p>第13行：与global比较</p>
<p>查看一下global值</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172223054.png" alt="image-20230417222322016"></p>
<p>python脚本</p>
<p>tmp &#x3D; [‘f’, 0x0A, ‘k’, 0x0C, ‘w’, ‘&amp;’, ‘O’, ‘.’, ‘@’, 0x11, ‘x’, 0x0D, ‘Z’, ‘;’, ‘U’, 0x11, ‘p’, 0x19, ‘F’, 0x1F, ‘v’,<br>        ‘“‘, ‘M’, ‘#’, ‘D’, 0x0E, ‘g’, 6, ‘h’, 0x0F, ‘G’, ‘2’, ‘O’]<br>flag &#x3D; ‘f’<br>for i in range(1, len(tmp)):<br>    if (isinstance(tmp[i], str)):<br>        if (isinstance(tmp[i - 1], str)):<br>            flag +&#x3D; chr(ord(tmp[i]) ^ ord(tmp[i - 1]))#如果都是字符串<br>        else:#tmp[i]为字符串，tmp[i-1]不是字符串<br>            flag +&#x3D; chr(ord(tmp[i]) ^ tmp[i- 1])<br>    else:#tmp[i]和tmp[i-1]都不是字符串<br>        flag +&#x3D; chr(tmp[i] ^ ord(tmp[i - 1]))<br>print(flag)</p>
<p>这个脚本首先定义了一个列表 <code>tmp</code>，其中包含了一些字符串和整数。</p>
<p>接下来，脚本定义了一个变量 <code>flag</code>，初始化为列表中的第一个元素 <code>&#39;f&#39;</code>。</p>
<p>然后，脚本使用一个 for 循环来遍历列表 <code>tmp</code> 中的元素。对于每个元素，脚本判断它的类型，分为以下 3 种情况：</p>
<ol>
<li>如果当前元素和前一个元素都是字符串，则将它们的 ASCII 码值进行异或操作，并将结果转换为字符，添加到 <code>flag</code> 中。</li>
<li>如果当前元素是字符串而前一个元素不是字符串，则将当前元素的 ASCII 码值和前一个元素的数值进行异或操作，并将结果转换为字符，添加到 <code>flag</code> 中。</li>
<li>如果当前元素和前一个元素都不是字符串，则将它们的数值进行异或操作，并将结果转换为字符，添加到 <code>flag</code> 中。</li>
</ol>
<p>最终，脚本输出变量 <code>flag</code>，即得到了解密后的字符串。整个脚本的目的是对加密的字符串进行解密，解密算法是通过将相邻元素进行异或操作，并将结果转换为 ASCII 码对应的字符。</p>
<p>其中，isinstance函数的作用是检测是否为已知类型，这里即比较tmp[i]与tmp[i-1]是否为字符串</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172223879.png" alt="image-20230417222311853">flag{QianQiuWanDai_YiTongJiangHu}</p>
<p>注：其中，isinstance函数的作用是检测是否为已知类型，这里即比较tmp[i]与tmp[i-1]是否为字符串。</p>
<h1 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a>reverse3</h1><p>IDA打开，搜字符串能明显看到base<br>查看main伪代码，简单来说，输入的str加密后得到v1，再进入for循环后得到Dest后的字符与str2进行比较</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172223702.png" alt="image-20230417222306669"></p>
<p>第30行：Str2与Dest比较</p>
<p>其中 str2的内容为e3nifIH9b_C@n@dH</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172223096.png" alt="image-20230417222300071"></p>
<p>跟进sub_4110BE函数</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172222842.png" alt="image-20230417222254802"></p>
<p>发现使用了这个进行数组变换，跟进发现就是之前的base64。</p>
<p>解码过程：<br>首先for循环将Dest每一位都加了j，所以写脚本还原v1，然后进行base64解码</p>
<h2 id="原脚本："><a href="#原脚本：" class="headerlink" title="原脚本："></a>原脚本：</h2><p>import base64</p>
<p>str &#x3D; ‘e3nifIH9b_C@n@dH’<br>flag &#x3D; ‘’<br>for i in range(len(str)):<br>    flag+&#x3D;chr(ord(str[i])-i)</p>
<p>flag &#x3D; base64.b64decode(flag)<br>print(flag)</p>
<h2 id="优化后："><a href="#优化后：" class="headerlink" title="优化后："></a>优化后：</h2><p>import base64</p>
<p>s &#x3D; ‘e3nifIH9b_C@n@dH’<br>flag &#x3D; ‘’.join(chr(ord(c) - i) for i, c in enumerate(s))<br>decoded &#x3D; base64.b64decode(flag.encode(‘utf-8’))<br>print(decoded)</p>
<p>这个版本使用了列表推导式和 <code>join</code> 方法来构建 <code>flag</code> 字符串。在列表推导式中，使用了 <code>enumerate</code> 函数来同时遍历字符串中的字符和它们的下标，避免使用循环和索引来访问字符串中的字符。使用 <code>join</code> 方法可以将一个列表中的元素连接成一个字符串。</p>
<p>注意到 <code>b64decode</code> 函数的参数是一个 bytes 对象，因此在将 <code>flag</code> 转换为 bytes 对象后再进行解码。</p>
<p>另外，同样避免使用 <code>str</code> 作为变量名，这里将变量名改为 <code>s</code>。</p>
<h1 id="不一样的flag"><a href="#不一样的flag" class="headerlink" title="不一样的flag"></a>不一样的flag</h1><p>用32位的IDA打开，一打开就看到01串</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172222266.png" alt="image-20230417222248240"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172222636.png" alt="image-20230417222239598"></p>
<p>划到下面，把49，35，按R换成1和#</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172222859.png" alt="image-20230417222232835"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172222433.png" alt="image-20230417222227404"></p>
<p>可以发现，遇到1退出，遇到#输出flag</p>
<p>开头的0串刚好25个</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172222968.png" alt="image-20230417222219946"></p>
<p>再根据上面的1 up，2  down ……</p>
<p>得出flag{222441144222}</p>
<h1 id="SimpleRev"><a href="#SimpleRev" class="headerlink" title="SimpleRev"></a>SimpleRev</h1><p>拖入64位IDA查看main，发现输入D进入游戏。</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172222352.png" alt="image-20230417222208321"></p>
<p>跟进Decry</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304172221914.png" alt="image-20230417222154887"></p>
<h2 id="代码解读"><a href="#代码解读" class="headerlink" title="代码解读"></a>代码解读</h2><p>这段代码中，<code>v11 = __readfsqword(0x28u);</code> 是获取CPU中的控制寄存器FS的值，可以用来防止缓冲区溢出攻击。<code>*(_QWORD *)src = 0x534C43444ELL;</code> 给 <code>src</code> 赋了一个十六进制值，等价于将其转换为字符数组 “SLCDD”。接着，变量 <code>v7</code>、<code>v8</code>、<code>v10</code> 都被初始化为0。数组 <code>v9</code> 的第一个元素被赋值为十六进制数值 0x776F646168，第二个元素赋值为0。<code>join(key3, v9)</code> 将字符串数组 <code>key3</code> 和 <code>v9</code> 合并成一个新的字符串，赋值给变量 <code>text</code>。<code>strcpy(key, key1)</code> 复制字符串 <code>key1</code> 到 <code>key</code> 中，<code>strcat(key, src)</code> 将字符串 <code>src</code> 连接到 <code>key</code> 后面。最后，<code>v2</code> 和 <code>v3</code> 都被初始化为0，<code>getchar()</code> 是用来暂停程序，等待用户按下任意键后再继续执行下去。</p>
<p><code>join()</code> 是 Python 中的一个字符串方法，用于将一个可迭代对象（例如列表、元组、集合等）中的字符串按照指定的分隔符连接成一个新的字符串。</p>
<p>例子：my_list &#x3D; [‘hello’, ‘world’, ‘python’]<br>new_str &#x3D; ‘ ‘.join(my_list)<br>print(new_str)  # 输出：’hello world python’</p>
<p>在上述代码中，<code>join</code>函数将<code>key3</code>和<code>v9</code>中的元素进行拼接，并返回拼接结果的指针，然后将该指针赋值给<code>text</code>变量。</p>
<p>其中text&#x3D;key3+v9</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304181942207.png" alt="image-20230418194224164"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304181943060.png" alt="image-20230418194354042"></p>
<p>key3为kills，因为是小端序存储，则text为killshadow<br>key为key1+src，key1为ADSFK</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304181932065.png" alt="image-20230418193225027"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304181930203.png" alt="image-20230418193039127"></p>
<p>则key为ADSFKNDCLS</p>
<h2 id="小端序存储"><a href="#小端序存储" class="headerlink" title="小端序存储"></a>小端序存储</h2><p>小端序储存（Little Endian）是一种数据存储的方式。在小端序储存中，数据的最低有效字节（即数值最小的字节）被存储在最前面的地址，而最高有效字节（即数值最大的字节）则被存储在最后面的地址。这与大端序储存（Big Endian）相反，在大端序储存中，数据的最高有效字节被存储在最前面的地址，最低有效字节则被存储在最后面的地址。</p>
<p>举例来说，如果我们要存储数值为0x12345678的32位整数，在小端序储存中，它的字节序列将被储存为0x78, 0x56, 0x34, 0x12，而在大端序储存中，它的字节序列将被储存为0x12, 0x34, 0x56, 0x78。在计算机中，x86架构的处理器是小端序的，而其他的处理器如PowerPC和SPARC则是大端序的。</p>
<p>下面查看加密过程</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304181933851.png" alt="image-20230418193348806"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304181934057.png" alt="image-20230418193409020"></p>
<p><strong>注释</strong></p>
<p><code>!strcmp</code> 是用于判断两个字符串是否相同的函数。<code>strcmp</code> 函数的返回值是一个整数，当两个字符串相等时返回 0，不相等时返回非 0 的值。因此，<code>!strcmp(str1, str2)</code> 的含义是：如果 <code>str1</code> 和 <code>str2</code> 相等，则返回 1，否则返回 0。<code>!</code> 符号表示逻辑非，可以将非 0 的值转换为 0，将 0 转换为 1。因此，<code>!strcmp(str1, str2)</code> 实际上等价于判断 <code>str1</code> 和 <code>str2</code> 是否相等，如果相等则返回 1，否则返回 0。</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304181938679.png" alt="image-20230418193816634"></p>
<p>最后text需要和str2进行比较，既然已经知道了加密后的字符串和key(注意key在第2张图被+32，即大写变成了小写），所以可以直接写脚本一位一位的进行爆破</p>
<p>key &#x3D; “adsfkndcls”<br>text &#x3D; “killshadow”<br>flag &#x3D; “”<br>dict &#x3D; “ABCDEFGHIJKLMNOPQRSTUVWXYZ”<br>v5 &#x3D; len(text)<br>for i in range(v5):<br>    for v1 in dict:<br>        if ord(text[i]) &#x3D;&#x3D; (ord(v1) - 39 - ord(key[i % v5]) + 97) % 26 + 97:<br>            flag +&#x3D; v1<br>print(flag)</p>
<p>这段代码是一个简单的凯撒密码加密算法，其中key代表密钥，text代表明文，flag代表密文，dict是用于表示密文中可能出现的字符集。每次对于明文的一个字符，先根据key中的密钥计算出偏移量，然后通过凯撒密码加密算法，将该字符替换成偏移量之后的字符，即得到密文。</p>
<p>这段代码的作用是对字符串 “text” 进行加密，加密的密钥是 “key”。它遍历了 “text” 中的每个字符，对于每个字符，它通过循环枚举字母表中的每个字母，并计算该字母加密后是否与 “text” 中的字符相等。具体地，它使用如下公式计算加密后的字母：</p>
<p>(ord(v1) - 39 - ord(key[i % v5]) + 97) % 26 + 97</p>
<p>其中，ord(v1) 表示字母 v1 的 ASCII 码值，39 和 97 是常数，v5 是 “text” 的长度，i % v5 计算出当前字符在 “text” 中的位置，ord(key[i % v5]) 表示使用密钥 “key” 中对应位置的字符作为加密密钥。</p>
<p>如果计算得到的加密后的字母等于 “text” 中的字符，就将该字母添加到 “flag” 中，最终得到的 “flag” 就是加密后的结果。</p>
<p><code>(ord(v1) - 39 - ord(key[i % v5]) + 97) % 26 + 97</code> 是对字符 v1 进行加密的过程，可以分为以下几步：</p>
<ol>
<li><code>ord(v1)</code>：将字符 v1 转换成对应的 ASCII 码值。</li>
<li><code>- 39</code>：将 ASCII 码值减去 39。</li>
<li><code>- ord(key[i % v5])</code>：将减去的结果再减去对应位置上的 key 字符的 ASCII 码值。</li>
<li><code>+ 97</code>：将减去的结果加上 97。</li>
<li><code>% 26</code>：将加上 97 的结果对 26 取模。</li>
<li><code>+ 97</code>：将取模后的结果再加上 97，得到最终的加密后的字符的 ASCII 码值。</li>
</ol>
<p>这个过程中，<code>ord(key[i % v5])</code> 表示从 key 中取出与当前处理字符的位置相对应的字符的 ASCII 码值，<code>v5</code> 表示 text 的长度，<code>i % v5</code> 表示当前处理字符在 text 中的位置，因此可以用 i % v5 计算出对应位置的 key 字符。<code>97</code> 和 <code>26</code> 分别是小写字母的起始 ASCII 码值和字母表中字母的个数，用于保证加密后的结果为小写字母。</p>
<h1 id="刮开有奖"><a href="#刮开有奖" class="headerlink" title="刮开有奖"></a>刮开有奖</h1><p>32位程序，IDA打开<br>找到关键函数DialogFunc</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304182033973.png" alt="image-20230418203312907"></p>
<p>跟进</p>
<h2 id="分析伪代码"><a href="#分析伪代码" class="headerlink" title="分析伪代码"></a>分析伪代码</h2><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304191917893.png" alt="image-20230419191730801"></p>
<p>memset函数就是初始化的。</p>
<h2 id="找到字符串加密函数"><a href="#找到字符串加密函数" class="headerlink" title="找到字符串加密函数"></a>找到字符串加密函数</h2><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304191921735.png" alt="image-20230419192130696"></p>
<p>（把数字按R转换了一下）</p>
<p>看到这里，String，应该是我们要的flag，flag &#x3D; 8.，也就是有8个字符了。</p>
<p>看到这里有11个字符，，但是还有一个函数sub_4010F0，跟进去看看。</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304191928167.png" alt="image-20230419192817103"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304191928712.png" alt="image-20230419192832672"></p>
<p>很显然，这个函数会把这已知的11个字符，加密成其他的，这里我们直接把伪代码换为C语言代码，运行就能得到新的加密字符是什么。</p>
<p>#include &lt;stdio.h&gt;<br>int  sub_4010F0(char* a1, int a2, int a3)<br>{<br>  int result; &#x2F;&#x2F; eax<br>  int i; &#x2F;&#x2F; esi<br>  int v5; &#x2F;&#x2F; ecx<br>  int v6; &#x2F;&#x2F; edx</p>
<p>  result &#x3D; a3;<br>  for ( i &#x3D; a2; i &lt;&#x3D; a3; a2 &#x3D; i )<br>  {<br>    v5 &#x3D; i;<br>    v6 &#x3D; i[a1];<br>    if ( a2 &lt; result &amp;&amp; i &lt; result )<br>    {<br>      do<br>      {<br>        if ( v6 &gt; a1[result])<br>        {<br>          if ( i &gt;&#x3D; result )<br>            break;<br>          ++i;<br>          a1[v5] &#x3D; a1[result];<br>          if ( i &gt;&#x3D; result )<br>            break;<br>          while ( a1[i] &lt;&#x3D; v6 )<br>          {<br>            if ( ++i &gt;&#x3D; result )<br>              goto LABEL_13;<br>          }<br>          if ( i &gt;&#x3D; result )<br>            break;<br>          v5 &#x3D; i;<br>         a1[result] &#x3D; a1[i];<br>        }<br>        –result;<br>      }<br>      while ( i &lt; result );<br>    }<br>LABEL_13:<br>    a1[result] &#x3D; v6 ;<br>    sub_4010F0(a1, a2, i - 1);<br>    result &#x3D; a3;<br>    ++i;<br>  }<br>  return result;<br>}</p>
<p>int main()<br>{<br>    char str[] &#x3D; “ZJSECaNH3ng”;<br>    sub_4010F0(str,0,10);<br>    printf(“%s”, str);<br>    return 0;<br>}</p>
<p>*<em>注释:在伪代码中，有a1+ 4 * i，a1+4 <em>result，这样的字符。但是在C语言代码中，为什么没有了？</em></em></p>
<p>int占四个字节，所以需要*4.如果是char类型，就不需要.</p>
<p>我们知道，计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问数组中的某个元素时，它会首先通过下面的寻址公式，计算出该元素存储的内存地址:</p>
<p>a[i]_address &#x3D; base_address + i * data__type_size</p>
<p>其中 data_type_size 表示数组中每个元素的大小。我们举的这个例子里，数组中存储的是 int 类型数据，所以data_type_size  就为 4 个字节.</p>
<p>从这里，我们知道a1+4*i，也就是a1【i】，a1+4 * result，也就是a1【result】。</p>
<p>将伪代码的寻址方式改为数组寻址，然后将*(_DWORD*) 删掉，因为这是汇编的表示。</p>
<p>所以伪代码变成了C语言代码。</p>
<p>运行C语言代码得到</p>
<p>3CEHJNSZagn</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304191949181.png" alt="image-20230419194916137"></p>
<p>得到加密之后的字符。继续分析</p>
<h2 id="base64加密"><a href="#base64加密" class="headerlink" title="base64加密"></a>base64加密</h2><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304191956217.png" alt="image-20230419195621177"></p>
<p><strong>注释：怎么知道是base64的</strong>。</p>
<p>SHIFT+F12查看字符串</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304191958915.png" alt="image-20230419195820873"></p>
<p>在这里，可以看到，v4，v5 &#x3D; sub_401000，跟进看看。</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304191959537.png" alt="image-20230419195944492"></p>
<p>发现也是一串代码，但是很复杂，看到这里有一个byte_407830函数，跟进看看。</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304192001857.png"></p>
<p>推测是将，<strong>v4 &#x3D; ak1w，v5 &#x3D; V1Ax，两个字符串base64加密</strong>。</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304192010894.png" alt="image-20230419201000856"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304192010866.png" alt="image-20230419201022823"></p>
<p><strong>解密之后，v4 &#x3D; jMp，v5 &#x3D; WP1.</strong></p>
<h2 id="分析if语句，得到flag"><a href="#分析if语句，得到flag" class="headerlink" title="分析if语句，得到flag"></a>分析if语句，得到flag</h2><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304192012833.png" alt="image-20230419201227784"></p>
<p>最后，我们看到最后的if语句，</p>
<p>第一句：String[0] &#x3D;&#x3D; v7[0] + 34，这里的v7【0】，就是上面10个字符的第一个字符，我们通过加密函数之后，v7【0】由一开始的Z变成了，v7【0】 &#x3D; 3.</p>
<p>3的ASCII码是51，51 + 34 &#x3D; 85，85ASCII码对应的是大写的 U。flag第一个字符得到。</p>
<p>第二句：String[1] &#x3D;&#x3D; v10，v10在之前没加密的时候，是排第五位，我们看看加密之后的第五位是谁，3CEHJNSZagn，可以看到，加密之后的第五位是 J。flag第二个字符得到。</p>
<p>第三句：4 * String[2] - 141 &#x3D;&#x3D; 3 * v8，v8在没加密之前，是排第三位，先看看加密之后的第三位是谁，可以看到是E，E的ASCII码是69，所以3*69 + 141 &#x2F; 4 &#x3D; 87 ,ASCII为W,flag第三个字符得到。</p>
<p>第四句：String[3] &#x2F; 4 &#x3D;&#x3D; 2 * (v13 &#x2F; 9)，看到v13没加密之前排到数第四位，看看加密之后的到数第四位是谁，是Z，Z的ASCII是90，所以2<em>（90&#x2F;9）</em>4 &#x3D; 80 ,ASCII为P，flag第四个字符得到。</p>
<p>后面四个字符，就是base64加密的那几个，可以看到第三第四字符已经是WP了，说明，WP1在前，jMp在后。</p>
<p>将他们拼接在一起，得到，UJWP1jMp。</p>
<p>带上flag{}，得到flag{UJWP1jMp}。</p>
<h2 id="GWCTF-2019-pyre"><a href="#GWCTF-2019-pyre" class="headerlink" title="[GWCTF 2019]pyre"></a>[GWCTF 2019]pyre</h2><p>下载下来是pyc文件，直接反编译</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304192050391.png" alt="image-20230419205025299"></p>
<p>网站链接<a href="https://www.toolnb.com/tools/pyc.html">pyc反编译 - 爱资料工具 (toolnb.com)</a></p>
<p>print ‘Welcome to Re World!’<br>print ‘Your input1 is your flag~’<br>l &#x3D; len(input1)<br>for i in range(l):<br>    num &#x3D; ((input1[i] + i) % 128 + 128) % 128<br>    code +&#x3D; num</p>
<p>for i in range(l - 1):<br>    code[i] &#x3D; code[i] ^ code[(i + 1)]</p>
<p>print code<br>code &#x3D; [‘\x1f’, ‘\x12’, ‘\x1d’, ‘(‘, ‘0’, ‘4’, ‘\x01’, ‘\x06’, ‘\x14’, ‘4’, ‘,’, ‘\x1b’, ‘U’, ‘?’, ‘o’, ‘6’, ‘*’, ‘:’, ‘\x01’, ‘D’, ‘;’, ‘%’, ‘\x13’]</p>
<p><strong>代码解释</strong></p>
<p>这段代码看起来像是一个简单的字符串加密程序，它使用了一种称为异或加密的技术来对一个字符串进行加密，并将加密后的结果输出为一个列表 <code>code</code>。</p>
<p>首先，程序输出欢迎语句，提示用户输入一个标志。然后，程序计算标志字符串的长度并存储在 <code>l</code> 变量中。</p>
<p>接下来，程序使用一个循环，将每个字符转换为一个数字，并将其加上其在字符串中的位置 <code>i</code>，然后对 128 取模数，这是一种简单的变换方法。这个变换的目的是打乱字符的顺序，并防止加密后的字符串只包含一些特定的 ASCII 字符，从而使加密更难被破解。计算出来的数字存储在 <code>code</code> 列表中。</p>
<p>然后，程序使用另一个循环来对 <code>code</code> 列表中相邻的元素进行异或运算，将它们混合在一起，从而加密了字符串。这个循环从 0 开始，到 <code>l - 2</code> 结束，步长为 1。</p>
<p>最后，程序输出加密后的字符串，它存储在 <code>code</code> 列表中。与先前的代码段不同的是，它使用了硬编码的列表 <code>code</code> 来表示加密后的字符串，而不是将加密后的字符串打印为一个字符串。</p>
<p>然后照着代码逆向一下</p>
<p>下面是将代码逆向回来，解密输入字符串的过程。</p>
<p>首先，我们将列表 <code>code</code> 赋值给一个新变量，以便在解密时使用。然后，我们将循环 <code>for i in range(l - 1)</code> 中的 <code>l</code> 变量修改为 <code>len(code)</code>，以便正确地处理加密后的字符串。接下来，我们反向循环 <code>for i in range(len(code) - 2, -1, -1)</code> 中的 <code>i</code> 变量，以便在解密时正确计算每个字符的值。最后，我们将 <code>num</code> 变量中的算法修改为 <code>num = (ord(code[i]) - i) % 128</code>，以便正确地解密每个字符。最终的逆向代码如下：</p>
<p>print(‘Welcome to Re World!’)<br>print(‘Your input1 is your flag~’)</p>
<p>code &#x3D; [<br>    ‘\x1f’,<br>    ‘\x12’,<br>    ‘\x1d’,<br>    ‘(‘,<br>    ‘0’,<br>    ‘4’,<br>    ‘\x01’,<br>    ‘\x06’,<br>    ‘\x14’,<br>    ‘4’,<br>    ‘,’,<br>    ‘\x1b’,<br>    ‘U’,<br>    ‘?’,<br>    ‘o’,<br>    ‘6’,<br>    ‘*’,<br>    ‘:’,<br>    ‘\x01’,<br>    ‘D’,<br>    ‘;’,<br>    ‘%’,<br>    ‘\x13’<br>]</p>
<p>flag &#x3D; ‘’<br>for i in range(len(code) - 2, -1, -1):<br>    code[i] &#x3D; chr(ord(code[i]) ^ ord(code[i + 1]))</p>
<p>for i in range(len(code)):<br>    num &#x3D; (ord(code[i]) - i) % 128<br>    flag +&#x3D; chr(num)</p>
<p>print(‘The decrypted flag is:’, flag)</p>
<p>在PC里面运行得出flagGWHT{Just_Re_1s_Ha66y!}</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304192053997.png" alt="image-20230419205344935"></p>
<h1 id="简单注册器"><a href="#简单注册器" class="headerlink" title="简单注册器"></a>简单注册器</h1><p>下载出来是apk文件，所以是一道安卓逆向题目</p>
<p>用jadx-gui打开</p>
<p>找到main函数</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304270819756.png" alt="image-20230427081858642"></p>
<p>找到关键函数</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304270822147.png" alt="image-20230427082259116"></p>
<p>由此可知dd2940c04462b4dd7c450528835cca15就是我们要的flag</p>
<p>对字符串进行转换</p>
<p>脚本：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">input_str = <span class="string">&quot;dd2940c04462b4dd7c450528835cca15&quot;</span></span><br><span class="line">input_list = <span class="built_in">list</span>(input_str)</span><br><span class="line">input_list<span class="selector-attr">[2]</span> = <span class="built_in">chr</span>(<span class="built_in">ord</span>(input_list<span class="selector-attr">[2]</span>) + <span class="built_in">ord</span>(input_list<span class="selector-attr">[3]</span>) - <span class="number">50</span>)</span><br><span class="line">input_list<span class="selector-attr">[4]</span> = <span class="built_in">chr</span>(<span class="built_in">ord</span>(input_list<span class="selector-attr">[2]</span>) + <span class="built_in">ord</span>(input_list<span class="selector-attr">[5]</span>) - <span class="number">48</span>)</span><br><span class="line">input_list<span class="selector-attr">[30]</span> = <span class="built_in">chr</span>(<span class="built_in">ord</span>(input_list<span class="selector-attr">[31]</span>) + <span class="built_in">ord</span>(input_list<span class="selector-attr">[9]</span>) - <span class="number">48</span>)</span><br><span class="line">input_list<span class="selector-attr">[14]</span> = <span class="built_in">chr</span>(<span class="built_in">ord</span>(input_list<span class="selector-attr">[27]</span>) + <span class="built_in">ord</span>(input_list<span class="selector-attr">[28]</span>) - <span class="number">97</span>)</span><br><span class="line">input_list = input_list<span class="selector-attr">[::-1]</span></span><br><span class="line">output_str = <span class="string">&quot;flag&#123;&quot;</span> + <span class="string">&quot;&quot;</span><span class="selector-class">.join</span>(input_list) + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(output_str)</span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304270839781.png" alt="image-20230427083933747"></p>
<p>flag{59acc538825054c7de4b26440c0999dd}</p>
<h1 id="ACTF新生赛2020-easyre-1"><a href="#ACTF新生赛2020-easyre-1" class="headerlink" title="[ACTF新生赛2020]easyre 1"></a>[ACTF新生赛2020]easyre 1</h1><p>下载的文件有UPX壳</p>
<p>拖入UPXSHell中脱壳，脱完壳发现是32位</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304270843590.png" alt="image-20230427084357548"></p>
<p>拖入IDA 32位</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304270847718.png" alt="image-20230427084727677"></p>
<p>找到可疑字符串，先留着</p>
<p>}|{zyxwvutsrqponmlkjihgfedcba&#96;_^][ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;&#x3D;&lt;;:9876543210&#x2F;.-,+*)(‘,27h,’&amp;%</p>
<p>找到main函数</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304270851828.png" alt="image-20230427085149793"></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">int __cdecl main(int argc, const char argv, const char envp)</span><br><span class="line">&#123;</span><br><span class="line">  _BYTE v4[<span class="number">12</span>]; <span class="regexp">//</span> [esp+<span class="number">12</span>h] [ebp-<span class="number">2</span>Eh] BYREF</span><br><span class="line">  _DWORD v5[<span class="number">3</span>]; <span class="regexp">//</span> [esp+<span class="number">1</span>Eh] [ebp-<span class="number">22</span>h]</span><br><span class="line">  _BYTE v6[<span class="number">5</span>]; <span class="regexp">//</span> [esp+<span class="number">2</span>Ah] [ebp-<span class="number">16</span>h] BYREF</span><br><span class="line">  int v7; <span class="regexp">//</span> [esp+<span class="number">2</span>Fh] [ebp-<span class="number">11</span>h]</span><br><span class="line">  int v8; <span class="regexp">//</span> [esp+<span class="number">33</span>h] [ebp-Dh]</span><br><span class="line">  int v9; <span class="regexp">//</span> [esp+<span class="number">37</span>h] [ebp-<span class="number">9</span>h]</span><br><span class="line">  char v10; <span class="regexp">//</span> [esp+<span class="number">3</span>Bh] [ebp-<span class="number">5</span>h]</span><br><span class="line">  int i; <span class="regexp">//</span> [esp+<span class="number">3</span>Ch] [ebp-<span class="number">4</span>h]</span><br><span class="line"></span><br><span class="line">_main()；</span><br><span class="line">  qmemcpy(v4, <span class="string">&quot;*F&#x27;\&quot;N,\&quot;(I?+@&quot;</span>, sizeof(v4)); <span class="regexp">//</span> 将 <span class="string">&quot;*F&#x27;\&quot;N,\&quot;(I?+@&quot;</span> 复制到 v4 数组中</span><br><span class="line">  printf(<span class="string">&quot;Please input:&quot;</span>); <span class="regexp">//</span> 提示用户输入</span><br><span class="line">  scanf(<span class="string">&quot;%s&quot;</span>, v6); <span class="regexp">//</span> 获取用户输入</span><br><span class="line">  <span class="keyword">if</span> ( v6[<span class="number">0</span>] != <span class="number">65</span> || v6[<span class="number">1</span>] != <span class="number">67</span> || v6[<span class="number">2</span>] != <span class="number">84</span> || v6[<span class="number">3</span>] != <span class="number">70</span> || v6[<span class="number">4</span>] != <span class="number">123</span> || v10 != <span class="number">125</span> ) <span class="regexp">//</span> 判断用户输入的前五个字符是否为 <span class="string">&quot;ACTF&#123;&quot;</span>，最后一个字符是否为 <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">    return <span class="number">0</span>; <span class="regexp">//</span> 如果不是，则直接退出</span><br><span class="line">  v5[<span class="number">0</span>] = v7; <span class="regexp">//</span> 将变量 v7 的值赋给 v5[<span class="number">0</span>]</span><br><span class="line">  v5[<span class="number">1</span>] = v8; <span class="regexp">//</span> 将变量 v8 的值赋给 v5[<span class="number">1</span>]</span><br><span class="line">  v5[<span class="number">2</span>] = v9; <span class="regexp">//</span> 将变量 v9 的值赋给 v5[<span class="number">2</span>]</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">11</span>; ++i ) <span class="regexp">//</span> 循环遍历 v5 数组</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[i] != _data_start__[*((char *)v5 + i) - <span class="number">1</span>] ) <span class="regexp">//</span> 判断 v4 数组和指针 v5 指向的数据是否一致</span><br><span class="line">      return <span class="number">0</span>; <span class="regexp">//</span> 如果不一致，则直接退出</span><br><span class="line">  &#125;</span><br><span class="line">  printf(<span class="string">&quot;You are correct!&quot;</span>); <span class="regexp">//</span> 输出 <span class="string">&quot;You are correct!&quot;</span></span><br><span class="line">  return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将*F’&quot;N,&quot;(I?+@转为10进制</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">s <span class="operator">=</span> <span class="string">&quot;*F&#x27;\&quot;</span>N<span class="punctuation">,</span>\<span class="string">&quot;(I?+@&quot;</span></span><br><span class="line">for <span class="keyword">c</span> in s:</span><br><span class="line">    print(<span class="keyword">ord</span>(<span class="keyword">c</span>))</span><br></pre></td></tr></table></figure>

<p>42<br>70<br>39<br>34<br>78<br>44<br>34<br>40<br>73<br>63<br>43<br>64</p>
<p>综上可知：v4 &#x3D; [42,70,39,34,78,44,34,40,73,63,43,64]</p>
<p>​                   <em>data_start</em>_&#x3D;}|{zyxwvutsrqponmlkjihgfedcba&#96;_^][ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;&#x3D;&lt;;:9876543210&#x2F;.-,+*)(‘,27h,’&amp;%</p>
<ol>
<li>将 v4 中的每个数字转化成对应的 ASCII 字符，得到字符串：*F’”N,”(I?+@</li>
<li>对于每个字符，在 <strong>data_start</strong> 中找到对应的位置，并将位置加 1 得到新的数字</li>
<li>将每个数字转换成对应的 ASCII 字符，并连接成字符串，得到 flag</li>
</ol>
<p>根据上述过程，可以得到如下 Python 代码实现：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">v4 = <span class="selector-attr">[42,70,39,34,78,44,34,40,73,63,43,64]</span></span><br><span class="line">__data_start__ = <span class="string">&#x27;~&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(\&#x27;&amp;%$# !&quot;&#x27;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> v4:</span><br><span class="line">    idx = __data_start__<span class="selector-class">.find</span>(<span class="built_in">chr</span>(i))</span><br><span class="line">    flag += <span class="built_in">chr</span>(idx+<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(flag)</span></span></span><br></pre></td></tr></table></figure>

<p>这段脚本的作用是将给定的数字列表 v4 转换为一个字符串 flag。在这个过程中，将 v4 中的每个数字当作 <strong>data_start</strong> 字符串中的一个索引，然后找到该索引在 <strong>data_start</strong> 中对应的字符，将该字符加入到 flag 字符串中。</p>
<p>具体而言，该脚本使用了一个字符串 <strong>data_start</strong>，其中包含了所有可以使用的字符。然后，遍历 v4 中的每个数字，使用 <code>chr(i)</code> 将其转换为对应的字符，并使用 <code>__data_start__.find()</code> 方法查找该字符在 <strong>data_start</strong> 中的索引。因为在 <strong>data_start</strong> 中的索引从 0 开始，所以最后还需要将找到的索引值加 1，才能得到正确的字符。将每次得到的字符加入到 flag 字符串中，最终得到转换后的字符串。</p>
<p>flag{U9X_1S_W6@T?}</p>
<h1 id="findit"><a href="#findit" class="headerlink" title="findit"></a>findit</h1><p>apk文件，用jadx-gui打开</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304270949209.png" alt="image-20230427094930141"></p>
<p>发现字符串，猜测是flag</p>
<h2 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h2><p>整理得到pvkq{m164675262033l4m49lnp7p9mnk28k75}</p>
<p>仔细观察pvkq，发现f——&gt;p为10，l——&gt;v为10，a——&gt;k为10，g——&gt;q为10</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304270952369.png" alt="image-20230427095222339"></p>
<h2 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h2><p>这段代码中没有直接使用凯撒密码加密，但是在点击按钮的事件中有一个对字符数组b的处理，这个数组中包含了一个加密过的字符串，处理的过程中使用了字符加密和解密时的位移，可以看出该字符串是通过凯撒密码加密的。具体来说，对于字符数组b中的每个字符，如果它是字母，就将它向右移动16个位置，如果移动后不在字母范围内，就将它减去26，即从字母表的末尾又回到了字母表的开头。</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304270953320.png" alt="image-20230427095334281"></p>
<p>脚本：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">cipher = <span class="string">&quot;pvkq&#123;m164675262033l4m49lnp7p9mnk28k75&#125;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">26</span>):</span><br><span class="line">    plain = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c in cipher:</span><br><span class="line">        <span class="keyword">if</span> c.isalpha():</span><br><span class="line">            ascii_code = <span class="keyword">ord</span>(c) - <span class="number">97</span>  <span class="comment"># 转换为0~25的数字</span></span><br><span class="line">            shifted_ascii = (ascii_code + i) % <span class="number">26</span>  <span class="comment"># 进行偏移</span></span><br><span class="line">            plain += <span class="keyword">chr</span>(shifted_ascii + <span class="number">97</span>)  <span class="comment"># 转换回字母并拼接</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            plain += c  <span class="comment"># 非字母字符保持不变</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;Shift %d: %s&quot;</span> % (i, plain))</span><br></pre></td></tr></table></figure>

<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202304270954610.png" alt="image-20230427095402576"></p>
<p>flag{c164675262033b4c49bdf7f9cda28a75}</p>
]]></content>
      <categories>
        <category>刷题记录</category>
      </categories>
      <tags>
        <tag>BUUCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解计算机系统CSAPP实验一，实验记录</title>
    <url>/2023/04/10/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9FCSAPP%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%8C%E5%AE%9E%E9%AA%8C%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="itXor"><a href="#itXor" class="headerlink" title="itXor"></a>itXor</h1><p>这个 <code>bitXor</code> 函数的实现仅使用 <code>~</code>（取反）和 <code>&amp;</code>（按位与）运算符，其工作原理如下：</p>
<ol>
<li>计算左侧值（lhs），通过对 x 取反并与 y 进行按位与操作得到。这会在 y 为 1 且 x 为 0 时产生值为 1 的结果。</li>
<li>计算右侧值（rhs），通过对 y 取反并与 x 进行按位与操作得到。这会在 x 为 1 且 y 为 0 时产生值为 1 的结果。</li>
<li>最后，通过对 lhs 和 rhs 进行按位取反并操作来进行异或操作。</li>
</ol>
<p>lhs 和 rhs 的按位取反并操作会产生在 lhs 和 rhs 不同的位置上值为 1，在相同位置上值为 0 的结果。因此，这个最终步骤会产生正确的异或结果。</p>
<p>这个实现总共使用了 6 个运算符：2 个 <code>~</code>，3 个 <code>&amp;</code> 和 1 个 <code>^</code>。因此，它满足了只使用 <code>~</code> 和 <code>&amp;</code> 运算符的限制，并且最多使用 6+3+1&#x3D;10 个运算符。它的评级为 1，这表示它是一个简单直接的解决方案。</p>
<h2 id="什么是按位与"><a href="#什么是按位与" class="headerlink" title="什么是按位与"></a>什么是按位与</h2><p>按位与（Bitwise AND）是一种按位运算符，它对两个操作数的每一位执行逻辑 AND 操作。其结果是一个具有相同位数的整数，其中每一位都是两个操作数对应位上的值进行 AND 运算的结果。当且仅当两个操作数的相应位都为 1 时，结果中对应位才为 1，否则为 0。</p>
<p>按位与运算符使用符号 <code>&amp;</code> 表示，例如，对于两个 8 位的整数 a 和 b，a &amp; b 将对 a 和 b 的每一位进行逻辑 AND 操作，生成一个新的 8 位整数作为结果。</p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>a &#x3D; 10101010</p>
<p>b &#x3D; 11110000</p>
<p>a &amp; b &#x3D; 10100000</p>
<h2 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h2><p>在计算机中，<code>~</code> 符号表示按位取反（Bitwise NOT），它是一元运算符，只对一个操作数进行操作。按位取反会将操作数的每一位取反，即将 0 变为 1，将 1 变为 0。</p>
<p>例如，如果一个二进制数为 <code>00101011</code>，那么它的按位取反结果为 <code>11010100</code>。这是因为按位取反运算符会对每一个二进制位进行操作，将二进制位上的 0 变成 1，1 变成 0。</p>
<p>在 C 语言等许多编程语言中，<code>~</code> 运算符通常与整数类型一起使用，例如 <code>int</code> 或 <code>unsigned int</code>，表示对整数值的每个位取反。</p>
<h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><p>~00101101 &#x3D; 11010010</p>
<h2 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h2><p>题目要求只使用按位取反（<code>~</code>）和按位与（<code>&amp;</code>）来实现按位异或（<code>^</code>）运算，即实现一个函数 <code>bitXor(x, y)</code>，返回 x^y 的结果。</p>
<p>解题思路如下：</p>
<ol>
<li><p>使用按位与运算和按位取反运算，分别计算出 x 和 y 的“非重叠部分”和“重叠部分”。其中，“非重叠部分”指的是在 x 和 y 中只出现一次的二进制位，而“重叠部分”指的是在 x 和 y 中都出现的二进制位。</p>
<p>非重叠部分的计算可以使用按位与运算和按位取反运算，即 x &amp; ~y 和 ~x &amp; y。重叠部分的计算可以使用按位与运算，即 x &amp; y。</p>
</li>
<li><p>将“非重叠部分”和“重叠部分”的结果进行按位或运算，得到最终结果。具体来说，先将“非重叠部分”和“重叠部分”的结果进行按位或运算，得到一个中间结果。然后再将中间结果进行按位取反运算，得到最终结果。</p>
<p>这个步骤可以使用按位取反运算和按位与运算来实现，即 ~(lhs &amp; rhs)，其中 lhs 表示“非重叠部分”，rhs 表示“重叠部分”。</p>
<h3 id="例题解析bitXor-4-5-x3D-1"><a href="#例题解析bitXor-4-5-x3D-1" class="headerlink" title="例题解析bitXor(4, 5) &#x3D; 1"></a>例题解析bitXor(4, 5) &#x3D; 1</h3><p>题目要求实现一个函数 <code>bitXor(x, y)</code>，其中 x 和 y 分别为两个整数，函数的返回值是它们的按位异或结果。要求只能使用按位非运算符（<code>~</code>）和按位与运算符（<code>&amp;</code>），不能使用其他的运算符。</p>
<p>按照异或运算的性质，x ^ y 可以表示为：</p>
<ul>
<li>(x &amp; <del>y) | (</del>x &amp; y)</li>
</ul>
<p>这个式子的意思是，先对 x 和 y 进行按位取反运算，然后得到它们的“非重叠部分”和“重叠部分”。对于“非重叠部分”，只保留 y 中对应位为 1 的位，对于 x 中对应位为 1 的位则取反为 0；对于“重叠部分”，则保留 x 和 y 中对应位都为 1 的位。最后将“非重叠部分”和“重叠部分”进行按位或运算，即可得到 x ^ y 的结果。</p>
<p>根据上述思路，对于输入的 x&#x3D;4 和 y&#x3D;5，它们的二进制表示分别为 100 和 101。按照上述公式进行计算，得到：</p>
<ul>
<li>x &amp; ~y &#x3D; 100 &amp; 010 &#x3D; 000</li>
<li>~x &amp; y &#x3D; ~100 &amp; 101 &#x3D; 001</li>
<li>(x &amp; <del>y) | (</del>x &amp; y) &#x3D; 000 | 001 &#x3D; 001</li>
</ul>
<p>因此，<code>bitXor(4, 5)</code> 的结果为 1。</p>
<h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p>int bitXor(int x, int y) {  </p>
<p>int lhs &#x3D; ~x &amp; y;  &#x2F;&#x2F; 计算 x 和 y 的“非重叠部分”  </p>
<p>int rhs &#x3D; x &amp; ~y;  </p>
<p>return ~(lhs &amp; rhs);  &#x2F;&#x2F; 将“非重叠部分”和“重叠部分”进行按位或和按位取反运算，得到最终结果 </p>
<p>}</p>
<h1 id="tmin"><a href="#tmin" class="headerlink" title="tmin"></a>tmin</h1><h2 id="什么是tmin"><a href="#什么是tmin" class="headerlink" title="什么是tmin"></a>什么是tmin</h2><p><code>tmin</code> 是指最小的二进制补码整数，在32位补码表示中，其二进制表示为1000…0000，即最高位为1，其他位为0。因为在补码表示中，最高位为符号位，表示该数为负数，而其他位为0，表示该数的绝对值为最大，因此它是最小的二进制补码整数。</p>
<h2 id="题目解释"><a href="#题目解释" class="headerlink" title="题目解释"></a>题目解释</h2><p><code>tmin - return minimum two&#39;s complement integer</code> 意思是实现一个函数 <code>tmin</code>，用于返回最小的二进制补码整数。在32位补码表示中，最小的二进制补码整数为1000…0000（最高位为符号位，其余位为0），因此 <code>tmin</code> 函数应该返回这个值。这个函数应该使用合法的运算符和最小的操作数数量来实现。</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这道题目要求我们返回最小的二进制补码整数。在二进制补码中，最小的整数是符号位为1，其余位都是0。因此，我们只需要构造一个二进制数，让符号位为1，其余位都是0即可。在32位的二进制补码中，最小的整数可以用十六进制表示为<code>0x80000000</code>，或者用二进制表示为<code>0b10000000000000000000000000000000</code>。因此，我们可以直接返回这个数即可。</p>
<p>但是需要注意的是，题目中规定了只能使用一些特定的运算符来实现这个功能，包括非运算符<code>~</code>、与运算符<code>&amp;</code>、异或运算符<code>^</code>、或运算符<code>|</code>、加法运算符<code>+</code>和位移运算符<code>&lt;&lt;</code>、<code>&gt;&gt;</code>。因此，我们需要利用这些运算符来构造这个二进制数，而不能直接使用十六进制或二进制来表示。我们可以利用左移运算符<code>&lt;&lt;</code>来将<code>1</code>移动到符号位，然后再用其他运算符将其它位设置为0，得到最小的二进制补码整数。具体实现方法如下：</p>
<p>int tmin(void) {<br>  return 1 &lt;&lt; 31;<br>}</p>
<p>这样，我们就用了一条左移运算符<code>&lt;&lt;</code>就实现了这个函数。</p>
<h2 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h2><p>返回最小的二进制补码整数的实现可以使用左移运算符 <code>&lt;&lt;</code>。具体实现如下：</p>
<p>int tmin() {<br>  return 1 &lt;&lt; 31;<br>}</p>
<p>在二进制补码表示中，最小的整数是在符号位为1，其它位均为0时得到的。因此，可以使用左移运算符将1移动到符号位，然后移动31位，这样得到的结果就是最小的二进制补码整数了。</p>
<h1 id="isTmax"><a href="#isTmax" class="headerlink" title="isTmax"></a>isTmax</h1><h2 id="题目解释-1"><a href="#题目解释-1" class="headerlink" title="题目解释"></a>题目解释</h2><p><code>isTmax</code>函数的作用是判断一个整数x是否为32位有符号整数的最大值。</p>
<p>函数isTmax的作用是判断给定的整数x是否为32位二进制补码表示下的最大值，如果是，则返回1，否则返回0。其中，32位二进制补码中最大值的特征是除了最高位为1之外，其余位均为1。</p>
<h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>1.首先可以发现，对于32位的最大二进制补码数来说，其符号位为1，其余所有位都为0。因此，可以通过下面的方法来判断给定的数是否为最大值：</p>
<ul>
<li>判断x是否为负数（即符号位是否为1）；</li>
<li>判断x+1是否为负数。</li>
</ul>
<p>2.如果x是最大值，则x+1会溢出为最小值（即32位二进制补码表示下的最小负数），其符号位为1，其余所有位也为0。</p>
<p>3.最后，根据上述判断结果，如果x是最大值，则返回1，否则返回0。</p>
<p>基于以上思路，可以编写如下的isTmax函数：</p>
<p>int isTmax(int x) {<br>    int y &#x3D; x + 1;  &#x2F;&#x2F; 计算x+1<br>    int negX &#x3D; !x;  &#x2F;&#x2F; 判断x是否为0<br>    int isTmax &#x3D; !(y ^ x) &amp; !negX;  &#x2F;&#x2F; 判断是否为最大值<br>    return isTmax;<br>}</p>
<p>其中，使用了逻辑运算符!（逻辑非）、~（按位取反）、&amp;（按位与）、^（按位异或）和+（加法）等运算符，而且使用了三个中间变量，即y、negX和isTmax。根据题目要求，最大操作次数为10次。</p>
<h3 id="注：为什么要计算x-1-在二进制补码表示中，最大的二进制补码整数是0111…111，最小的二进制补码整数是1000…000。如果x是最大的二进制补码整数，那么x-1会溢出成最小的二进制补码整数，也就是tmin。因此，我们可以检查x-1是否等于-tmin来判断x是否为最大的二进制补码整数。"><a href="#注：为什么要计算x-1-在二进制补码表示中，最大的二进制补码整数是0111…111，最小的二进制补码整数是1000…000。如果x是最大的二进制补码整数，那么x-1会溢出成最小的二进制补码整数，也就是tmin。因此，我们可以检查x-1是否等于-tmin来判断x是否为最大的二进制补码整数。" class="headerlink" title="注：为什么要计算x+1 :在二进制补码表示中，最大的二进制补码整数是0111…111，最小的二进制补码整数是1000…000。如果x是最大的二进制补码整数，那么x+1会溢出成最小的二进制补码整数，也就是tmin。因此，我们可以检查x+1是否等于-tmin来判断x是否为最大的二进制补码整数。"></a>注：为什么要计算x+1 :在二进制补码表示中，最大的二进制补码整数是0111…111，最小的二进制补码整数是1000…000。如果x是最大的二进制补码整数，那么x+1会溢出成最小的二进制补码整数，也就是tmin。因此，我们可以检查x+1是否等于-tmin来判断x是否为最大的二进制补码整数。</h3><h2 id="答案-2"><a href="#答案-2" class="headerlink" title="答案"></a>答案</h2><p>int isTmax(int x) {<br>    int y &#x3D; x + 1;  &#x2F;&#x2F; 计算x+1<br>    int negX &#x3D; !x;  &#x2F;&#x2F; 判断x是否为0<br>    int isTmax &#x3D; !(y ^ x) &amp; !negX;  &#x2F;&#x2F; 判断是否为最大值<br>    return isTmax;<br>}</p>
<h1 id="allOddBits"><a href="#allOddBits" class="headerlink" title="allOddBits"></a>allOddBits</h1><h2 id="题目解释-2"><a href="#题目解释-2" class="headerlink" title="题目解释"></a>题目解释</h2><p>函数的名字为 “allOddBits”，它的输入参数是一个 “word”，这个 word 可能是一个整数或者一个二进制字符串。</p>
<p>这个函数的作用是检查输入的 word 是否所有的奇数位（即二进制表示中从右往左数的第1位、第3位、第5位等）都设置为了 1。如果是，那么函数就返回 1（表示真或成功）；否则返回 0（表示假或失败）。</p>
<p>例如，如果输入的 word 是一个 16 位的二进制字符串 “1010101010101010”，其中奇数位是 “1111”。如果所有的奇数位都设置为了 1，那么函数就返回 1；如果任意一个奇数位设置为了 0，那么函数就返回 0。</p>
<p>总的来说，这个函数可以用于检查一个二进制数字中的特定位是否被设置为了指定的值。</p>
<h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><ol>
<li>首先，定义一个掩码 <code>mask</code>，该掩码的二进制数值为 <code>10101010...</code>，即所有奇数位都为 1，偶数位都为 0。</li>
<li>然后，通过位运算将 <code>mask</code> 扩展到 32 位，得到一个可以用来检测所有奇数位的掩码。</li>
<li>最后，将输入的数值 <code>x</code> 与 <code>mask</code> 做 “&amp;” 运算，得到所有奇数位的值，然后将这个值与 <code>mask</code> 做 “^” 运算，得到所有奇数位为 0 的值。如果这个值等于 0，则说明所有奇数位都为 1，返回 1；否则返回 0。</li>
</ol>
<p>该代码中，使用了 4 次位运算符：”|”, “&lt;&lt;”, “&amp;” 和 “^”，没有使用除法、乘法等高级运算符。因此，代码满足了题目的要求，使用的最大运算符次数为 4 + 4 + 2 + 2 &#x3D; 12，符合最大运算符次数的限制。同时，该代码可以处理输入的数值为任意 32 位整数的情况，且能够正确地返回 1 或 0。</p>
<h2 id="答案-3"><a href="#答案-3" class="headerlink" title="答案"></a>答案</h2><p>int allOddBits(int x) {<br>  int mask &#x3D; 0xAA;<br>  mask |&#x3D; mask &lt;&lt; 8;<br>  mask |&#x3D; mask &lt;&lt; 16;<br>  return !((x &amp; mask) ^ mask);<br>}</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>实验</tag>
      </tags>
  </entry>
  <entry>
    <title>校赛wp</title>
    <url>/2023/05/19/%E6%A0%A1%E8%B5%9Bwp/</url>
    <content><![CDATA[<h1 id="爱上二维码"><a href="#爱上二维码" class="headerlink" title="爱上二维码"></a>爱上二维码</h1><p>打开文件有几个png文件，根据提示逐个扫码</p>
<p>SLsec{Hello_duck!}</p>
<h1 id="WORD"><a href="#WORD" class="headerlink" title="WORD"></a>WORD</h1><p>右键单击选择字体，点隐藏文字</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305191931735.png" alt="image-20230519193136704"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305191930294.png" alt="image-20230519193038200"></p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305191931862.png" alt="image-20230519193103833"></p>
<p>SLsec{Stop_dreaming—CTF}</p>
<h1 id="突破！！！"><a href="#突破！！！" class="headerlink" title="突破！！！"></a>突破！！！</h1><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305191932243.png" alt="image-20230519193220211"></p>
<h1 id="听首歌放松一下！"><a href="#听首歌放松一下！" class="headerlink" title="听首歌放松一下！"></a>听首歌放松一下！</h1><p>最后五秒为摩斯密码</p>
<p><a href="https://demo.zjmainstay.cn/morse_code/index.html">摩斯密码翻译器-有敲击声音的在线摩斯密码翻译练习工具 (zjmainstay.cn)</a></p>
<p>放入上述转换器直接转换出flag</p>
<p>SLsec{greatmusic}</p>
<h1 id="爱上二维码2"><a href="#爱上二维码2" class="headerlink" title="爱上二维码2"></a>爱上二维码2</h1><p>一个一个扫描</p>
<p>SLsec{Do_you_know_my_name?}</p>
<h1 id="流量分析（一）"><a href="#流量分析（一）" class="headerlink" title="流量分析（一）"></a>流量分析（一）</h1><p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305212026903.png" alt="image-20230521202637764"></p>
<p>SLsec{ffb7567a1d4f4abdffdb54e022f8facd}</p>
<h1 id="流量分析（二）"><a href="#流量分析（二）" class="headerlink" title="流量分析（二）"></a>流量分析（二）</h1><p>找到HTTP</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305212038487.png" alt="image-20230521203822436"></p>
<p>TCP追踪流第三个</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305212039119.png" alt="image-20230521203901040"></p>
<p>追踪该数据包的http流，由开头”<code>/9j/</code>”，可知以下数据为<code>jpg</code>图片，“<code>/9j/</code>”经<code>base64</code>解码后结果为“<code>\xff \xd8 \xff</code>”，该三字节为<code>jpg</code>文件的开头三字节，所以可推断出以下文件为<code>jpg</code>文件</p>
<p><img src="https://i0lu.oss-cn-beijing.aliyuncs.com/%E5%9B%BE%E5%BA%8A/202305212043030.png" alt="image-20230521204331913"></p>
<p>flag{209acebf6324a09671abc31c869de72c}</p>
<h1 id="知识竞赛"><a href="#知识竞赛" class="headerlink" title="知识竞赛"></a>知识竞赛</h1><p>SLsec{Luck will always be with you}</p>
]]></content>
  </entry>
</search>
